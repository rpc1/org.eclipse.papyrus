/*
 * Copyright (c) 2007, 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 *    Michael Golubev (Borland) - [243151] explicit source/target for links
 */
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/papyrus/2009/papyrusgmfgenextension'»
«EXTENSION xpt::EMFUtils»
«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::diagram::editpolicies::LinkUtils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION gmf::GenModelUtils»

«REM»Mutating Canvas :: semantic children of diagram must select the correct features depending on the element that is the actual canvas«ENDREM»
«REM»@author :: fjcano (C) 2008«ENDREM»
«AROUND getSemanticChildrenOfView FOR gmfgen::GenContainerBase-»
	«REM»«IF GenDiagram.isInstance(this) && getReferencingObjects().typeSelect(AlternateCanvas).size() > 0»«ENDREM»
	«IF self.oclIsKindOf(gmfgen::GenDiagram) and papyrusgmfgenextension::AlternateCanvas.allInstances()->select(v:papyrusgmfgenextension::AlternateCanvas|v.diagram=self)->size()<>0»
«REM»
	The switch that performs the correct job according to the canvas' EObject
«ENDREM»
	«EXPAND createUpdaterSwitch FOR self»
	«REM»The canvas get method that depends on the Switch«ENDREM»
	«EXPAND xpt::Common::generatedMemberComment»
	public static java.util.List «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodName»(org.eclipse.gmf.runtime.notation.View view) {
		«IF getSemanticChildrenChildFeatures(self)->size() > 0 or getPhantomNodes(self)->size() > 0-»
		«EXPAND defineModelElement-»
		aSwitch.setInfo(view);
		java.util.List<«editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName()»> result = aSwitch.doSwitch(modelElement);
		if (result == null || result.size() <= 0) {
			return java.util.Collections.EMPTY_LIST;
		}
		«IF not getPhantomNodes(self)->isEmpty()-»
		org.eclipse.emf.ecore.resource.Resource resource = modelElement.eResource();
		for (java.util.Iterator semanticIterator = getPhantomNodesIterator(resource); semanticIterator.hasNext();) {
			org.eclipse.emf.ecore.EObject childElement = (org.eclipse.emf.ecore.EObject) semanticIterator.next();
			if (childElement == modelElement) {
				continue;
			}
			«EXPAND addNextIfPhantom FOREACH getPhantomNodes(self)-»
		}
		«ENDIF-»		
		return result;
		«ELSE-»
		return java.util.Collections.EMPTY_LIST;
		«ENDIF-»
	}
	«ELSEIF papyrusgmfgenextension::SpecificDiagramUpdater.allInstances()->select(updater: papyrusgmfgenextension::SpecificDiagramUpdater | (updater.genNode = self) and (updater.classpath <> null))->size()<>0»
		«FOREACH papyrusgmfgenextension::SpecificDiagramUpdater.allInstances()->select(updater: papyrusgmfgenextension::SpecificDiagramUpdater | (updater.genNode = self) and (updater.classpath <> null)) AS updater»
			public static java.util.List «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodName»(org.eclipse.gmf.runtime.notation.View view) {
				org.eclipse.papyrus.uml.diagram.common.part.ICustomDiagramUpdater customUpdater = new «updater.classpath»();
				return customUpdater.getSemanticChildren(view);
			}
		«ENDFOREACH»	
	«ELSE»
	«targetDef.proceed()-»
	«ENDIF»
«ENDAROUND»
