/*
 * Copyright (c) 2010 CEA LIST
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Yann Tanguy (CEA LIST) - initial API and implementation
 *
 */

modeltype gmfgen uses "http://www.eclipse.org/gmf/2009/GenModel";
modeltype papyrusgmfgenextension uses "http://www.eclipse.org/papyrus/2009/papyrusgmfgenextension";

library EditPartsUtils;

helper gmfgen::GenExternalNodeLabel::hasSpecificLocator() : Boolean {
	return (papyrusgmfgenextension::SpecificLocatorExternalLabel.allInstances()
					->select(loc : papyrusgmfgenextension::SpecificLocatorExternalLabel
						| loc.genExternalNodeLabel->includes(self))
					->size() <> 0);
}

helper gmfgen::GenExternalNodeLabel::getSpecificLocator() : String {
	if self.hasSpecificLocator() then {
		return papyrusgmfgenextension::SpecificLocatorExternalLabel.allInstances()
					->select(loc : papyrusgmfgenextension::SpecificLocatorExternalLabel
						| loc.genExternalNodeLabel->includes(self))
					->asSequence()->first().classpath
	} endif;
	
	return null;
}

helper gmfgen::GenNode::getExternalLabelsWithoutSpecificLocator() : Sequence(gmfgen::GenExternalNodeLabel) {
	return (self.labels)[gmfgen::GenExternalNodeLabel]
		->select(l : gmfgen::GenExternalNodeLabel
			| not l.hasSpecificLocator())
		->asSequence();
}

helper gmfgen::GenNode::getExternalLabelsWithSpecificLocator() : Sequence(gmfgen::GenExternalNodeLabel) {
	return (self.labels)[gmfgen::GenExternalNodeLabel]
		->select(l : gmfgen::GenExternalNodeLabel
			| l.hasSpecificLocator())
		->asSequence();
}
