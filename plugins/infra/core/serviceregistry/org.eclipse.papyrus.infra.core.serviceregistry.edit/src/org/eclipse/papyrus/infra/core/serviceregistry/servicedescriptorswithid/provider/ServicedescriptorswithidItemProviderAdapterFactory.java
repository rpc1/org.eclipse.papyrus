/**
 */
package org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.util.ServicedescriptorswithidAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class ServicedescriptorswithidItemProviderAdapterFactory extends ServicedescriptorswithidAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	public ServicedescriptorswithidItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.RegistryIdDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected RegistryIdDescItemProvider registryIdDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.RegistryIdDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createRegistryIdDescAdapter() {
		if (registryIdDescItemProvider == null) {
			registryIdDescItemProvider = new RegistryIdDescItemProvider(this);
		}

		return registryIdDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ServiceIdDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ServiceIdDescItemProvider serviceIdDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ServiceIdDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createServiceIdDescAdapter() {
		if (serviceIdDescItemProvider == null) {
			serviceIdDescItemProvider = new ServiceIdDescItemProvider(this);
		}

		return serviceIdDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ServiceSetIdDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ServiceSetIdDescItemProvider serviceSetIdDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ServiceSetIdDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createServiceSetIdDescAdapter() {
		if (serviceSetIdDescItemProvider == null) {
			serviceSetIdDescItemProvider = new ServiceSetIdDescItemProvider(this);
		}

		return serviceSetIdDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.AliasIdDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected AliasIdDescItemProvider aliasIdDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.AliasIdDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createAliasIdDescAdapter() {
		if (aliasIdDescItemProvider == null) {
			aliasIdDescItemProvider = new AliasIdDescItemProvider(this);
		}

		return aliasIdDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.IdDescriptors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected IdDescriptorsItemProvider idDescriptorsItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.IdDescriptors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createIdDescriptorsAdapter() {
		if (idDescriptorsItemProvider == null) {
			idDescriptorsItemProvider = new IdDescriptorsItemProvider(this);
		}

		return idDescriptorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.PropertyInjection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected PropertyInjectionItemProvider propertyInjectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.PropertyInjection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createPropertyInjectionAdapter() {
		if (propertyInjectionItemProvider == null) {
			propertyInjectionItemProvider = new PropertyInjectionItemProvider(this);
		}

		return propertyInjectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.MethodInjection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected MethodInjectionItemProvider methodInjectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.MethodInjection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createMethodInjectionAdapter() {
		if (methodInjectionItemProvider == null) {
			methodInjectionItemProvider = new MethodInjectionItemProvider(this);
		}

		return methodInjectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ParameterInjection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ParameterInjectionItemProvider parameterInjectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ParameterInjection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createParameterInjectionAdapter() {
		if (parameterInjectionItemProvider == null) {
			parameterInjectionItemProvider = new ParameterInjectionItemProvider(this);
		}

		return parameterInjectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.InjectedService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected InjectedServiceItemProvider injectedServiceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.InjectedService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createInjectedServiceAdapter() {
		if (injectedServiceItemProvider == null) {
			injectedServiceItemProvider = new InjectedServiceItemProvider(this);
		}

		return injectedServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.OpaqueInjectedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected OpaqueInjectedValueItemProvider opaqueInjectedValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.OpaqueInjectedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createOpaqueInjectedValueAdapter() {
		if (opaqueInjectedValueItemProvider == null) {
			opaqueInjectedValueItemProvider = new OpaqueInjectedValueItemProvider(this);
		}

		return opaqueInjectedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ConstructorInjection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ConstructorInjectionItemProvider constructorInjectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ConstructorInjection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createConstructorInjectionAdapter() {
		if (constructorInjectionItemProvider == null) {
			constructorInjectionItemProvider = new ConstructorInjectionItemProvider(this);
		}

		return constructorInjectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ServiceFactoryIdDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	protected ServiceFactoryIdDescItemProvider serviceFactoryIdDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.papyrus.infra.core.serviceregistry.servicedescriptorswithid.ServiceFactoryIdDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter createServiceFactoryIdDescAdapter() {
		if (serviceFactoryIdDescItemProvider == null) {
			serviceFactoryIdDescItemProvider = new ServiceFactoryIdDescItemProvider(this);
		}

		return serviceFactoryIdDescItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 *
	 * @generated
	 */
	@Override
	public void dispose() {
		if (registryIdDescItemProvider != null) {
			registryIdDescItemProvider.dispose();
		}
		if (serviceIdDescItemProvider != null) {
			serviceIdDescItemProvider.dispose();
		}
		if (serviceSetIdDescItemProvider != null) {
			serviceSetIdDescItemProvider.dispose();
		}
		if (aliasIdDescItemProvider != null) {
			aliasIdDescItemProvider.dispose();
		}
		if (idDescriptorsItemProvider != null) {
			idDescriptorsItemProvider.dispose();
		}
		if (propertyInjectionItemProvider != null) {
			propertyInjectionItemProvider.dispose();
		}
		if (methodInjectionItemProvider != null) {
			methodInjectionItemProvider.dispose();
		}
		if (parameterInjectionItemProvider != null) {
			parameterInjectionItemProvider.dispose();
		}
		if (injectedServiceItemProvider != null) {
			injectedServiceItemProvider.dispose();
		}
		if (opaqueInjectedValueItemProvider != null) {
			opaqueInjectedValueItemProvider.dispose();
		}
		if (constructorInjectionItemProvider != null) {
			constructorInjectionItemProvider.dispose();
		}
		if (serviceFactoryIdDescItemProvider != null) {
			serviceFactoryIdDescItemProvider.dispose();
		}
	}

}
