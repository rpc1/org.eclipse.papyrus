/*****************************************************************************
 * Copyright (c) 2013, 2014 CEA LIST.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Camille Letavernier (CEA LIST) camille.letavernier@cea.fr - Initial API and implementation
 *****************************************************************************/
import RSAToPapyrus;

modeltype notation "strict" uses 'http://www.eclipse.org/gmf/runtime/1.0.2/notation';
modeltype umlNotation "strict" uses 'http://www.eclipse.org/papyrus/umlnotation';
modeltype uml "strict" uses 'http://www.eclipse.org/uml2/5.0.0/UML';
modeltype ecore "strict" uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype config "strict" uses 'http:///RSAToPapyrusParameters.ecore';

transformation RSAComponentDiagram(inout semantics : uml, out graphics : notation, in param : config) extends RSAToPapyrus;

query View::getDiagramType() : String{
	return 'PapyrusUMLComponentDiagram';
}

mapping notation::Diagram::toPapyrusComponentDiagram() : notation::Diagram inherits Diagram::toPapyrusDiagram when {
	self.type = 'Component'
}{
	
}

mapping Node::toNode() : Node disjuncts
	UMLShape::toPapyrusShape,
	UMLShapeCompartment::toStructureCompartment,
	BasicSemanticCompartment::toListCompartment,
	BasicDecorationNode::toConnectorLabel,
	BasicDecorationNode::toLabel
	//TODO: Disjunct nodes mapping
;

mapping Edge::toEdge() : Edge disjuncts
	UMLConnector::toPapyrusConnector
	//TODO: Disjunct edges mapping
;

mapping UMLShapeCompartment::toStructureCompartment() : DecorationNode inherits UMLShapeCompartment::toAbstractStructureCompartment when {
	self.type = 'StructureCompartment' or self.type = 'PackageContents' and not self.getType().oclIsUndefined();
}{
	
}


/***** Nodes **********/

mapping UMLShape::toPapyrusShape() : Shape inherits Shape::toPapyrusShape when {
	self.type = '' and not self.getType().oclIsUndefined() and (
		self.element.oclIsTypeOf(Component)or
	self.element.oclIsTypeOf(Dependency)or
	self.element.oclIsTypeOf(Package)or
	self.element.oclIsTypeOf(Port)or
	self.element.oclIsTypeOf(Comment)or
	self.element.oclIsTypeOf(Interface)or
	self.element.oclIsTypeOf(Model)or
	self.element.oclIsTypeOf(Property)or
	self.element.oclIsTypeOf(Constraint)or
	self.element.oclIsTypeOf(Operation)or
	self.element.oclIsTypeOf(Reception)
	)
}{
	
}


/****** Connector Labels ******/

mapping BasicDecorationNode::toConnectorLabel() : DecorationNode inherits Node::toPapyrusConnectorLabel when {
	not self.getType().oclIsUndefined() and (
		self.type = 'ToMultiplicityLabel' or
		self.type = 'ToRoleLabel' or
		self.type = 'FromMultiplicityLabel' or
		self.type = 'FromRoleLabel' or
		self.type = 'NameLabel' or
		self.type = 'KindLabel'
	)
}{}

/****** Compartments *******/

mapping BasicDecorationNode::toLabel() : DecorationNode inherits Node::toPapyrusNode when {
	not self.getType().oclIsUndefined() and
	self.element.oclIsKindOf(uml::NamedElement) and 
	self.type = 'Name'
}{}

mapping BasicSemanticCompartment::toListCompartment() : BasicCompartment inherits Node::toPapyrusNode, DrawerStyle::toDrawerStyle when {
	self.type.endsWith('Compartment') and not self.getType().oclIsUndefined()
}{
	result.children := self.findElement().map toContents(self);
}

mapping Element::toContents(node : BasicSemanticCompartment) : Sequence(Node) disjuncts
	Interface::toContents
;

mapping Interface::toContents(node : BasicSemanticCompartment) : Sequence(Node) disjuncts
	Interface::toAttributeCompartmentContents,
	Interface::toOperationCompartmentContents
;

mapping Interface::toAttributeCompartmentContents(node : BasicSemanticCompartment) : Sequence(Node) when {
	node.type = 'AttributeCompartment';
}{
	init {
		result := (self.map fillProperty(node))
	}
}

mapping Interface::toOperationCompartmentContents(node : BasicSemanticCompartment) : Sequence(Node) when {
	node.type = 'ReceptionCompartment';
}{
	init {
		result := (self.map fillOperation(node))
	->union(self.map fillReception(node))
	}
}

mapping uml::Interface::fillProperty(node : BasicSemanticCompartment) : Sequence(Node) when {
	node.type='AttributeCompartment';
}{
	init {
		result := self.ownedAttribute->selectByKind(Property).map toPropertyInInterface(node)->asSequence();
	}
}

mapping uml::Interface::fillOperation(node : BasicSemanticCompartment) : Sequence(Node) when {
	node.type='ReceptionCompartment';
}{
	init {
		result := self.ownedOperation->selectByKind(Operation).map toOperationInInterface(node)->asSequence();
	}
}

mapping uml::Interface::fillReception(node : BasicSemanticCompartment) : Sequence(Node) when {
	node.type='ReceptionCompartment';
}{
	init {
		result := self.ownedReception->selectByKind(Reception).map toReceptionInInterface(node)->asSequence();
	}
}

mapping Property::toPropertyInInterface(node : Node) : Shape inherits Element::toCompartmentEntry {
	result.type := '1';
}

mapping Operation::toOperationInInterface(node : Node) : Shape inherits Element::toCompartmentEntry {
	result.type := '5';
}

mapping Reception::toReceptionInInterface(node : Node) : Shape inherits Element::toCompartmentEntry {
	result.type := '6';
}



/******* Edges ********/


mapping UMLConnector::toPapyrusConnector() : Connector inherits Connector::toPapyrusConnector when {
	self.type = '' and 
	not self.getType().oclIsUndefined() and (
		self.element.oclIsTypeOf(Usage)or
		self.element.oclIsTypeOf(InterfaceRealization)or
		self.element.oclIsTypeOf(Generalization)or
		self.element.oclIsTypeOf(Substitution)or
		self.element.oclIsTypeOf(Manifestation)or
		self.element.oclIsTypeOf(ComponentRealization)or
		self.element.oclIsTypeOf(Abstraction)or
		self.element.oclIsTypeOf(Dependency)or
		self.element.oclIsTypeOf(Dependency)
	)
}{
	result.styles := self.map toFontStyle();
}

/****** Element Type queries ******/

query View::getNodeType(element : Element) : String {
	return
		if element.oclIsTypeOf(Component) then '2002' 
		elif element.oclIsTypeOf(Dependency) then '3203' 
		elif element.oclIsTypeOf(Package) then '3200' 
		elif element.oclIsTypeOf(Port) then '3069' 
		elif element.oclIsTypeOf(Comment) then '3201' 
		elif element.oclIsTypeOf(Interface) then '3205' 
		elif element.oclIsTypeOf(Model) then '3202' 
		elif element.oclIsTypeOf(Property) then '1' 
		elif element.oclIsTypeOf(Constraint) then '3199' 
		elif element.oclIsTypeOf(Operation) then '5' 
		elif element.oclIsTypeOf(Reception) then '6' 
		else self.fail()
	endif;
}


query View::getDecorationType(element : Element) : String{
	return self.doGetDecorationType(element);
	
}

query View::doGetDecorationType(element : Element) : String{
	return if self.container().oclIsKindOf(Node) then {
		return if element.oclIsTypeOf(Component) then
			return switch {
				case (self.type = 'Name') '5004';
				case (self.type = 'StructureCompartment') '7001';
			}
			elif element.oclIsTypeOf(Package) then
				return switch {
					case (self.type = 'Name') '5254';
					case (self.type = 'PackageContents') '7002';
				}
			elif element.oclIsTypeOf(Port) then
				return switch {
					case (self.type = 'Name') '5006';
					
				}
			elif element.oclIsTypeOf(Interface) then
				return switch {
					case (self.type = 'Name') '5266';
					case (self.type = 'AttributeCompartment') '7008';
				case (self.type = 'ReceptionCompartment') '7009';
				}
			elif element.oclIsTypeOf(Model) then
				return switch {
					case (self.type = 'Name') '5262';
					case (self.type = 'StructureCompartment') '7006';
				}
			elif element.oclIsTypeOf(Constraint) then
				return switch {
					case (self.type = 'Name') '5252';
					
				}

		endif
	} else {
		return if element.oclIsTypeOf(Generalization) then
				return switch {
							
					case (self.type = 'KindLabel') '2';
				}
			
			elif element.oclIsTypeOf(Substitution) then
				return switch {
					case (self.type='Name') '6006';		
					case (self.type = 'NameLabel') '6006';
					case (self.type = 'KindLabel') '6020';
				}
			
			elif element.oclIsTypeOf(Manifestation) then
				return switch {
					case (self.type='Name') '6008';		
					case (self.type = 'NameLabel') '6008';
					case (self.type = 'KindLabel') '6022';
				}
			
			elif element.oclIsTypeOf(ComponentRealization) then
				return switch {
					case (self.type='Name') '3';		
					case (self.type = 'NameLabel') '3';
					case (self.type = 'KindLabel') '4';
				}
			
			elif element.oclIsTypeOf(Abstraction) then
				return switch {
					case (self.type='Name') '6007';		
					case (self.type = 'NameLabel') '6007';
					case (self.type = 'KindLabel') '6021';
				}
			
			elif element.oclIsTypeOf(Dependency) then
				return switch {
					case (self.type='Name') '6009';		
					case (self.type = 'NameLabel') '6009';
					case (self.type = 'KindLabel') '6023';
				}
			
		endif
	} endif;
}


query View::getEdgeType(element : Element) : String {
	return
		if element.oclIsTypeOf(Usage) then '4001'
		elif element.oclIsTypeOf(InterfaceRealization) then '4006'
		elif element.oclIsTypeOf(Generalization) then '4003'
		elif element.oclIsTypeOf(Substitution) then '4012'
		elif element.oclIsTypeOf(Manifestation) then '4014'
		elif element.oclIsTypeOf(ComponentRealization) then '4007'
		elif element.oclIsTypeOf(Abstraction) then '4013'
		elif element.oclIsTypeOf(Dependency) then '4010'
		elif element.oclIsTypeOf(Dependency) then '4017'
		else self.fail()
	endif;
}

