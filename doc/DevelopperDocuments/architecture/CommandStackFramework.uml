<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xmi:id="_JJIvUHOxEd-nKvj-XTCBkg" name="model">
  <ownedComment xmi:id="_L6CvgHh5Ed-ECKyh8Dg6Wg">
    <body> Transactional</body>
  </ownedComment>
  <packagedElement xmi:type="uml:Model" xmi:id="_qbqg0HUuEd-R54hgjGwYvw" name="java">
    <packagedElement xmi:type="uml:Package" xmi:id="_QJNf4XOxEd-nKvj-XTCBkg" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_QJNf4nOxEd-nKvj-XTCBkg" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_QJNf43OxEd-nKvj-XTCBkg" name="List"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QJqLynOxEd-nKvj-XTCBkg" name="Iterator"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_QJqLznOxEd-nKvj-XTCBkg" name="ListIterator"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_msnXLXO4Ed-nKvj-XTCBkg" name="Iterator"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_mswhE3O4Ed-nKvj-XTCBkg" name="ListIterator"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_5gGFc3PSEd-NtftfyF3YZw" name="Map"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_vhKCKncqEd-96YWU42lBhw" name="Collection"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_vsyDUncqEd-96YWU42lBhw" name="EventObject"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_0ey5cHctEd-96YWU42lBhw" name="EventListener"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_URINMXcvEd-96YWU42lBhw" name="Set"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_wTwGQXc2Ed-96YWU42lBhw" name="Stack"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_algZEHeiEd-udeJ8hQXrBA" name="ArrayList"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_QJNf7nOxEd-nKvj-XTCBkg" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_QJNf73OxEd-nKvj-XTCBkg" name="String"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_msnXL3O4Ed-nKvj-XTCBkg" name="Object"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_vm0lQ3cqEd-96YWU42lBhw" name="Exception"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_zsR3ZXctEd-96YWU42lBhw" name="Class"/>
        <packagedElement xmi:type="uml:Interface" xmi:id="_0i9nwnctEd-96YWU42lBhw" name="Runnable"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_0nI9IHctEd-96YWU42lBhw" name="Thread"/>
        <packagedElement xmi:type="uml:Package" xmi:id="_9y33cHcuEd-96YWU42lBhw" name="ref">
          <packagedElement xmi:type="uml:Class" xmi:id="_9y33cXcuEd-96YWU42lBhw" name="Reference"/>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_14wc8HekEd-udeJ8hQXrBA" name="Throwable"/>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_nSphcHUuEd-R54hgjGwYvw" name="datatype">
    <packagedElement xmi:type="uml:Package" xmi:id="_QJqLwXOxEd-nKvj-XTCBkg" name="datatype">
      <packagedElement xmi:type="uml:PrimitiveType" xmi:id="_QJqLwnOxEd-nKvj-XTCBkg" name="Boolean"/>
      <packagedElement xmi:type="uml:PrimitiveType" xmi:id="_QJqLxnOxEd-nKvj-XTCBkg" name="Integer"/>
      <packagedElement xmi:type="uml:PrimitiveType" xmi:id="_vdu6sHcqEd-96YWU42lBhw" name="Long"/>
      <packagedElement xmi:type="uml:PrimitiveType" xmi:id="_82hj8ncuEd-96YWU42lBhw" name="Byte"/>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_peRrgHUuEd-R54hgjGwYvw" name="gmf">
    <packagedElement xmi:type="uml:Package" xmi:id="_HK-0AHPGEd-bh5e9e7eOjw" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_HK-0AXPGEd-bh5e9e7eOjw" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_HK-0AnPGEd-bh5e9e7eOjw" name="gmf">
          <packagedElement xmi:type="uml:Package" xmi:id="_HK-0A3PGEd-bh5e9e7eOjw" name="runtime">
            <packagedElement xmi:type="uml:Package" xmi:id="_HK-0BHPGEd-bh5e9e7eOjw" name="common">
              <packagedElement xmi:type="uml:Package" xmi:id="_HK-0BXPGEd-bh5e9e7eOjw" name="core">
                <packagedElement xmi:type="uml:Package" xmi:id="_HK-0BnPGEd-bh5e9e7eOjw" name="command">
                  <packagedElement xmi:type="uml:Interface" xmi:id="_7-bbC3PQEd-NtftfyF3YZw" name="ICommandWithSettableResult"/>
                  <packagedElement xmi:type="uml:Interface" xmi:id="_HK-0B3PGEd-bh5e9e7eOjw" name="ICommand">
                    <ownedComment xmi:id="_HK-0CHPGEd-bh5e9e7eOjw">
                      <body>
 * A self-composing undoable operation that has a {@link CommandResult} and a
 * list of affected {@link IFile}s.
 * &lt;P>
 * Executing, undoing or redoing a command can have a result which clients can
 * obtain by using the {@link #getCommandResult()} method. For example,
 * executing a command that create a new entity may wish to make the new entity
 * accessible to clients through the {@link #getCommandResult()} method.
 * &lt;P>
 * The command provides a list of {@link IFile}s that are expected to be
 * modified when the it is executed, undone or redone. An
 * {@link IOperationApprover} is registered with the
 * {@link OperationHistoryFactory#getOperationHistory()} to validate the
 * modification to these resources.
 * &lt;P>
 * If an error occurs, or the progress monitor is canceled during execute, undo
 * or redo, the command should make every effort to roll back the changes it has
 * made up to that point.
 * 
 * @author khussey
 * @author ldamus
 * 
 * @canBeSeenBy %partners
 </body>
                    </ownedComment>
                    <generalization xmi:id="_HK-0CXPGEd-bh5e9e7eOjw" general="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    <ownedOperation xmi:id="_HLIlAHPGEd-bh5e9e7eOjw" name="getCommandResult" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLIlAXPGEd-bh5e9e7eOjw">
                        <body>
	 * Retrieves the result of executing, undoing, or redoing this command,
	 * depending on which of these operations was last performed. This value can
	 * be &lt;code>null&lt;/code> if the operation has no meaningful result.
	 * &lt;P>
	 * The value of this result is undefined if the command has not yet been
	 * executed, undone or redone.
	 * 
	 * @return The result of executing, undoing or redoing this command.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLIlA3PGEd-bh5e9e7eOjw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLIlBHPGEd-bh5e9e7eOjw" name="getAffectedFiles" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLIlBXPGEd-bh5e9e7eOjw">
                        <body>
	 * Returns the list of {@link IFile}s that are expected to be modified by
	 * this command.
	 * 
	 * @return the list of {@link IFile}s that will be modified
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLIlBnPGEd-bh5e9e7eOjw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_HLIlCHPGEd-bh5e9e7eOjw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_HLIlB3PGEd-bh5e9e7eOjw"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLIlCXPGEd-bh5e9e7eOjw" name="compose" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLIlCnPGEd-bh5e9e7eOjw">
                        <body>
	 * Returns a new command object that represents a composition of this
	 * command with the specified &lt;code>command&lt;/code> parameter.
	 * 
	 * @param operation
	 *            The operation that is to be composed with this command.
	 * @return A command that represents a composition of this command with the
	 *         specified command.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLIlC3PGEd-bh5e9e7eOjw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_HLRu8HPGEd-bh5e9e7eOjw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLRu8XPGEd-bh5e9e7eOjw" name="reduce" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLRu8nPGEd-bh5e9e7eOjw">
                        <body>
     * Returns the simplest form of this command that is equivalent. Use this
     * method to remove unnecessary nesting of commands.
     * 
     * @return the simplest form of this command that is equivalent
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLRu83PGEd-bh5e9e7eOjw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLRu9HPGEd-bh5e9e7eOjw" name="setLabel" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLRu9XPGEd-bh5e9e7eOjw">
                        <body>
     * Since not all commands have names, reduce() should propogate label from an
     * upper command that may be thrown away to the resultant reduced command. The
     * method is needed to assign the label to a nameless command, because
     * &lt;code>IUndoableOperation&lt;/code> is missing this method.
     * 
     * @param label command's new label
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLRu9nPGEd-bh5e9e7eOjw" name="label" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_HLIlAnPGEd-bh5e9e7eOjw" name="CommandResult"/>
                  <packagedElement xmi:type="uml:Interface" xmi:id="_HLbf8HPGEd-bh5e9e7eOjw" name="ICompositeCommand">
                    <ownedComment xmi:id="_HLbf8XPGEd-bh5e9e7eOjw">
                      <body>
 * A self-composing undoable operation that is has a {@link CommandResult}, a
 * list of affected {@link IFile}s, and is composed of child operations.
 * &lt;P>
 * Does not extend &lt;code>ICompositeOperation&lt;/code> because
 * &lt;UL>
 * &lt;LI> {@link #remove(IUndoableOperation)} does not dispose the removed
 * operation&lt;/LI>
 * &lt;LI> Children are explicitely composed by the client. Adding to an open
 * composite through the operation history is not supported.&lt;/LI>
 * &lt;/UL>
 * 
 * @author ldamus
 </body>
                    </ownedComment>
                    <generalization xmi:id="_HLbf8nPGEd-bh5e9e7eOjw" general="_HK-0B3PGEd-bh5e9e7eOjw"/>
                    <ownedOperation xmi:id="_HLbf83PGEd-bh5e9e7eOjw" name="add" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLbf9HPGEd-bh5e9e7eOjw">
                        <body>
     * &lt;p>
     * Add the specified operation as a child of this operation.
     * &lt;/p>
     * 
     * @param operation
     *            the operation to be added. If the operation instance has
     *            already been added, this method will have no effect.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLbf9XPGEd-bh5e9e7eOjw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLbf9nPGEd-bh5e9e7eOjw" name="remove" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLlQ8HPGEd-bh5e9e7eOjw">
                        <body>
     * &lt;p>
     * Remove the specified operation from this operation.
     * &lt;/p>
     * &lt;p>
     * Unlike {@link ICompositeOperation}, this does not dispose of the removed
     * operation since the composite did not create the operation.
     * &lt;/p>
     * 
     * @param operation
     *            the operation to be removed. The operation should be disposed
     *            by the receiver. This method will have no effect if the
     *            operation instance is not already a child.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLlQ8XPGEd-bh5e9e7eOjw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLlQ8nPGEd-bh5e9e7eOjw" name="isEmpty" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLlQ83PGEd-bh5e9e7eOjw">
                        <body>
     * Answers whether or not this composite operation has children.
     * 
     * @return &lt;code>true&lt;/code> if the operation does not have children,
     *         &lt;code>false&lt;/code> otherwise.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLlQ9HPGEd-bh5e9e7eOjw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLlQ9XPGEd-bh5e9e7eOjw" name="size" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLlQ9nPGEd-bh5e9e7eOjw">
                        <body>
     * Queries the number of child operations that I contain.
     * 
     * @return my size
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLlQ93PGEd-bh5e9e7eOjw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLlQ-HPGEd-bh5e9e7eOjw" name="iterator" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLlQ-XPGEd-bh5e9e7eOjw">
                        <body>
     * Obtains an iterator to traverse my child operations. Removing children
     * via this iterator correctly maintains my undo contexts.
     * 
     * @return an iterator of my children
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLlQ-nPGEd-bh5e9e7eOjw" type="_QJqLynOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLlQ-3PGEd-bh5e9e7eOjw" name="listIterator" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLlQ_HPGEd-bh5e9e7eOjw">
                        <body>
     * Obtains an iterator to traverse my child operations in either direction.
     * Adding and removing children via this iterator correctly maintains my
     * undo contexts.
     * &lt;p>
     * &lt;b>Note&lt;/b> that, unlike list iterators generally, this one does not
     * permit the addition of an operation that I already contain (the composite
     * does not permit duplicates). Moreover, only {@link IUndoableOperation}s
     * may be added, otherwise &lt;code>ClassCastException&lt;/code>s will result.
     * &lt;/p>
     * 
     * @return an iterator of my children
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLlQ_XPGEd-bh5e9e7eOjw" type="_QJqLznOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_HLlQ_nPGEd-bh5e9e7eOjw" name="listIterator" visibility="public" isAbstract="true">
                      <ownedComment xmi:id="_HLlQ_3PGEd-bh5e9e7eOjw">
                        <body>
     * Obtains an iterator to traverse my child operations in either direction,
     * starting from the specified &lt;code>index&lt;/code>. Adding and removing
     * children via this iterator correctly maintains my undo contexts.
     * &lt;p>
     * &lt;b>Note&lt;/b> that, unlike list iterators generally, this one does not
     * permit the addition of an operation that I already contain (the composite
     * does not permit duplicates). Moreover, only {@link IUndoableOperation}s
     * may be added, otherwise &lt;code>ClassCastException&lt;/code>s will result.
     * &lt;/p>
     * 
     * @param index
     *            the index in my children at which to start iterating
     * 
     * @return an iterator of my children
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_HLlRAHPGEd-bh5e9e7eOjw" type="_QJqLznOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_HLlRAXPGEd-bh5e9e7eOjw" name="index" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_7-bbAHPQEd-NtftfyF3YZw" name="AbstractCommand" clientDependency="_7-bbBHPQEd-NtftfyF3YZw _7-bbDHPQEd-NtftfyF3YZw" isAbstract="true">
                    <ownedComment xmi:id="_7-bbAXPQEd-NtftfyF3YZw">
                      <body>
 * An abstract superclass for GMF {@link IUndoableOperation}s that do not
 * modify EMF model resources.
 * &lt;p>
 * The operation provides a list of {@link IFile}s that are expected to be modified when
 * the operation is executed, undone or redone. An {@link IOperationApprover} is
 * registered with the {@link OperationHistoryFactory#getOperationHistory()} to
 * validate the modification to these resources.
 * &lt;p>
 * This class is meant to be extended by clients.
 * 
 * @author khussey
 * @author ldamus
 *
 * @see org.eclipse.gmf.runtime.common.core.command.ICommand
 * @canBeSeenBy %partners
 </body>
                    </ownedComment>
                    <generalization xmi:id="_7-bbA3PQEd-NtftfyF3YZw" general="_7-bbAnPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_7_B38HPQEd-NtftfyF3YZw" name="affectedFiles" visibility="private" isLeaf="true" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_7_B38nPQEd-NtftfyF3YZw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_7_B38XPQEd-NtftfyF3YZw"/>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_7_B383PQEd-NtftfyF3YZw" name="commandResult" visibility="private" type="_HLIlAnPGEd-bh5e9e7eOjw" isUnique="false"/>
                    <ownedOperation xmi:id="_7_B39HPQEd-NtftfyF3YZw" name="getAffectedFiles" visibility="public">
                      <ownedComment xmi:id="_7_B39XPQEd-NtftfyF3YZw">
                        <body>
	 * Returns the {@link IFile}s that may be modified when the operation is
	 * executed, undone or redone.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_B39nPQEd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_7_LB4XPQEd-NtftfyF3YZw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_7_LB4HPQEd-NtftfyF3YZw"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_LB4nPQEd-NtftfyF3YZw" name="getCommandResult" visibility="public">
                      <ownedParameter xmi:id="_7_LB43PQEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_LB5HPQEd-NtftfyF3YZw" name="setResult" visibility="protected" isLeaf="true">
                      <ownedComment xmi:id="_7_LB5XPQEd-NtftfyF3YZw">
                        <body>
	 * Sets the command result.
	 * 
	 * @param result
	 *            the new result for this command.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_LB5nPQEd-NtftfyF3YZw" name="result" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_Uy4HPQEd-NtftfyF3YZw" name="compose" visibility="public">
                      <ownedParameter xmi:id="_7_Uy4XPQEd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_7_Uy4nPQEd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_Uy43PQEd-NtftfyF3YZw" name="reduce" visibility="public">
                      <ownedParameter xmi:id="_7_Uy5HPQEd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_Uy5XPQEd-NtftfyF3YZw" name="execute" visibility="public">
                      <ownedComment xmi:id="_7_Uy5nPQEd-NtftfyF3YZw">
                        <body>
	 * Delegates to {@link #doExecuteWithResult(IProgressMonitor, IAdaptable)} and sets
	 * the command result.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_Uy53PQEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_7_Uy6HPQEd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_7_Uy6XPQEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_Uy6nPQEd-NtftfyF3YZw" name="doExecuteWithResult" visibility="protected" isAbstract="true">
                      <ownedComment xmi:id="_7_Uy63PQEd-NtftfyF3YZw">
                        <body>
	 * Performs the actual work of executing this command. Subclasses must
	 * implement this method to perform some operation.
	 * 
	 * @param progressMonitor
	 *            the progress monitor provided by the operation history. Must
	 *            never be &lt;code>null&lt;/code>.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return The result of executing this command. May be &lt;code>null&lt;/code>
	 *         if the execution status is OK, but there is no meaningful result
	 *         to be returned.
	 * 
	 * @throws ExecutionException
	 *             if, for some reason, I fail to complete the operation
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_ej4HPQEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_7_ej4XPQEd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_7_ej4nPQEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_ej43PQEd-NtftfyF3YZw" name="redo" visibility="public">
                      <ownedComment xmi:id="_7_ej5HPQEd-NtftfyF3YZw">
                        <body>
	 * Delegates to {@link #doRedoWithResult(IProgressMonitor, IAdaptable)} and sets the
	 * command result.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_ej5XPQEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_7_ej5nPQEd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_7_ej53PQEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_ej6HPQEd-NtftfyF3YZw" name="doRedoWithResult" visibility="protected" isAbstract="true">
                      <ownedComment xmi:id="_7_ej6XPQEd-NtftfyF3YZw">
                        <body>
	 * Performs the actual work of redoing this command. Subclasses must
	 * implement this method to perform the redo.
	 * 
	 * @param progressMonitor
	 *            the progress monitor provided by the operation history. Must
	 *            never be &lt;code>null&lt;/code>.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return The result of redoing this command. May be &lt;code>null&lt;/code>
	 *         if the execution status is OK, but there is no meaningful result
	 *         to be returned.
	 * 
	 * @throws ExecutionException
	 *             on failure to redo
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_ej6nPQEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_7_ej63PQEd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_7_ej7HPQEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_ej7XPQEd-NtftfyF3YZw" name="undo" visibility="public">
                      <ownedComment xmi:id="_7_ej7nPQEd-NtftfyF3YZw">
                        <body>
	 * Delegates to {@link #doUndoWithResult(IProgressMonitor, IAdaptable)} and sets the
	 * command result.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_ej73PQEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_7_ej8HPQEd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_7_ej8XPQEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_nt0HPQEd-NtftfyF3YZw" name="doUndoWithResult" visibility="protected" isAbstract="true">
                      <ownedComment xmi:id="_7_nt0XPQEd-NtftfyF3YZw">
                        <body>
	 * Performs the actual work of undoing this command. Subclasses must
	 * implement this method to perform the undo.
	 * 
	 * @param progressMonitor
	 *            the progress monitor provided by the operation history. Must
	 *            never be &lt;code>null&lt;/code>.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return The result of undoing this command. May be &lt;code>null&lt;/code>
	 *         if the execution status is OK, but there is no meaningful result
	 *         to be returned.
	 * 
	 * @throws ExecutionException
	 *             on failure to undo
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_nt0nPQEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_7_nt03PQEd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_7_nt1HPQEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_7_nt1XPQEd-NtftfyF3YZw" name="dispose" visibility="public"/>
                    <ownedOperation xmi:id="_7_nt1nPQEd-NtftfyF3YZw" name="internalSetResult" visibility="public">
                      <ownedComment xmi:id="_7_nt13PQEd-NtftfyF3YZw">
                        <body>
     * Internal method to set the command result.
     * 
     * @param result CommandResult to set
     * @deprecated internal API
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_7_nt2HPQEd-NtftfyF3YZw" name="result" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Realization" xmi:id="_7-bbBHPQEd-NtftfyF3YZw" name="AbstractCommand extends ICommand" supplier="_HK-0B3PGEd-bh5e9e7eOjw" client="_7-bbAHPQEd-NtftfyF3YZw"/>
                  <packagedElement xmi:type="uml:Realization" xmi:id="_7-bbDHPQEd-NtftfyF3YZw" name="AbstractCommand extends ICommandWithSettableResult" supplier="_7-bbC3PQEd-NtftfyF3YZw" client="_7-bbAHPQEd-NtftfyF3YZw"/>
                  <packagedElement xmi:type="uml:Class" xmi:id="_-YGLoHPREd-NtftfyF3YZw" name="CompositeCommand" clientDependency="_-YGLo3PREd-NtftfyF3YZw">
                    <ownedComment xmi:id="_-YGLoXPREd-NtftfyF3YZw">
                      <body>
 * An undoable command that is composed of child {@link IUndoableOperation}s
 * that are not known to modify EMF model resources, but can contain
 * model-affecting children. Execute, undo, redo and dispose result in execute,
 * undo, redo and dispose on each child operation. The operation provides a list
 * of {@link IFile}s that may be modified when the operation is executed,
 * undone or redone.
 * &lt;P>
 * The children are explicitly composed by a client before the composite is
 * executed. Children cannot be added or removed after the composite has been
 * executed.
 * &lt;P>
 * The undo contexts of the composite are a union of the undo contexts of its
 * children.
 * &lt;P>
 * If a child command returns a cancel or an error status during execution, undo
 * or redo, the remaining child commands are not processed and those that have
 * already been executed are rolled back.
 * 
 * @author ldamus
 </body>
                    </ownedComment>
                    <generalization xmi:id="_-YGLonPREd-NtftfyF3YZw" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_-YGLpHPREd-NtftfyF3YZw" name="children" visibility="private" isLeaf="true" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-YGLpnPREd-NtftfyF3YZw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-YGLpXPREd-NtftfyF3YZw"/>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_-YGLp3PREd-NtftfyF3YZw" name="executed" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_-ZlZYXPREd-NtftfyF3YZw" name="ChildIterator" visibility="private" clientDependency="_-ZlZY3PREd-NtftfyF3YZw">
                      <ownedComment xmi:id="_-ZlZYnPREd-NtftfyF3YZw">
                        <body>
     * Custom iterator implementation that maintains my undo contexts correctly
     * when elements are removed.
     * 
     * @author ldamus
     </body>
                      </ownedComment>
                      <ownedAttribute xmi:id="_-ZlZZHPREd-NtftfyF3YZw" name="last" visibility="protected" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false"/>
                      <ownedAttribute xmi:id="_-ZlZZXPREd-NtftfyF3YZw" name="iter" visibility="protected" isLeaf="true" type="_QJqLznOxEd-nKvj-XTCBkg" isUnique="false"/>
                      <ownedOperation xmi:id="_-ZlZZnPREd-NtftfyF3YZw" name="remove" visibility="public"/>
                      <ownedOperation xmi:id="_-ZlZZ3PREd-NtftfyF3YZw" name="next" visibility="public">
                        <ownedParameter xmi:id="_-ZlZaHPREd-NtftfyF3YZw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_-ZlZaXPREd-NtftfyF3YZw" name="hasNext" visibility="public">
                        <ownedParameter xmi:id="_-ZlZanPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_-ZvKYHPREd-NtftfyF3YZw" name="ChildListIterator" visibility="private" clientDependency="_-ZvKY3PREd-NtftfyF3YZw">
                      <ownedComment xmi:id="_-ZvKYXPREd-NtftfyF3YZw">
                        <body>
     * Custom list-iterator implementation that maintains my undo contexts
     * correctly, as well as uniqueness of the list contents.
     * 
     * @author ldamus
     </body>
                      </ownedComment>
                      <generalization xmi:id="_-ZvKYnPREd-NtftfyF3YZw" general="_-ZlZYXPREd-NtftfyF3YZw"/>
                      <ownedOperation xmi:id="_-ZvKZHPREd-NtftfyF3YZw" name="add" visibility="public">
                        <ownedParameter xmi:id="_-ZvKZXPREd-NtftfyF3YZw" name="o" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_-ZvKZnPREd-NtftfyF3YZw" name="set" visibility="public">
                        <ownedParameter xmi:id="_-ZvKZ3PREd-NtftfyF3YZw" name="o" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_-ZvKaHPREd-NtftfyF3YZw" name="previousIndex" visibility="public">
                        <ownedParameter xmi:id="_-ZvKaXPREd-NtftfyF3YZw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_-Z4UUHPREd-NtftfyF3YZw" name="nextIndex" visibility="public">
                        <ownedParameter xmi:id="_-Z4UUXPREd-NtftfyF3YZw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_-Z4UUnPREd-NtftfyF3YZw" name="previous" visibility="public">
                        <ownedParameter xmi:id="_-Z4UU3PREd-NtftfyF3YZw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_-Z4UVHPREd-NtftfyF3YZw" name="hasPrevious" visibility="public">
                        <ownedParameter xmi:id="_-Z4UVXPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <ownedOperation xmi:id="_-YGLqHPREd-NtftfyF3YZw" name="isEmpty" visibility="public" isLeaf="true">
                      <ownedComment xmi:id="_-YGLqXPREd-NtftfyF3YZw">
                        <body>
     * Answers whether or not this composite operation has children.
     * 
     * @return &lt;code>true&lt;/code> if the operation does not have children,
     *         &lt;code>false&lt;/code> otherwise.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YGLqnPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YGLq3PREd-NtftfyF3YZw" name="getChildren" visibility="protected">
                      <ownedComment xmi:id="_-YGLrHPREd-NtftfyF3YZw">
                        <body>
     * Obtains my nested operations. Note that the return result is mutable and
     * is identical to my child-operation storage, so subclasses should be
     * careful of adding or removing contents. This should ordinarily be done
     * only via the {@link #add(IUndoableOperation)} and
     * {@link #remove(IUndoableOperation)} methods because these maintain the
     * undo contexts (or, equivalently, using the iterators).
     * 
     * @return my list of children
     * 
     * @see #add(IUndoableOperation)
     * @see #remove(IUndoableOperation)
     * @see #iterator()
     * @see #listIterator(int)
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YGLrXPREd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-YPVkXPREd-NtftfyF3YZw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-YPVkHPREd-NtftfyF3YZw"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YPVknPREd-NtftfyF3YZw" name="size" visibility="public">
                      <ownedParameter xmi:id="_-YPVk3PREd-NtftfyF3YZw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YPVlHPREd-NtftfyF3YZw" name="add" visibility="public">
                      <ownedComment xmi:id="_-YPVlXPREd-NtftfyF3YZw">
                        <body>
     * Adds a child operation to me. This should only be done before I am
     * executed. Has no effect if I already contain this operation as a child.
     * 
     * @param operation
     *            a new child operation
     * 
     * @throws IllegalStateException
     *             if I have already been successfully executed
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YPVlnPREd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YPVl3PREd-NtftfyF3YZw" name="didAdd" visibility="private">
                      <ownedComment xmi:id="_-YPVmHPREd-NtftfyF3YZw">
                        <body>
     * Updates my undo contexts for the addition of a new child operation.
     * 
     * @param operation
     *            a new child operation
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YPVmXPREd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YPVmnPREd-NtftfyF3YZw" name="remove" visibility="public">
                      <ownedComment xmi:id="_-YPVm3PREd-NtftfyF3YZw">
                        <body>
     * Removes a child operation from me. This should only be done before I am
     * executed. Has no effect if I do not contain this operation as a child.
     * &lt;p>
     * &lt;b>Note&lt;/b> that I do not dispose an operation when it is removed from
     * me. Although this is specified in the contract of the
     * {@link ICompositeOperation} interface, this would not be correct, as I
     * did not create that operation.
     * &lt;/p>
     * 
     * @param operation
     *            a child operation to remove
     * 
     * @throws IllegalStateException
     *             if I have already been successfully executed
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YPVnHPREd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YPVnXPREd-NtftfyF3YZw" name="didRemove" visibility="private">
                      <ownedComment xmi:id="_-YPVnnPREd-NtftfyF3YZw">
                        <body>
     * Updates my undo contexts for the removal of a child operation.
     * 
     * @param operation
     *            the child operation that was removed
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YPVn3PREd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YPVoHPREd-NtftfyF3YZw" name="anyChildHasContext" visibility="private">
                      <ownedComment xmi:id="_-YPVoXPREd-NtftfyF3YZw">
                        <body>
     * Queries whether any of my children has the specified context.
     * 
     * @param ctx
     *            a context
     * 
     * @return &lt;code>false&lt;/code> if none of my children has the specified
     *         context; &lt;code>true&lt;/code>, otherwise
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YZGkHPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_-YZGkXPREd-NtftfyF3YZw" name="ctx" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YZGknPREd-NtftfyF3YZw" name="canExecute" visibility="public">
                      <ownedComment xmi:id="_-YZGk3PREd-NtftfyF3YZw">
                        <body>
     * I can execute if I am not empty and all of my children can execute.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YZGlHPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YZGlXPREd-NtftfyF3YZw" name="canRedo" visibility="public">
                      <ownedComment xmi:id="_-YZGlnPREd-NtftfyF3YZw">
                        <body>
     * I can redo if I am not empty and all my children can all be redone.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YZGl3PREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YZGmHPREd-NtftfyF3YZw" name="canUndo" visibility="public">
                      <ownedComment xmi:id="_-YZGmXPREd-NtftfyF3YZw">
                        <body>
     * I can undo if I am not empty and all my children can all be undone.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YZGmnPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YZGm3PREd-NtftfyF3YZw" name="dispose" visibility="public">
                      <ownedComment xmi:id="_-YZGnHPREd-NtftfyF3YZw">
                        <body>
     * Disposes of each of my children.
     </body>
                      </ownedComment>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YZGnXPREd-NtftfyF3YZw" name="compose" visibility="public" isLeaf="true">
                      <ownedComment xmi:id="_-YZGnnPREd-NtftfyF3YZw">
                        <body>
     * Adds &lt;code>command&lt;/code> to the list of commands with which this
     * composite is composed.
     * 
     * @param operation
     *            The command with which to compose this command.
     * @return &lt;code>this&lt;/code>.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YZGn3PREd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_-YZGoHPREd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YZGoXPREd-NtftfyF3YZw" name="compose" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_-YZGonPREd-NtftfyF3YZw">
                        <body>
	 * Appends a command onto a (possibly) existing composeite of commands.
	 * 
	 * @param command an existing command, which may be a composite, a single
	 *     command, or &lt;code>null&lt;/code>
	 * @param next a command to append to the composite (may also be
	 *     &lt;code>null&lt;/code>, which produces no effect)
	 * 
	 * @return the new composite, which is just &lt;code>next&lt;/code> if
	 *     &lt;code>command&lt;/code> was &lt;code>null&lt;/code>
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Yi3kHPREd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_-Yi3kXPREd-NtftfyF3YZw" name="command" type="_HK-0B3PGEd-bh5e9e7eOjw"/>
                      <ownedParameter xmi:id="_-Yi3knPREd-NtftfyF3YZw" name="next" type="_HK-0B3PGEd-bh5e9e7eOjw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Yi3k3PREd-NtftfyF3YZw" name="reduce" visibility="public">
                      <ownedComment xmi:id="_-Yi3lHPREd-NtftfyF3YZw">
                        <body>
	 * Returns the simplest form of this command that is equivalent. This is
	 * useful for removing unnecessary nesting of commands.
	 * &lt;P>
	 * If the composite has a single command, it returns the reduction of that
	 * single command. Otherwise, it returns itself.
	 * 
	 * @return the simplest form of this command that is equivalent
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Yi3lXPREd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Yi3lnPREd-NtftfyF3YZw" name="getReturnValues" visibility="protected">
                      <ownedComment xmi:id="_-Yi3l3PREd-NtftfyF3YZw">
                        <body>
	 * Returns a list containing all of the return values from
	 * &lt;code>ICommand&lt;/code> children.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Yi3mHPREd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-Yi3mnPREd-NtftfyF3YZw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-Yi3mXPREd-NtftfyF3YZw"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Yi3m3PREd-NtftfyF3YZw" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_-Yi3nHPREd-NtftfyF3YZw">
                        <body>
     * Implements the execution logic by sequential execution of my children.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YsBgHPREd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_-YsBgXPREd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_-YsBgnPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YsBg3PREd-NtftfyF3YZw" name="unwindFailedExecute" visibility="private">
                      <ownedComment xmi:id="_-YsBhHPREd-NtftfyF3YZw">
                        <body>
     * Undoes the previous operations in the iterator.
     * 
     * @param iter
     *            the execution iterator
     * @param info
     *            the execution info
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YsBhXPREd-NtftfyF3YZw" name="iter" type="_QJqLznOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_-YsBhnPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-YsBh3PREd-NtftfyF3YZw" name="doRedoWithResult" visibility="protected">
                      <ownedComment xmi:id="_-YsBiHPREd-NtftfyF3YZw">
                        <body>
     * I redo by asking my children to redo, in forward order.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-YsBiXPREd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_-YsBinPREd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_-YsBi3PREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Y1ygHPREd-NtftfyF3YZw" name="unwindFailedRedo" visibility="private">
                      <ownedComment xmi:id="_-Y1ygXPREd-NtftfyF3YZw">
                        <body>
     * Undoes the previous operations in the iterator.
     * 
     * @param iter
     *            the execution iterator
     * @param info
     *            the execution info
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Y1ygnPREd-NtftfyF3YZw" name="iter" type="_QJqLznOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_-Y1yg3PREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Y1yhHPREd-NtftfyF3YZw" name="doUndoWithResult" visibility="protected">
                      <ownedComment xmi:id="_-Y1yhXPREd-NtftfyF3YZw">
                        <body>
     * I undo by asking my children to undo, in reverse order.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Y1yhnPREd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_-Y1yh3PREd-NtftfyF3YZw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_-Y1yiHPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Y1yiXPREd-NtftfyF3YZw" name="unwindFailedUndo" visibility="private">
                      <ownedComment xmi:id="_-Y1yinPREd-NtftfyF3YZw">
                        <body>
     * Redoes the next operations in the iterator.
     * 
     * @param iter
     *            the execution iterator
     * @param info
     *            the execution info
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Y1yi3PREd-NtftfyF3YZw" name="iter" type="_QJqLznOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_-Y1yjHPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Y1yjXPREd-NtftfyF3YZw" name="aggregateStatuses" visibility="protected">
                      <ownedComment xmi:id="_-Y1yjnPREd-NtftfyF3YZw">
                        <body>
     * Creates a suitable aggregate from these statuses. If there are no
     * statuses to aggregate, then an OK status is returned. If there is a
     * single status to aggregate, then it is returned. Otherwise, a
     * multi-status is returned with the provided statuses as children.
     * 
     * @param statuses
     *            the statuses to aggregate. May have zero, one, or more
     *            elements (all must be {@link IStatus}es)
     * 
     * @return the multi-status
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Y-8cHPREd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_-Y-8cXPREd-NtftfyF3YZw" name="statuses" type="_QJNf43OxEd-nKvj-XTCBkg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-Y-8c3PREd-NtftfyF3YZw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-Y-8cnPREd-NtftfyF3YZw"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Y-8dHPREd-NtftfyF3YZw" name="isExecuted" visibility="protected" isLeaf="true">
                      <ownedComment xmi:id="_-Y-8dXPREd-NtftfyF3YZw">
                        <body>
     * Answers whether or not I have been executed.
     * 
     * @return &lt;code>true&lt;/code> if I have been executed, &lt;code>false&lt;/code>
     *         otherwise.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-Y-8dnPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Y-8d3PREd-NtftfyF3YZw" name="assertNotExecuted" visibility="protected" isLeaf="true">
                      <ownedComment xmi:id="_-Y-8eHPREd-NtftfyF3YZw">
                        <body>
     * Asserts that I have not yet been executed. Changes to my children are not
     * permitted after I have been executed.
     </body>
                      </ownedComment>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-ZItcHPREd-NtftfyF3YZw" name="getAffectedFiles" visibility="public">
                      <ownedComment xmi:id="_-ZItcXPREd-NtftfyF3YZw">
                        <body>
     * Returns a list containing all of the affected files from
     * &lt;code>ICommand&lt;/code> children.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-ZItcnPREd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-ZItdHPREd-NtftfyF3YZw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-ZItc3PREd-NtftfyF3YZw"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-ZItdXPREd-NtftfyF3YZw" name="iterator" visibility="public">
                      <ownedComment xmi:id="_-ZItdnPREd-NtftfyF3YZw">
                        <body>
     * Obtains an iterator to traverse my child operations. Removing children
     * via this iterator correctly maintains my undo contexts.
     * 
     * @return an iterator of my children
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-ZItd3PREd-NtftfyF3YZw" type="_QJqLynOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-ZIteHPREd-NtftfyF3YZw" name="listIterator" visibility="public">
                      <ownedComment xmi:id="_-ZIteXPREd-NtftfyF3YZw">
                        <body>
     * Obtains an iterator to traverse my child operations in either direction.
     * Adding and removing children via this iterator correctly maintains my
     * undo contexts.
     * &lt;p>
     * &lt;b>Note&lt;/b> that, unlike list iterators generally, this implementation
     * does not permit the addition of an operation that I already contain (the
     * composite does not permit duplicates). Moreover, only
     * {@link IUndoableOperation}s may be added, otherwise
     * &lt;code>ClassCastException&lt;/code>s will result.
     * &lt;/p>
     * 
     * @return an iterator of my children
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-ZItenPREd-NtftfyF3YZw" type="_QJqLznOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-ZboYHPREd-NtftfyF3YZw" name="listIterator" visibility="public">
                      <ownedComment xmi:id="_-ZboYXPREd-NtftfyF3YZw">
                        <body>
     * Obtains an iterator to traverse my child operations in either direction,
     * starting from the specified &lt;code>index&lt;/code>. Adding and removing
     * children via this iterator correctly maintains my undo contexts.
     * &lt;p>
     * &lt;b>Note&lt;/b> that, unlike list iterators generally, this implementation
     * does not permit the addition of an operation that I already contain (the
     * composite does not permit duplicates). Moreover, only
     * {@link IUndoableOperation}s may be added, otherwise
     * &lt;code>ClassCastException&lt;/code>s will result.
     * &lt;/p>
     * 
     * @param index
     *            the index in my children at which to start iterating
     * 
     * @return an iterator of my children
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_-ZboYnPREd-NtftfyF3YZw" type="_QJqLznOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_-ZlZYHPREd-NtftfyF3YZw" name="index" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_-Z4UVnPREd-NtftfyF3YZw" name="getCommandResult" visibility="public">
                      <ownedParameter xmi:id="_-Z4UV3PREd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Realization" xmi:id="_-YGLo3PREd-NtftfyF3YZw" name="CompositeCommand extends ICompositeCommand" supplier="_HLbf8HPGEd-bh5e9e7eOjw" client="_-YGLoHPREd-NtftfyF3YZw"/>
                  <packagedElement xmi:type="uml:Realization" xmi:id="_-ZlZY3PREd-NtftfyF3YZw" name="ChildIterator extends Iterator" supplier="_msnXLXO4Ed-nKvj-XTCBkg" client="_-ZlZYXPREd-NtftfyF3YZw"/>
                  <packagedElement xmi:type="uml:Realization" xmi:id="_-ZvKY3PREd-NtftfyF3YZw" name="ChildListIterator extends ListIterator" supplier="_mswhE3O4Ed-nKvj-XTCBkg" client="_-ZvKYHPREd-NtftfyF3YZw"/>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_mNECQXh3Ed-ECKyh8Dg6Wg" name="internal">
                  <packagedElement xmi:type="uml:Package" xmi:id="_mNNzQHh3Ed-ECKyh8Dg6Wg" name="command">
                    <packagedElement xmi:type="uml:Interface" xmi:id="_mNNzQXh3Ed-ECKyh8Dg6Wg" name="ICommandWithSettableResult"/>
                  </packagedElement>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_o_y9sHh5Ed-ECKyh8Dg6Wg" name="util">
                  <packagedElement xmi:type="uml:Class" xmi:id="_o_y9sXh5Ed-ECKyh8Dg6Wg" name="ObjectAdapter"/>
                </packagedElement>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_ioJ48Hc2Ed-96YWU42lBhw" name="ui">
                <packagedElement xmi:type="uml:Package" xmi:id="_ioJ48Xc2Ed-96YWU42lBhw" name="action">
                  <packagedElement xmi:type="uml:Class" xmi:id="_ioJ48nc2Ed-96YWU42lBhw" name="ActionManager"/>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_pzpcgHh5Ed-ECKyh8Dg6Wg" name="util">
                  <packagedElement xmi:type="uml:Interface" xmi:id="_pzpcgXh5Ed-ECKyh8Dg6Wg" name="ICustomData"/>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_p72WQHh5Ed-ECKyh8Dg6Wg" name="dialogs">
                  <packagedElement xmi:type="uml:Class" xmi:id="_p7_gMHh5Ed-ECKyh8Dg6Wg" name="PopupDialog"/>
                </packagedElement>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_huFo0HPSEd-NtftfyF3YZw" name="emf">
              <packagedElement xmi:type="uml:Package" xmi:id="_huFo0XPSEd-NtftfyF3YZw" name="commands">
                <packagedElement xmi:type="uml:Package" xmi:id="_huFo0nPSEd-NtftfyF3YZw" name="core">
                  <packagedElement xmi:type="uml:Package" xmi:id="_huFo03PSEd-NtftfyF3YZw" name="command">
                    <packagedElement xmi:type="uml:Class" xmi:id="_huFo1HPSEd-NtftfyF3YZw" name="AbstractTransactionalCommand" clientDependency="_huPZ1XPSEd-NtftfyF3YZw _huPZ1nPSEd-NtftfyF3YZw _mNguMHh3Ed-ECKyh8Dg6Wg" isAbstract="true">
                      <ownedComment xmi:id="_huPZ0HPSEd-NtftfyF3YZw">
                        <body>
 * An abstract superclass for GMF {@link IUndoableOperation}s that modify EMF
 * model resources.
 * &lt;p>
 * The operation provides a list of {@link IFile}s that are expected to be
 * modified when the operation is executed, undone or redone. An
 * {@link IOperationApprover} is registered with the
 * {@link OperationHistoryFactory#getOperationHistory()} to validate the
 * modification to these resources.
 * &lt;p>
 * Subclasses must return the command execution result in their implementation
 * of {@link #doExecuteWithResult(IProgressMonitor, IAdaptable)}.
 * &lt;p>
 * This class is meant to be extended by clients.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_mNECQHh3Ed-ECKyh8Dg6Wg" general="_5f8UdHPSEd-NtftfyF3YZw"/>
                      <ownedAttribute xmi:id="_huYjxXPSEd-NtftfyF3YZw" name="affectedFiles" visibility="private" isLeaf="true" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_huYjx3PSEd-NtftfyF3YZw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_huYjxnPSEd-NtftfyF3YZw"/>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_huYjyHPSEd-NtftfyF3YZw" name="commandResult" visibility="private" type="_HLIlAnPGEd-bh5e9e7eOjw" isUnique="false"/>
                      <ownedOperation xmi:id="_huPZ2XPSEd-NtftfyF3YZw" name="getWorkspaceFiles" visibility="protected" isStatic="true">
                        <ownedComment xmi:id="_huPZ2nPSEd-NtftfyF3YZw">
                          <body>
     * Convenience method to get a list of workspaces files associated with
     * &lt;code>eObject&lt;/code>.
     * 
     * @param eObject
     *            the model object, may be &lt;code>null&lt;/code>
     * @return the list of {@link IFile}s
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_huPZ23PSEd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_huPZ3XPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_huPZ3HPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                        <ownedParameter xmi:id="_huPZ3nPSEd-NtftfyF3YZw" name="eObject" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huPZ33PSEd-NtftfyF3YZw" name="getWorkspaceFiles" visibility="protected" isStatic="true">
                        <ownedComment xmi:id="_huPZ4HPSEd-NtftfyF3YZw">
                          <body>
     * Convenience method to get a list of workspaces files associated with
     * {@link EObject}s in &lt;code>eObject&lt;/code>.
     * 
     * @param eObjects
     *            the list of model object
     * @return the list of {@link IFile}s
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_huPZ4XPSEd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_huYjwXPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_huYjwHPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                        <ownedParameter xmi:id="_huYjwnPSEd-NtftfyF3YZw" name="eObjects" type="_QJNf43OxEd-nKvj-XTCBkg">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_huYjxHPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_huYjw3PSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huYjyXPSEd-NtftfyF3YZw" name="getAffectedFiles" visibility="public">
                        <ownedComment xmi:id="_huYjynPSEd-NtftfyF3YZw">
                          <body>
     * Returns the {@link IFile}s for resources that may be modified when the
     * operation is executed, undone or redone.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_huiUwHPSEd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_huiUwnPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_huiUwXPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huiUw3PSEd-NtftfyF3YZw" name="getCommandResult" visibility="public" isLeaf="true">
                        <ownedParameter xmi:id="_huiUxHPSEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huiUxXPSEd-NtftfyF3YZw" name="setResult" visibility="protected" isLeaf="true">
                        <ownedComment xmi:id="_huiUxnPSEd-NtftfyF3YZw">
                          <body>
     * Sets the command result.
     * 
     * @param result
     *            the new result for this command.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_huiUx3PSEd-NtftfyF3YZw" name="result" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huiUyHPSEd-NtftfyF3YZw" name="compose" visibility="public">
                        <ownedParameter xmi:id="_huiUyXPSEd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_huiUynPSEd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huiUy3PSEd-NtftfyF3YZw" name="reduce" visibility="public">
                        <ownedParameter xmi:id="_huiUzHPSEd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_huiUzXPSEd-NtftfyF3YZw" name="doExecuteWithResult" visibility="protected" isAbstract="true">
                        <ownedComment xmi:id="_huiUznPSEd-NtftfyF3YZw">
                          <body>
     * Implemented by subclasses to perform the model changes.  These changes
     * are applied by manipulation of the EMF metamodel's API, &lt;em>not&lt;/em>
     * by executing commands on the editing domain's command stack.
     * 
     * @param monitor the progress monitor provided by the operation history
     * @param info the adaptable provided by the operation history
     * 
     * @return the result of the execution
     * 
     * @throws ExecutionException if, for some reason, I fail to complete
     *     the operation
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_husFwHPSEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_husFwXPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_husFwnPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_husFxXPSEd-NtftfyF3YZw" name="didUndo" visibility="protected">
                        <ownedParameter xmi:id="_husFxnPSEd-NtftfyF3YZw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_husFx3PSEd-NtftfyF3YZw" name="didRedo" visibility="protected">
                        <ownedParameter xmi:id="_husFyHPSEd-NtftfyF3YZw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_husFyXPSEd-NtftfyF3YZw" name="doExecute" visibility="protected">
                        <ownedComment xmi:id="_husFynPSEd-NtftfyF3YZw">
                          <body>
     * Delegates to {@link #doExecuteWithResult(IProgressMonitor, IAdaptable)}
     * to perform the model changes. Sets the command result and calls
     * {@link #cleanup()} to give subclasses a chance to dispose of any objects
     * that were required for the execution but will not be required for undo or
     * redo.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_husFy3PSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_husFzHPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_hu1PsHPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hu1PsXPSEd-NtftfyF3YZw" name="doUndo" visibility="protected">
                        <ownedComment xmi:id="_hu1PsnPSEd-NtftfyF3YZw">
                          <body>
     * Overrides superclass to set the command result.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hu1Ps3PSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_hu1PtHPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_hu1PtXPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hu1PtnPSEd-NtftfyF3YZw" name="doRedo" visibility="protected">
                        <ownedComment xmi:id="_hu1Pt3PSEd-NtftfyF3YZw">
                          <body>
     * Overrides superclass to set the command result.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hu_AsHPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_hu_AsXPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_hu_AsnPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hu_As3PSEd-NtftfyF3YZw" name="aggregateStatuses" visibility="protected">
                        <ownedComment xmi:id="_hu_AtHPSEd-NtftfyF3YZw">
                          <body>
	 * Considers that the aggregate status may be different from the present
	 * status, and updates the command result accordingly.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hu_AtXPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_hu_AtnPSEd-NtftfyF3YZw" name="statuses" type="_QJNf43OxEd-nKvj-XTCBkg">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_hu_AuHPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_hu_At3PSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hu_AuXPSEd-NtftfyF3YZw" name="cleanup" visibility="protected">
                        <ownedComment xmi:id="_hu_AunPSEd-NtftfyF3YZw">
                          <body>
	 * Subclasses may implement this method to dispose of objects that were
	 * required for execution, but are no longer require to undo or redo this
	 * operation.
	 * &lt;P>
	 * This method is invoked at the end of
	 * {@link #doExecute(IProgressMonitor, IAdaptable)}.
	 </body>
                        </ownedComment>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hu_Au3PSEd-NtftfyF3YZw" name="internalSetResult" visibility="public">
                        <ownedComment xmi:id="_hu_AvHPSEd-NtftfyF3YZw">
                          <body>
     * Internal method to set the command result.
     * 
     * @param result CommandResult to set
     * @deprecated internal API
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hu_AvXPSEd-NtftfyF3YZw" name="result" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_huPZ1XPSEd-NtftfyF3YZw" name="AbstractTransactionalCommand extends ICommand" supplier="_HK-0B3PGEd-bh5e9e7eOjw" client="_huFo1HPSEd-NtftfyF3YZw"/>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_huPZ1nPSEd-NtftfyF3YZw" name="AbstractTransactionalCommand extends ICommandWithSettableResult" supplier="_7-bbC3PQEd-NtftfyF3YZw" client="_huFo1HPSEd-NtftfyF3YZw"/>
                    <packagedElement xmi:type="uml:Class" xmi:id="_hwLTgHPSEd-NtftfyF3YZw" name="CompositeTransactionalCommand" clientDependency="_hwLThHPSEd-NtftfyF3YZw _hwLThXPSEd-NtftfyF3YZw _mTeMQHh3Ed-ECKyh8Dg6Wg">
                      <ownedComment xmi:id="_hwLTgXPSEd-NtftfyF3YZw">
                        <body>
 * An undoable operation that is composed of child {@link IUndoableOperation}s
 * that are expected to modify EMF model resources.
 * &lt;p>
 * The operation provides a list of {@link IFile}s that are expected to be
 * modified when the operation is executed, undone or redone. An
 * {@link IOperationApprover} is registered with the
 * {@link OperationHistoryFactory#getOperationHistory()} to validate the
 * modification to these resources.
 * &lt;P>
 * This class is meant to be instantiated by clients.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_hwLTg3PSEd-NtftfyF3YZw" general="_hwLTgnPSEd-NtftfyF3YZw"/>
                      <ownedAttribute xmi:id="_hwLThnPSEd-NtftfyF3YZw" name="commandResult" visibility="private" type="_HLIlAnPGEd-bh5e9e7eOjw" isUnique="false"/>
                      <ownedOperation xmi:id="_hwLTh3PSEd-NtftfyF3YZw" name="getAffectedFiles" visibility="public">
                        <ownedComment xmi:id="_hwLTiHPSEd-NtftfyF3YZw">
                          <body>
     * Returns the {@link IFile}s for resources that may be modified when the
     * operation is executed, undone or redone.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwLTiXPSEd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_hwVEgXPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_hwVEgHPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwVEgnPSEd-NtftfyF3YZw" name="getCommandResult" visibility="public">
                        <ownedParameter xmi:id="_hwVEg3PSEd-NtftfyF3YZw" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwVEhHPSEd-NtftfyF3YZw" name="setResult" visibility="protected">
                        <ownedComment xmi:id="_hwVEhXPSEd-NtftfyF3YZw">
                          <body>
     * Sets the command result.
     * 
     * @param result
     *            the new result for this command.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwVEhnPSEd-NtftfyF3YZw" name="result" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwVEh3PSEd-NtftfyF3YZw" name="getReturnValues" visibility="protected">
                        <ownedComment xmi:id="_hwVEiHPSEd-NtftfyF3YZw">
                          <body>
     * Returns a list containing all of the return values from
     * &lt;code>ICommand&lt;/code> children.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwVEiXPSEd-NtftfyF3YZw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_hwVEi3PSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_hwVEinPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwVEjHPSEd-NtftfyF3YZw" name="aggregateStatuses" visibility="protected">
                        <ownedComment xmi:id="_hwVEjXPSEd-NtftfyF3YZw">
                          <body>
     * Overrides the superclass implementation to set the command result.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwVEjnPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_hweOcHPSEd-NtftfyF3YZw" name="statuses" type="_QJNf43OxEd-nKvj-XTCBkg">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_hweOcnPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_hweOcXPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hweOc3PSEd-NtftfyF3YZw" name="compose" visibility="public" isLeaf="true">
                        <ownedParameter xmi:id="_hweOdHPSEd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_hweOdXPSEd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hweOdnPSEd-NtftfyF3YZw" name="reduce" visibility="public">
                        <ownedComment xmi:id="_hweOd3PSEd-NtftfyF3YZw">
                          <body>
     * Returns the simplest form of this command that is equivalent. This is
     * useful for removing unnecessary nesting of commands.
     * &lt;P>
     * If the composite has a single command, it returns the reduction of that
     * single command. Otherwise, it returns itself.
     * 
     * @return the simplest form of this command that is equivalent
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hweOeHPSEd-NtftfyF3YZw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hweOeXPSEd-NtftfyF3YZw" name="doReduce" visibility="private">
                        <ownedParameter xmi:id="_hweOenPSEd-NtftfyF3YZw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_hwn_cHPSEd-NtftfyF3YZw" name="children" type="_QJNf43OxEd-nKvj-XTCBkg">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_hwn_cnPSEd-NtftfyF3YZw" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_hwn_cXPSEd-NtftfyF3YZw"/>
                        </ownedParameter>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwn_c3PSEd-NtftfyF3YZw" name="isEmpty" visibility="public" isLeaf="true">
                        <ownedComment xmi:id="_hwn_dHPSEd-NtftfyF3YZw">
                          <body>
     * Answers whether or not this composite operation has children.
     * 
     * @return &lt;code>true&lt;/code> if the operation does not have children,
     *         &lt;code>false&lt;/code> otherwise.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwn_dXPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwn_dnPSEd-NtftfyF3YZw" name="canExecute" visibility="public">
                        <ownedComment xmi:id="_hwn_d3PSEd-NtftfyF3YZw">
                          <body>
     * I can execute if I am not empty and all of my children can execute.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwn_eHPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwn_eXPSEd-NtftfyF3YZw" name="canRedo" visibility="public">
                        <ownedComment xmi:id="_hwn_enPSEd-NtftfyF3YZw">
                          <body>
     * I can redo if I am not empty and all my children can all be redone.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwn_e3PSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwn_fHPSEd-NtftfyF3YZw" name="canUndo" visibility="public">
                        <ownedComment xmi:id="_hwn_fXPSEd-NtftfyF3YZw">
                          <body>
     * I can undo if I am not empty and all my children can all be undone.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hwxJYHPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_hwxJYXPSEd-NtftfyF3YZw" name="internalSetResult" visibility="public">
                        <ownedComment xmi:id="_hwxJYnPSEd-NtftfyF3YZw">
                          <body>
     * Internal method to set the command result.
     * 
     * @param result CommandResult to set
     * @deprecated internal API
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_hw66YHPSEd-NtftfyF3YZw" name="result" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_hwLThHPSEd-NtftfyF3YZw" name="CompositeTransactionalCommand extends ICompositeCommand" supplier="_HLbf8HPGEd-bh5e9e7eOjw" client="_hwLTgHPSEd-NtftfyF3YZw"/>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_hwLThXPSEd-NtftfyF3YZw" name="CompositeTransactionalCommand extends ICommandWithSettableResult" supplier="_7-bbC3PQEd-NtftfyF3YZw" client="_hwLTgHPSEd-NtftfyF3YZw"/>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_mNguMHh3Ed-ECKyh8Dg6Wg" name="AbstractTransactionalCommand extends ICommandWithSettableResult" supplier="_mNNzQXh3Ed-ECKyh8Dg6Wg" client="_huFo1HPSEd-NtftfyF3YZw"/>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_mTeMQHh3Ed-ECKyh8Dg6Wg" name="CompositeTransactionalCommand extends ICommandWithSettableResult" supplier="_mNNzQXh3Ed-ECKyh8Dg6Wg" client="_hwLTgHPSEd-NtftfyF3YZw"/>
                    <packagedElement xmi:type="uml:Class" xmi:id="_mW56wHh3Ed-ECKyh8Dg6Wg" name="EditingDomainUndoContext" clientDependency="_mXDEsXh3Ed-ECKyh8Dg6Wg" isLeaf="true">
                      <ownedComment xmi:id="_mXDEsHh3Ed-ECKyh8Dg6Wg">
                        <body>
 * An {@link IUndoContext} that tags an EMF operation with the editing domain
 * that it affects. Two editing domain contexts match if and only if they
 * reference the same {@link EditingDomain} instance.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <ownedAttribute xmi:id="_mXM1sHh3Ed-ECKyh8Dg6Wg" name="editingDomain" visibility="private" isLeaf="true" type="_0zW0MHctEd-96YWU42lBhw" isUnique="false"/>
                      <ownedAttribute xmi:id="_mXfwoHh3Ed-ECKyh8Dg6Wg" name="label" visibility="private" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                      <ownedOperation xmi:id="_mXphoHh3Ed-ECKyh8Dg6Wg" name="getLabel" visibility="public">
                        <ownedParameter xmi:id="_mXphoXh3Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_mXyrkHh3Ed-ECKyh8Dg6Wg" name="matches" visibility="public">
                        <ownedComment xmi:id="_mXyrkXh3Ed-ECKyh8Dg6Wg">
                          <body>
     * I match another &lt;code>context&lt;/code> if it is a
     * &lt;code>EditingDomainUndoContext&lt;/code> representing the same editing
     * domain as I.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_mX8ckHh3Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_mYGNkHh3Ed-ECKyh8Dg6Wg" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_mYGNkXh3Ed-ECKyh8Dg6Wg" name="equals" visibility="public">
                        <ownedComment xmi:id="_mYGNknh3Ed-ECKyh8Dg6Wg">
                          <body>
     * I am equal to other &lt;code>EditingDomainUndoContext&lt;/code> on the same
     * editing domain as mine.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_mYPXgHh3Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_mYZIgHh3Ed-ECKyh8Dg6Wg" name="o" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_mYZIgXh3Ed-ECKyh8Dg6Wg" name="hashCode" visibility="public">
                        <ownedParameter xmi:id="_mYiScHh3Ed-ECKyh8Dg6Wg" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_mYiScXh3Ed-ECKyh8Dg6Wg" name="getEditingDomain" visibility="public" isLeaf="true">
                        <ownedComment xmi:id="_mYiScnh3Ed-ECKyh8Dg6Wg">
                          <body>
     * Obtains the editing domain.
     * 
     * @return my editing domain
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_mYsDcHh3Ed-ECKyh8Dg6Wg" type="_0zW0MHctEd-96YWU42lBhw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_mY10cHh3Ed-ECKyh8Dg6Wg" name="toString" visibility="public">
                        <ownedComment xmi:id="_mY10cXh3Ed-ECKyh8Dg6Wg">
                          <body>
     * The string representation of this operation.  Used for debugging purposes only.
     * This string should not be shown to an end user.
     * 
     * @return The string representation.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_mY--YHh3Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Realization" xmi:id="_mXDEsXh3Ed-ECKyh8Dg6Wg" name="EditingDomainUndoContext extends IUndoContext" supplier="_fXdLoXOxEd-nKvj-XTCBkg" client="_mW56wHh3Ed-ECKyh8Dg6Wg"/>
                  </packagedElement>
                </packagedElement>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_pAPpoHh5Ed-ECKyh8Dg6Wg" name="ui">
                <packagedElement xmi:type="uml:Package" xmi:id="_pAPpoXh5Ed-ECKyh8Dg6Wg" name="dialogs">
                  <packagedElement xmi:type="uml:Class" xmi:id="_pAYzkHh5Ed-ECKyh8Dg6Wg" name="AbstractSelectElementDialog"/>
                </packagedElement>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_qKTB8Hh5Ed-ECKyh8Dg6Wg" name="type">
                <packagedElement xmi:type="uml:Package" xmi:id="_qKTB8Xh5Ed-ECKyh8Dg6Wg" name="core">
                  <packagedElement xmi:type="uml:Interface" xmi:id="_qKcy8Hh5Ed-ECKyh8Dg6Wg" name="IElementType"/>
                  <packagedElement xmi:type="uml:Package" xmi:id="_dLS_cHh6Ed-ECKyh8Dg6Wg" name="commands">
                    <packagedElement xmi:type="uml:Class" xmi:id="_dLcJYHh6Ed-ECKyh8Dg6Wg" name="ConfigureElementCommand" isAbstract="true">
                      <ownedComment xmi:id="_dLcJYXh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Edit command to configure a new model element with the characteristics of its
 * element type.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dLvEUHh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_dL41UHh6Ed-ECKyh8Dg6Wg" name="elementType" visibility="private" isLeaf="true" type="_qKcy8Hh5Ed-ECKyh8Dg6Wg" isUnique="false">
                        <ownedComment xmi:id="_dMCmUHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The element type.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dMVhQHh6Ed-ECKyh8Dg6Wg" name="getElementType" visibility="public">
                        <ownedComment xmi:id="_dMVhQXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the element type.
	 * 
	 * @return the element type
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dMVhQnh6Ed-ECKyh8Dg6Wg" type="_qKcy8Hh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dLl6YHh6Ed-ECKyh8Dg6Wg" name="EditElementCommand" isAbstract="true">
                      <ownedComment xmi:id="_diFu0Hh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Abstract superclass for commands that modify model elements.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_diFu0Xh6Ed-ECKyh8Dg6Wg" general="_huFo1HPSEd-NtftfyF3YZw"/>
                      <ownedAttribute xmi:id="_diPf0Hh6Ed-ECKyh8Dg6Wg" name="elementToEdit" visibility="private" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_diiawHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The element to be modified.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_disLwXh6Ed-ECKyh8Dg6Wg" name="request" visibility="private" isLeaf="true" type="_disLwHh6Ed-ECKyh8Dg6Wg" isUnique="false">
                        <ownedComment xmi:id="_di1VsHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The edit request that carries the required command parameters.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_djI3sHh6Ed-ECKyh8Dg6Wg" name="eClass" visibility="private" type="_dSvrQHh6Ed-ECKyh8Dg6Wg" isUnique="false">
                        <ownedComment xmi:id="_djSBoHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The kind of model element that can be modified by this command.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_djbyoHh6Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="protected" isStatic="true">
                        <ownedParameter xmi:id="_djk8kHh6Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dj4ekHh6Ed-ECKyh8Dg6Wg" value="*"/>
                          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_djutkHh6Ed-ECKyh8Dg6Wg"/>
                        </ownedParameter>
                        <ownedParameter xmi:id="_dkBogHh6Ed-ECKyh8Dg6Wg" name="request" type="_disLwHh6Ed-ECKyh8Dg6Wg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dkBogXh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedComment xmi:id="_dkBognh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Checks that the element to be modified by this command is of the correct
	 * kind.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dkLZgHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dkVKgHh6Ed-ECKyh8Dg6Wg" name="getElementToEdit" visibility="protected">
                        <ownedComment xmi:id="_dkVKgXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the element to be modified by this command.
	 * 
	 * @return the element to be modified
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dkeUcHh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dkoFcHh6Ed-ECKyh8Dg6Wg" name="getEClassToEdit" visibility="protected">
                        <ownedParameter xmi:id="_dkoFcXh6Ed-ECKyh8Dg6Wg" type="_dSvrQHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dkxPYHh6Ed-ECKyh8Dg6Wg" name="setElementToEdit" visibility="protected">
                        <ownedComment xmi:id="_dkxPYXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Sets the element to be modified by this command.
	 * 
	 * @return the element to be modified
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dk7AYHh6Ed-ECKyh8Dg6Wg" name="element" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dlExYHh6Ed-ECKyh8Dg6Wg" name="getRequest" visibility="protected">
                        <ownedComment xmi:id="_dlExYXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the edit request.
	 * 
	 * @return the edit request
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dlN7UHh6Ed-ECKyh8Dg6Wg" type="_disLwHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dlXsUHh6Ed-ECKyh8Dg6Wg" name="getEClass" visibility="protected">
                        <ownedComment xmi:id="_dlXsUXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the kind of element that can be modified by this command.
	 * 
	 * @return the kind of element
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dlhdUHh6Ed-ECKyh8Dg6Wg" type="_dSvrQHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dlqnQHh6Ed-ECKyh8Dg6Wg" name="setEClass" visibility="protected">
                        <ownedComment xmi:id="_dlqnQXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Sets the kind of element that can be modified by this command.
	 * 
	 * @param eClass
	 *            the kind of element
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dlqnQnh6Ed-ECKyh8Dg6Wg" name="eClass" type="_dSvrQHh6Ed-ECKyh8Dg6Wg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dl0YQHh6Ed-ECKyh8Dg6Wg" name="isOK" visibility="protected">
                        <ownedComment xmi:id="_dl0YQXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Convenience method to check the status of &lt;code>commandRequest&lt;/code>.
	 * 
	 * @param commandResult
	 *            the command result to check
	 * @return &lt;code>true&lt;/code> if the result is OK, &lt;code>false&lt;/code>
	 *         otherwise.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dl9iMHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_dmHTMHh6Ed-ECKyh8Dg6Wg" name="commandResult" type="_HLIlAnPGEd-bh5e9e7eOjw"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dNFIIHh6Ed-ECKyh8Dg6Wg" name="ConfigureRelationshipCommand" isAbstract="true">
                      <ownedComment xmi:id="_dNO5IHh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Edit command to configure a new relationship element with the characteristics
 * of its element type.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dNO5IXh6Ed-ECKyh8Dg6Wg" general="_dLcJYHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedOperation xmi:id="_dNYDEHh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedParameter xmi:id="_dNh0EHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dPKy0Hh6Ed-ECKyh8Dg6Wg" name="CreateElementCommand">
                      <ownedComment xmi:id="_dPT8wHh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to create a new model element.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dPT8wXh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_dPdtwHh6Ed-ECKyh8Dg6Wg" name="newElement" visibility="private" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dPnewHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The newly created element.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dPwosHh6Ed-ECKyh8Dg6Wg" name="elementType" visibility="private" isLeaf="true" type="_qKcy8Hh5Ed-ECKyh8Dg6Wg" isUnique="false">
                        <ownedComment xmi:id="_dP6ZsHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The element type to be created.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dQNUoXh6Ed-ECKyh8Dg6Wg" name="containmentFeature" visibility="private" type="_dQNUoHh6Ed-ECKyh8Dg6Wg" isUnique="false">
                        <ownedComment xmi:id="_dQXFoHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The containment feature in which the new element will be created.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dQgPkHh6Ed-ECKyh8Dg6Wg" name="defaultElementCreationStatus" visibility="private" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false">
                        <ownedComment xmi:id="_dQqAkHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Status of the default element creation.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dQzxkHh6Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                        <ownedParameter xmi:id="_dQzxkXh6Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_dQ87gHh6Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_dRGsgHh6Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dRQdgHh6Ed-ECKyh8Dg6Wg" name="createConfigureRequest" visibility="protected">
                        <ownedComment xmi:id="_dRQdgXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Creates the request to configure the new element.
	 * 
	 * @return the request
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dRjYcHh6Ed-ECKyh8Dg6Wg" type="_dRZncXh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dRjYcXh6Ed-ECKyh8Dg6Wg" name="doDefaultElementCreation" visibility="protected">
                        <ownedComment xmi:id="_dRjYcnh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Subclasses should implement this to override the basic element creation.
	 * 
	 * @return the new model element that has been created
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dRsiYHh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dR2TYHh6Ed-ECKyh8Dg6Wg" name="getDefaultElementCreationStatus" visibility="protected">
                        <ownedComment xmi:id="_dR2TYXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the status of the default element creation.
	 * 
	 * @return the status
	 * @since 1.2
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dSAEYHh6Ed-ECKyh8Dg6Wg" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dSJOUHh6Ed-ECKyh8Dg6Wg" name="setDefaultElementCreationStatus" visibility="protected">
                        <ownedComment xmi:id="_dSJOUXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Sets the status of the default element creation.
	 * 
	 * @param status
	 *            the new status
	 * @since 1.2
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dSS_UHh6Ed-ECKyh8Dg6Wg" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dScwUHh6Ed-ECKyh8Dg6Wg" name="getElementToEdit" visibility="protected">
                        <ownedComment xmi:id="_dScwUXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Initializes the container of the new element by asking the create to
	 * create the container, if necessary.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dScwUnh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dSl6QHh6Ed-ECKyh8Dg6Wg" name="getEClassToEdit" visibility="protected">
                        <ownedComment xmi:id="_dSl6QXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the EClass of the element to be edited.
	 * 
	 * @return the EClass
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dS41MHh6Ed-ECKyh8Dg6Wg" type="_dSvrQHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dTCmMHh6Ed-ECKyh8Dg6Wg" name="getContainmentFeature" visibility="protected">
                        <ownedComment xmi:id="_dTCmMXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the containment feature for the new element.
	 * 
	 * @return the containment feature
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dTCmMnh6Ed-ECKyh8Dg6Wg" type="_dQNUoHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dTMXMHh6Ed-ECKyh8Dg6Wg" name="setContainmentFeature" visibility="protected">
                        <ownedComment xmi:id="_dTMXMXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Sets the containment feature for the new element.
	 * 
	 * @param containmentFeature
	 *            the containment feature for the new element
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dTVhIHh6Ed-ECKyh8Dg6Wg" name="containmentFeature" type="_dQNUoHh6Ed-ECKyh8Dg6Wg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dTfSIHh6Ed-ECKyh8Dg6Wg" name="getElementType" visibility="protected">
                        <ownedComment xmi:id="_dTfSIXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the element type for the new element.
	 * 
	 * @return the element type
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dTpDIHh6Ed-ECKyh8Dg6Wg" type="_qKcy8Hh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dTpDIXh6Ed-ECKyh8Dg6Wg" name="getCreateRequest" visibility="public">
                        <ownedComment xmi:id="_dTpDInh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the create request.
	 * 
	 * @return the create request
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dT7-EXh6Ed-ECKyh8Dg6Wg" type="_dT7-EHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dUO5AHh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedParameter xmi:id="_dUO5AXh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dUYqAHh6Ed-ECKyh8Dg6Wg" name="getNewElement" visibility="public">
                        <ownedComment xmi:id="_dUYqAXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the new element that was created by this command. Will be
	 * &lt;code>null&lt;/code> if the command has not been executed.
	 * 
	 * @return the new element
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dUhz8Hh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dVk80Hh6Ed-ECKyh8Dg6Wg" name="CreateRelationshipCommand">
                      <ownedComment xmi:id="_dVk80Xh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to create a new relationship element using the EMF action protocol.
 * &lt;P>
 * If the containment feature is not specified in the request, the first feature
 * in the container that can contain the new kind of relationship will be used.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dVk80nh6Ed-ECKyh8Dg6Wg" general="_dPKy0Hh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_dV33wHh6Ed-ECKyh8Dg6Wg" name="source" visibility="private" isLeaf="true" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dWBowHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The relationship source.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dWKysHh6Ed-ECKyh8Dg6Wg" name="target" visibility="private" isLeaf="true" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dWUjsHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The relationship target.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dWneoHh6Ed-ECKyh8Dg6Wg" name="getSource" visibility="public">
                        <ownedComment xmi:id="_dWneoXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the relationship source.
	 * 
	 * @return the relationship source
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dWneonh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dW6ZkHh6Ed-ECKyh8Dg6Wg" name="getTarget" visibility="public">
                        <ownedComment xmi:id="_dW6ZkXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the relationship target.
	 * 
	 * @return the relationship target
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dW6Zknh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dXEKkHh6Ed-ECKyh8Dg6Wg" name="createConfigureRequest" visibility="protected">
                        <ownedParameter xmi:id="_dXN7kHh6Ed-ECKyh8Dg6Wg" type="_dRZncXh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dXN7kXh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedParameter xmi:id="_dXXFgHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dX9icHh6Ed-ECKyh8Dg6Wg" name="DeferredSetValueCommand">
                      <ownedComment xmi:id="_dX9icXh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to set the value of a feature of a model element. The model element
 * is not known at the time of command construction. Subclasses can override
 * {@link #getElementToEdit()} to compute or find the elementToEdit.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dYGsYXh6Ed-ECKyh8Dg6Wg" general="_dYGsYHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedOperation xmi:id="_dYQdYHh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedComment xmi:id="_dYQdYXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Always executable when we can't get the elementToEdit.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dYaOYHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dYGsYHh6Ed-ECKyh8Dg6Wg" name="SetValueCommand">
                      <ownedComment xmi:id="_duKb8Hh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to set the value of a feature of a model element.
 * 
 * @author ldamus, mmostafa
 </body>
                      </ownedComment>
                      <generalization xmi:id="_duKb8Xh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_duTl4Hh6Ed-ECKyh8Dg6Wg" name="feature" visibility="private" isLeaf="true" type="_zsR3YHctEd-96YWU42lBhw" isUnique="false">
                        <ownedComment xmi:id="_dudW4Hh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The feature whose value should be set.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_duwR0Hh6Ed-ECKyh8Dg6Wg" name="value" visibility="private" isLeaf="true" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false">
                        <ownedComment xmi:id="_du6C0Hh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The new value.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dvDz0Hh6Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                        <ownedParameter xmi:id="_dvM9wHh6Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_dvWuwHh6Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_dvf4sHh6Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dvf4sXh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedComment xmi:id="_dvf4snh6Ed-ECKyh8Dg6Wg">
                          <body>
     * Checks that the feature is a modifiable feature of the element whose
     * value will be set by this command. Also checks that the new value is of
     * the correct type for the feature.
     </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dvppsHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dvzasHh6Ed-ECKyh8Dg6Wg" name="verifyMany" visibility="private">
                        <ownedParameter xmi:id="_dv8koHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dapDAHh6Ed-ECKyh8Dg6Wg" name="DestroyElementCommand">
                      <ownedComment xmi:id="_day0AHh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to create a model element using the EMF action protocol.
 * 
 * @author ldamus
 * @author Christian W. Damus (cdamus)
 </body>
                      </ownedComment>
                      <generalization xmi:id="_day0AXh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_da798Hh6Ed-ECKyh8Dg6Wg" name="elementToDestroy" visibility="private" isLeaf="true" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dbFu8Hh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The element to be destroyed.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dbYp4Hh6Ed-ECKyh8Dg6Wg" name="destroy" visibility="public" isStatic="true">
                        <ownedComment xmi:id="_dbYp4Xh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Convenience method for destroying the specified object by executing a
	 * &lt;code>DestroyElementCommand&lt;/code> on it, if it is attached to a
	 * resource.  Detached elements cannot be destroyed.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that the command will not be executed on the operation
	 * history.
	 * &lt;/b>
	 * 
	 * @param eObject an element to destroy
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dbia4Hh6Ed-ECKyh8Dg6Wg" name="eObject" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dbrk0Hh6Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                        <ownedParameter xmi:id="_db1V0Hh6Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_db1V0Xh6Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_db_G0Hh6Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dcIQwHh6Ed-ECKyh8Dg6Wg" name="tearDownIncomingReferences" visibility="protected">
                        <ownedComment xmi:id="_dcIQwXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Tears down references to the object that we are destroying, from all other
	 * objects in the resource set.
	 * 
	 * @param destructee the object being destroyed
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dcSBwHh6Ed-ECKyh8Dg6Wg" name="destructee" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dcbLsHh6Ed-ECKyh8Dg6Wg" name="tearDownOutgoingReferences" visibility="protected">
                        <ownedComment xmi:id="_dcbLsXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Tears down outgoing unidirectional references from the object being
	 * destroyed to all other elements in the resource set.  This is required
	 * so that reverse-reference queries will not find the destroyed object.
	 * 
	 * @param destructee the object being destroyed
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dck8sHh6Ed-ECKyh8Dg6Wg" name="destructee" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dcutsHh6Ed-ECKyh8Dg6Wg" name="getElementToDestroy" visibility="protected">
                        <ownedComment xmi:id="_dcutsXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the element to be destroyed.
	 * @return the element to be destroyed
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dc33oHh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dc33oXh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedParameter xmi:id="_ddBooHh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_deN7cHh6Ed-ECKyh8Dg6Wg" name="DestroyReferenceCommand">
                      <ownedComment xmi:id="_deN7cXh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to destroy a reference from one element to another.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_deXscHh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_deg2YHh6Ed-ECKyh8Dg6Wg" name="container" visibility="private" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_deqnYHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The element that contains the reference.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dezxUHh6Ed-ECKyh8Dg6Wg" name="containingFeature" visibility="private" type="_dQNUoHh6Ed-ECKyh8Dg6Wg" isUnique="false">
                        <ownedComment xmi:id="_de9iUHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The feature in the &lt;code>container&lt;/code> that contains the reference.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dfHTUHh6Ed-ECKyh8Dg6Wg" name="referencedObject" visibility="private" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dfaOQHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The referenced object.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dfj_QHh6Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                        <ownedParameter xmi:id="_dfj_QXh6Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_dftJMHh6Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_df26MHh6Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dgAEIHh6Ed-ECKyh8Dg6Wg" name="getContainer" visibility="protected">
                        <ownedComment xmi:id="_dgAEIXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets element that contains the reference.
	 * 
	 * @return the element that contains the reference
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dgAEInh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dgJ1IHh6Ed-ECKyh8Dg6Wg" name="getContainingFeature" visibility="protected">
                        <ownedComment xmi:id="_dgJ1IXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the feature in the &lt;code>container&lt;/code> that contains the
	 * reference.
	 * 
	 * @return the feature in the &lt;code>container&lt;/code> that contains the
	 *         reference.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dgcwEHh6Ed-ECKyh8Dg6Wg" type="_dQNUoHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dgcwEXh6Ed-ECKyh8Dg6Wg" name="getReferencedObject" visibility="protected">
                        <ownedComment xmi:id="_dgcwEnh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the referenced object.
	 * 
	 * @return the referenced object.
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dgmhEHh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dgwSEHh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedParameter xmi:id="_dgwSEXh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dm26EHh6Ed-ECKyh8Dg6Wg" name="GetEditContextCommand">
                      <ownedComment xmi:id="_dnArEHh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to get the edit context for a given request.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dnArEXh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_dnTmAHh6Ed-ECKyh8Dg6Wg" name="editContext" visibility="private" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false">
                        <ownedComment xmi:id="_dndXAHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The edit context.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_dnmg8Hh6Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                        <ownedParameter xmi:id="_dnmg8Xh6Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_dn6C8Hh6Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_dn6C8Xh6Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_doM94Hh6Ed-ECKyh8Dg6Wg" name="getEditContext" visibility="public">
                        <ownedComment xmi:id="_doM94Xh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the edit context.
	 * 
	 * @return the edit context
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_doM94nh6Ed-ECKyh8Dg6Wg" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_doWH0Hh6Ed-ECKyh8Dg6Wg" name="setEditContext" visibility="public">
                        <ownedComment xmi:id="_doWH0Xh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Sets the edit context.
	 * 
	 * @param editContext
	 *            the edit context
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dof40Hh6Ed-ECKyh8Dg6Wg" name="editContext" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                    </packagedElement>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dqI3kHh6Ed-ECKyh8Dg6Wg" name="MoveElementsCommand">
                      <ownedComment xmi:id="_dqI3kXh6Ed-ECKyh8Dg6Wg">
                        <body>
 * Command to move model elements using the EMF action protocol.
 * &lt;P>
 * If the target features are not specified in the request, and the features
 * fomerly containing the moved elements exists in the target element, they will
 * be used.
 * 
 * @author ldamus
 </body>
                      </ownedComment>
                      <generalization xmi:id="_dqSokHh6Ed-ECKyh8Dg6Wg" general="_dLl6YHh6Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_dqSokXh6Ed-ECKyh8Dg6Wg" name="elementsToMove" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dqljgHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The map of &lt;code>EObject&lt;/code>s to be moved. Keyed on
	 * &lt;code>EObject&lt;/code>. Each value is the &lt;code>EReference&lt;/code>
	 * feature in the target element into which the element should be moved.
	 * &lt;P>
	 * If the feature is not specified for a given element, then a default
	 * feature is found in the target.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedAttribute xmi:id="_dqutcHh6Ed-ECKyh8Dg6Wg" name="targetContainer" visibility="private" isLeaf="true" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                        <ownedComment xmi:id="_dq4ecHh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * The target container into which the element will be moved.
	 </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_drLZYHh6Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                        <ownedParameter xmi:id="_drLZYXh6Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                        <ownedParameter xmi:id="_drVKYHh6Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                        <ownedParameter xmi:id="_dre7YHh6Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_droFUHh6Ed-ECKyh8Dg6Wg" name="getTargetFeature" visibility="protected">
                        <ownedComment xmi:id="_droFUXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the feature in the target element that should contain
	 * &lt;code>element&lt;/code> after it is moved.
	 * &lt;P>
	 * Looks for the feature first in the elements map. If none is specified,
	 * tries to use the same feature that contained the element in its old
	 * location. If the old containment feature doesn't exist in the new target,
	 * uses the MSL utility to find the first feature in the target that can
	 * contain the element being moved.
	 * 
	 * @param element
	 *            the element to be moved
	 * @return the feature that will contain the element in the target
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_drx2UHh6Ed-ECKyh8Dg6Wg" type="_dQNUoHh6Ed-ECKyh8Dg6Wg" direction="return"/>
                        <ownedParameter xmi:id="_dr7AQHh6Ed-ECKyh8Dg6Wg" name="element" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dr7AQXh6Ed-ECKyh8Dg6Wg" name="getTargetContainer" visibility="protected">
                        <ownedComment xmi:id="_dr7AQnh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the target container.
	 * 
	 * @return the target container
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dsExQHh6Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dsOiQHh6Ed-ECKyh8Dg6Wg" name="getElementsToMove" visibility="protected">
                        <ownedComment xmi:id="_dsOiQXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Gets the map of elements to be moved. Each entry in the map consists of
	 * an &lt;code>EObject&lt;/code> key, which is the element to be moved to the
	 * new target, and an &lt;code>EReference&lt;/code> value, which is the feature
	 * in the new target that should contain the moved element.
	 * 
	 * @return the map of elements to be moved
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dsXsMHh6Ed-ECKyh8Dg6Wg" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_dshdMHh6Ed-ECKyh8Dg6Wg" name="setTargetFeature" visibility="protected">
                        <ownedComment xmi:id="_dshdMXh6Ed-ECKyh8Dg6Wg">
                          <body>
	 * Sets the reference feature into which an element should be moved.
	 * 
	 * @param element
	 *            the element to be moved
	 * @param targetFeature
	 *            the target feature
	 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dsrOMHh6Ed-ECKyh8Dg6Wg" name="element" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                        <ownedParameter xmi:id="_ds0YIHh6Ed-ECKyh8Dg6Wg" name="targetFeature" type="_dQNUoHh6Ed-ECKyh8Dg6Wg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_ds-JIHh6Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                        <ownedParameter xmi:id="_ds-JIXh6Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </packagedElement>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Package" xmi:id="_dRZncHh6Ed-ECKyh8Dg6Wg" name="requests">
                    <packagedElement xmi:type="uml:Class" xmi:id="_dRZncXh6Ed-ECKyh8Dg6Wg" name="ConfigureRequest"/>
                    <packagedElement xmi:type="uml:Class" xmi:id="_dT7-EHh6Ed-ECKyh8Dg6Wg" name="CreateElementRequest"/>
                    <packagedElement xmi:type="uml:Interface" xmi:id="_disLwHh6Ed-ECKyh8Dg6Wg" name="IEditCommandRequest"/>
                  </packagedElement>
                </packagedElement>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_dZeNkHc2Ed-96YWU42lBhw" name="diagram">
              <packagedElement xmi:type="uml:Package" xmi:id="_dZn-kHc2Ed-96YWU42lBhw" name="ui">
                <packagedElement xmi:type="uml:Package" xmi:id="_dZn-kXc2Ed-96YWU42lBhw" name="parts">
                  <packagedElement xmi:type="uml:Class" xmi:id="_dZn-knc2Ed-96YWU42lBhw" name="DiagramCommandStack">
                    <ownedComment xmi:id="_dZxvkHc2Ed-96YWU42lBhw">
                      <body>
 * GEF command stack that delegates to an {@link IOperationHistory}.
 * 
 * @author sshaw
 * @author Tauseef A, Israr
 * @author ldamus
 </body>
                    </ownedComment>
                    <generalization xmi:id="_daEqgXc2Ed-96YWU42lBhw" general="_daEqgHc2Ed-96YWU42lBhw"/>
                    <ownedAttribute xmi:id="_daEqgnc2Ed-96YWU42lBhw" name="stackToManager" visibility="private" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                    <ownedAttribute xmi:id="_daXlcXc2Ed-96YWU42lBhw" name="editDomain" visibility="private" type="_daXlcHc2Ed-96YWU42lBhw" isUnique="false"/>
                    <ownedAttribute xmi:id="_daqgYHc2Ed-96YWU42lBhw" name="cmdRecent" visibility="private" type="_dahWcHc2Ed-96YWU42lBhw" isUnique="false"/>
                    <ownedAttribute xmi:id="_da0RYHc2Ed-96YWU42lBhw" name="delegate" visibility="private" type="_VGoR0HcvEd-96YWU42lBhw" isUnique="false" association="_QN6toXe3Ed-j1aWhDOGgOg"/>
                    <ownedAttribute xmi:id="_da-CYHc2Ed-96YWU42lBhw" name="undoContext" visibility="private" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false"/>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_dbHMUHc2Ed-96YWU42lBhw" name="HistoryEventObject" visibility="private" isLeaf="true">
                      <generalization xmi:id="_dbQ9UHc2Ed-96YWU42lBhw" general="_vsyDUncqEd-96YWU42lBhw"/>
                      <ownedAttribute xmi:id="_dbQ9UXc2Ed-96YWU42lBhw" name="event" visibility="private" isLeaf="true" type="_Omw18XcwEd-96YWU42lBhw" isUnique="false"/>
                      <ownedOperation xmi:id="_dbj4QHc2Ed-96YWU42lBhw" name="getOperationHistoryEvent" visibility="public">
                        <ownedComment xmi:id="_dbj4QXc2Ed-96YWU42lBhw">
                          <body>
         * Gets my operation history event.
         * 
         * @return my operation history event.
         </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_dbj4Qnc2Ed-96YWU42lBhw" type="_Omw18XcwEd-96YWU42lBhw" direction="return"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <ownedOperation xmi:id="_db2zMHc2Ed-96YWU42lBhw" name="addCommandStackListener" visibility="public">
                      <ownedComment xmi:id="_db2zMXc2Ed-96YWU42lBhw">
                        <body>
     * Adds a listener to this CommandStack.
     * 
     * @param listener
     *            The Object listening to this CommandStack.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_db2zMnc2Ed-96YWU42lBhw" name="listener" type="_weCDoHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dcAkMHc2Ed-96YWU42lBhw" name="canRedo" visibility="public">
                      <ownedComment xmi:id="_dcAkMXc2Ed-96YWU42lBhw">
                        <body>
     * Returns &lt;code>true&lt;/code> if there is a Command to redo.
     * 
     * @return &lt;code>true&lt;/code> if there is a Command to redo.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dcAkMnc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dcKVMHc2Ed-96YWU42lBhw" name="canUndo" visibility="public">
                      <ownedComment xmi:id="_dcKVMXc2Ed-96YWU42lBhw">
                        <body>
     * Returns &lt;code>true&lt;/code> if the last Command executed can be undone.
     * 
     * @return &lt;code>true&lt;/code> if the last Command executed can be undone.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dcTfIHc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dcTfIXc2Ed-96YWU42lBhw" name="execute" visibility="public">
                      <ownedComment xmi:id="_dcTfInc2Ed-96YWU42lBhw">
                        <body>
     * Executes the given Command if it can execute.
     * 
     * @param command
     *            The Command to execute.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dcdQIHc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dc58EHc2Ed-96YWU42lBhw" name="execute" visibility="public">
                      <ownedComment xmi:id="_dc58EXc2Ed-96YWU42lBhw">
                        <body>
     * Executes the given Command if it can execute.
     * 
     * @param command
     *            The Command to execute.
     * @param progressMonitor
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_ddWoAHc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                      <ownedParameter xmi:id="_ddWoAXc2Ed-96YWU42lBhw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ddfx8Hc2Ed-96YWU42lBhw" name="execute" visibility="protected">
                      <ownedComment xmi:id="_ddfx8Xc2Ed-96YWU42lBhw">
                        <body>
     * exectus a the supplied command
     * 
     * @param command
     *            the command to execute
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_ddpi8Hc2Ed-96YWU42lBhw" name="command" type="_HK-0B3PGEd-bh5e9e7eOjw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_deGO4Hc2Ed-96YWU42lBhw" name="execute" visibility="protected">
                      <ownedComment xmi:id="_deGO4Xc2Ed-96YWU42lBhw">
                        <body>
     * executes the supplied command
     * 
     * @param command
     *            the command to exectue
     * @param progressMonitor
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_deGO4nc2Ed-96YWU42lBhw" name="command" type="_HK-0B3PGEd-bh5e9e7eOjw"/>
                      <ownedParameter xmi:id="_dePY0Hc2Ed-96YWU42lBhw" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dePY0Xc2Ed-96YWU42lBhw" name="getICommand" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_dePY0nc2Ed-96YWU42lBhw">
                        <body>
     * Converts a GEF {@link Command} into a GMF {@link ICommand}
     * 
     * @param command
     *            the GEF command
     * @return the GMF command
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_deZJ0Hc2Ed-96YWU42lBhw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_dei60Hc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dei60Xc2Ed-96YWU42lBhw" name="getICommand" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_dei60nc2Ed-96YWU42lBhw">
                        <body>
     * Removes redundancies from &lt;code>command&lt;/code> by stripping out layers
     * of command wrappers used to accomodate the use of GEF commands on an
     * {@link IOperationHistory} and {@link ICommand}s on the GEF
     * {@link CommandStack}.
     * 
     * @param command
     *            the command to be processed
     * @return a command representing the simplified form of the input command.
     *         May be a new command.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_desEwHc2Ed-96YWU42lBhw" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_de11wHc2Ed-96YWU42lBhw" name="command" type="_HK-0B3PGEd-bh5e9e7eOjw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_de_mwHc2Ed-96YWU42lBhw" name="getMostRecentCommand" visibility="public">
                      <ownedComment xmi:id="_de_mwXc2Ed-96YWU42lBhw">
                        <body>
     * Returns the most recently executed command.
     * 
     * @return The most recently executed command.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_de_mwnc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dfIwsHc2Ed-96YWU42lBhw" name="getRedoCommand" visibility="public">
                      <ownedComment xmi:id="_dfIwsXc2Ed-96YWU42lBhw">
                        <body>
     * getRedoCommand Returns the command at the top of the redo stack.
     * 
     * @see org.eclipse.gef.commands.CommandStack#getRedoCommand()
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dfShsHc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dfShsXc2Ed-96YWU42lBhw" name="getUndoCommand" visibility="public">
                      <ownedComment xmi:id="_dfShsnc2Ed-96YWU42lBhw">
                        <body>
     * getUndoCommand() Returns the next command to be undone.
     * 
     * @see org.eclipse.gef.commands.CommandStack#getUndoCommand()
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dfbroHc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dfbroXc2Ed-96YWU42lBhw" name="redo" visibility="public">
                      <ownedComment xmi:id="_dfbronc2Ed-96YWU42lBhw">
                        <body>
     * Executes the last undone Command.
     </body>
                      </ownedComment>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dflcoHc2Ed-96YWU42lBhw" name="removeCommandStackListener" visibility="public">
                      <ownedComment xmi:id="_dflcoXc2Ed-96YWU42lBhw">
                        <body>
     * Removes the given CommandStackListener.
     * 
     * @param listener
     *            The object to be removed from the list of listeners.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dfvNoHc2Ed-96YWU42lBhw" name="listener" type="_weCDoHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dfvNoXc2Ed-96YWU42lBhw" name="undo" visibility="public">
                      <ownedComment xmi:id="_dfvNonc2Ed-96YWU42lBhw">
                        <body>
     * Undoes the last executed Command.
     </body>
                      </ownedComment>
                    </ownedOperation>
                    <ownedOperation xmi:id="_df4XkHc2Ed-96YWU42lBhw" name="getDiagramEditDomain" visibility="protected">
                      <ownedComment xmi:id="_df4XkXc2Ed-96YWU42lBhw">
                        <body>
     * Returns the editDomain.
     * 
     * @return IDiagramEditDomain
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_df4Xknc2Ed-96YWU42lBhw" type="_daXlcHc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dgCIkHc2Ed-96YWU42lBhw" name="getOperationHistory" visibility="protected">
                      <ownedComment xmi:id="_dgCIkXc2Ed-96YWU42lBhw">
                        <body>
     * Gets my operation history delegate.
     * 
     * @return my operation history delegate
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dgL5kHc2Ed-96YWU42lBhw" type="_VGoR0HcvEd-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dgL5kXc2Ed-96YWU42lBhw" name="setOperationHistory" visibility="public">
                      <ownedComment xmi:id="_dgL5knc2Ed-96YWU42lBhw">
                        <body>
     * Sets my operation history delegate.
     * 
     * @param operationHistory
     *            my operation history delegate
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dgVDgHc2Ed-96YWU42lBhw" name="operationHistory" type="_VGoR0HcvEd-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dge0gHc2Ed-96YWU42lBhw" name="getReturnValues" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_dge0gXc2Ed-96YWU42lBhw">
                        <body>
     * Gets the return values of the given executed command
     * 
     * @param c
     *            The command
     * @return A collection of values returned by the given command
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dgn-cHc2Ed-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dgxvcHc2Ed-96YWU42lBhw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_dgn-cXc2Ed-96YWU42lBhw"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_dg7gcHc2Ed-96YWU42lBhw" name="c" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dhEqYHc2Ed-96YWU42lBhw" name="getReturnValues" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_dhEqYXc2Ed-96YWU42lBhw">
                        <body>
     * gets the return the values for the supplied command.
     * 
     * @param cmd
     *            command to use
     * @return a collection of return values
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dhObYHc2Ed-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dhYMYHc2Ed-96YWU42lBhw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_dhObYXc2Ed-96YWU42lBhw"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_dhYMYXc2Ed-96YWU42lBhw" name="cmd" type="_2fWrcHe7Ed-C3vabgS4Hag"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dhrHUHc2Ed-96YWU42lBhw" name="getReturnValues" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_dhrHUXc2Ed-96YWU42lBhw">
                        <body>
     * gets the return the values for the supplied command.
     * @param cmd command to use
     * @return a collection of return values
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_dh0RQHc2Ed-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dh-CQHc2Ed-96YWU42lBhw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_dh0RQXc2Ed-96YWU42lBhw"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_dh-CQXc2Ed-96YWU42lBhw" name="cmd" type="_dhhWUHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_diHzQHc2Ed-96YWU42lBhw" name="getReturnValues" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_diHzQXc2Ed-96YWU42lBhw">
                        <body>
     * gets the return the values for the supplied command.
     * 
     * @param cmd
     *            command to use
     * @return a collection of return values
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_diQ9MHc2Ed-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_diauMHc2Ed-96YWU42lBhw" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_diQ9MXc2Ed-96YWU42lBhw"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_dikfMHc2Ed-96YWU42lBhw" name="cmd" type="_HK-0B3PGEd-bh5e9e7eOjw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_dikfMXc2Ed-96YWU42lBhw" name="getUndoContext" visibility="public">
                      <ownedComment xmi:id="_dikfMnc2Ed-96YWU42lBhw">
                        <body>
     * Gets my undo context. I add my context to all commands executed through
     * me.
     * 
     * @return my undo context
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_ditpIHc2Ed-96YWU42lBhw" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_di3aIHc2Ed-96YWU42lBhw" name="setUndoContext" visibility="public">
                      <ownedComment xmi:id="_di3aIXc2Ed-96YWU42lBhw">
                        <body>
     * Sets my undo context.
     * 
     * @param undoContext
     *            my undo context
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_di3aInc2Ed-96YWU42lBhw" name="undoContext" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_djAkEHc2Ed-96YWU42lBhw" name="dispose" visibility="public"/>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Interface" xmi:id="_daXlcHc2Ed-96YWU42lBhw" name="IDiagramEditDomain">
                    <ownedComment xmi:id="_intNAHc2Ed-96YWU42lBhw">
                      <body>
 * Diagram Edit Domain Interface 
 * @author melaasar
 *
 </body>
                    </ownedComment>
                    <ownedOperation xmi:id="_in2-AHc2Ed-96YWU42lBhw" name="getDiagramCommandStack" visibility="public">
                      <ownedComment xmi:id="_in2-AXc2Ed-96YWU42lBhw">
                        <body>
	 * Returns the DiagramCommandStack to be used with ICommands.
	 * @return The command stack for this edit domain.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_in2-Anc2Ed-96YWU42lBhw" type="_dZn-knc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ioAvAHc2Ed-96YWU42lBhw" name="getActionManager" visibility="public">
                      <ownedComment xmi:id="_ioAvAXc2Ed-96YWU42lBhw">
                        <body>
	 * Returns the ActionManager 
	 * @return the Action Manager
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_ioTp8Hc2Ed-96YWU42lBhw" type="_ioJ48nc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Association" xmi:id="_QN6toXe3Ed-j1aWhDOGgOg" name="DiagramCommandStack_diagramcommandstack_delegate" memberEnd="_QN6tone3Ed-j1aWhDOGgOg _da0RYHc2Ed-96YWU42lBhw">
                    <ownedEnd xmi:id="_QN6tone3Ed-j1aWhDOGgOg" name="diagramcommandstack" type="_dZn-knc2Ed-96YWU42lBhw" isUnique="false" association="_QN6toXe3Ed-j1aWhDOGgOg">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_QN6to3e3Ed-j1aWhDOGgOg" value="1"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_QN6tpHe3Ed-j1aWhDOGgOg"/>
                    </ownedEnd>
                  </packagedElement>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_dg7gcXc2Ed-96YWU42lBhw" name="commands">
                  <packagedElement xmi:type="uml:Class" xmi:id="_2fWrcHe7Ed-C3vabgS4Hag" name="ICommandProxy">
                    <ownedComment xmi:id="_2fWrcXe7Ed-C3vabgS4Hag">
                      <body>
 * A Command Wrapper for a GMF ICommand.
 *
 * @author melaasar
 </body>
                    </ownedComment>
                    <generalization xmi:id="_2ff1YHe7Ed-C3vabgS4Hag" general="_dahWcHc2Ed-96YWU42lBhw"/>
                    <ownedAttribute xmi:id="_2ff1YXe7Ed-C3vabgS4Hag" name="iCommand" visibility="private" type="_HK-0B3PGEd-bh5e9e7eOjw" isUnique="false">
                      <ownedComment xmi:id="_2fpmYHe7Ed-C3vabgS4Hag">
                        <body> The wrapped command </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_2fywUHe7Ed-C3vabgS4Hag" name="dispose" visibility="public"/>
                    <ownedOperation xmi:id="_2fywUXe7Ed-C3vabgS4Hag" name="getICommand" visibility="public">
                      <ownedComment xmi:id="_2fywUne7Ed-C3vabgS4Hag">
                        <body>
	 * gets the warapped &lt;code>ICommand&lt;/code>
	 * @return the wrapped command
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_2f8hUHe7Ed-C3vabgS4Hag" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2gGSUHe7Ed-C3vabgS4Hag" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_2gGSUXe7Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2gGSUne7Ed-C3vabgS4Hag" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_2gPcQHe7Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2gZNQHe7Ed-C3vabgS4Hag" name="execute" visibility="public"/>
                    <ownedOperation xmi:id="_2gZNQXe7Ed-C3vabgS4Hag" name="redo" visibility="public"/>
                    <ownedOperation xmi:id="_2gi-QHe7Ed-C3vabgS4Hag" name="undo" visibility="public"/>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_dhhWUHc2Ed-96YWU42lBhw" name="CommandProxy">
                    <ownedComment xmi:id="_2WaK0Xe7Ed-C3vabgS4Hag">
                      <body>
 * {@link ICommand} that delegates to a GEF {@link Command}.
 * 
 * @author sshaw
 </body>
                    </ownedComment>
                    <generalization xmi:id="_2Wj70He7Ed-C3vabgS4Hag" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_2XTisHe7Ed-C3vabgS4Hag" name="command" visibility="private" type="_dahWcHc2Ed-96YWU42lBhw" isUnique="false">
                      <ownedComment xmi:id="_2XmdoHe7Ed-C3vabgS4Hag">
                        <body> The wrapped command </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_2XwOoHe7Ed-C3vabgS4Hag" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_2X5YkHe7Ed-C3vabgS4Hag" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_2YDJkHe7Ed-C3vabgS4Hag" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_2YM6kHe7Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2YWEgHe7Ed-C3vabgS4Hag" name="doRedoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_2Yf1gHe7Ed-C3vabgS4Hag" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_2Yo_cHe7Ed-C3vabgS4Hag" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_2YywcHe7Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2YywcXe7Ed-C3vabgS4Hag" name="doUndoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_2Y8hcHe7Ed-C3vabgS4Hag" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_2ZFrYHe7Ed-C3vabgS4Hag" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_2ZFrYXe7Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2ZPcYHe7Ed-C3vabgS4Hag" name="getCommand" visibility="public">
                      <ownedComment xmi:id="_2ZPcYXe7Ed-C3vabgS4Hag">
                        <body>
     * Returns the wrapped command.
     * 
     * @return Command
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_2ZZNYHe7Ed-C3vabgS4Hag" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2Z1SQHe7Ed-C3vabgS4Hag" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_2Z1SQXe7Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2Z_DQHe7Ed-C3vabgS4Hag" name="canRedo" visibility="public">
                      <ownedParameter xmi:id="_2aI0QHe7Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2aI0QXe7Ed-C3vabgS4Hag" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_2aR-MHe7Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_2abvMHe7Ed-C3vabgS4Hag" name="dispose" visibility="public"/>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_or-p0Hh5Ed-ECKyh8Dg6Wg" name="ArrangeCommand" isLeaf="true">
                    <ownedComment xmi:id="_or-p0Xh5Ed-ECKyh8Dg6Wg">
                      <body>
 * The arrange command implementation
 * &lt;li> Delegates to the layout provider only during the execution of the command.
 * &lt;li> {@link #canExecute()} asks the layout service whether it can layout the nodes
 * (e.g some layouts won't layout if nodes are laid out already)    
 * 
 * @author aboyko
 * @since 1.4
 </body>
                    </ownedComment>
                    <generalization xmi:id="_or-p0nh5Ed-ECKyh8Dg6Wg" general="_huFo1HPSEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_osausHh5Ed-ECKyh8Dg6Wg" name="nodes" visibility="private" type="_osRkwnh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_oskfsHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Nodes to layout
	 </body>
                      </ownedComment>
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_os3aoHh5Ed-ECKyh8Dg6Wg" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_osuQsHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_os3aoXh5Ed-ECKyh8Dg6Wg" name="selectionArrange" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_otBLoHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * &lt;code>true&lt;/code> if only a part of the graph is being laid out,
	 * &lt;code>false&lt;/code> - the whole graph is being laid out
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_otK8oHh5Ed-ECKyh8Dg6Wg" name="layoutHint" visibility="private" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_otUGkHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The layout hint parameter
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_otd3kHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_otd3kXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_otnBgHh5Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_otwygHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ot6jgXh5Ed-ECKyh8Dg6Wg" name="initLayoutNodes" visibility="private">
                      <ownedComment xmi:id="_ot6jgnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Creates the list of nodes to layout from the editparts required to be arranged
	 * 
	 * @param editparts the editparts required to be arranged
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_ouDtcHh5Ed-ECKyh8Dg6Wg" name="editparts" type="_ot6jgHh5Ed-ECKyh8Dg6Wg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ouNecXh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ouNecHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ouXPcHh5Ed-ECKyh8Dg6Wg" name="getCommandForExecution" visibility="private">
                      <ownedComment xmi:id="_ouXPcXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Creates the actual layout command to execute. The command is created based on the {@link LayoutService} 
	 * 
	 * @return the actual graph layout command 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_ougZYHh5Ed-ECKyh8Dg6Wg" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ouqKYHh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_ouqKYXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_o2G2MHh5Ed-ECKyh8Dg6Wg" name="CommandUtilities">
                    <ownedComment xmi:id="_o2G2MXh5Ed-ECKyh8Dg6Wg">
                      <body>
 * Class containing commands utility methods.
 * 
 * @author aboyko
 *
 </body>
                    </ownedComment>
                    <ownedOperation xmi:id="_o2QnMHh5Ed-ECKyh8Dg6Wg" name="canRedo" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_o2QnMXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * This utility function determines whether the command is redoable.
	 * Since GEF commands API doesn't support for canRedo method, this
	 * utility will help to travel through the contents of GEF wrapper
	 * commands and determine redoability of the GEF command based on
	 * the redoability of the commands it contains.
	 * 
	 * @param command The command to be examined
	 * @return &lt;code>true&lt;/code> if the passed command is redoable
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o2ZxIHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_o2ZxIXh5Ed-ECKyh8Dg6Wg" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o2jiIHh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_o2jiIXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Determines the files affected by &lt;code>command&lt;/code>. Since GEF
	 * command API has no support for #getAffectedFiles, this utility will
	 * traverse the contents of GEF wrapper commands and determine the files
	 * affected by the &lt;code>ICommands&lt;/code> it contains.
	 * 
	 * @param command
	 *            the command
	 * @return the affected files
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o2tTIHh5Ed-ECKyh8Dg6Wg" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_o3AOEHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_o22dEHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_o3AOEXh5Ed-ECKyh8Dg6Wg" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o3JYAHh5Ed-ECKyh8Dg6Wg" name="getMostSevereStatus" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_o3JYAXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * A helper that inspects the command for the most severe command result.
	 * 
	 * @param command
	 * @return IStatus in the command or null if no result can be obtained from the command.
	 * @since 1.2
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o3TJAHh5Ed-ECKyh8Dg6Wg" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_o3c6AHh5Ed-ECKyh8Dg6Wg" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o3mD8Hh5Ed-ECKyh8Dg6Wg" name="aggregateStatuses" visibility="protected" isStatic="true">
                      <ownedComment xmi:id="_o3mD8Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Creates a suitable aggregate from these statuses. If there are no
	 * statuses to aggregate, then an null status is returned. If there is a
	 * single status to aggregate, then it is returned. Otherwise, a
	 * multi-status is returned with the provided statuses as children.
	 * 
	 * @param statuses
	 *            the statuses to aggregate. May have zero, one, or more
	 *            elements (all must be {@link IStatus}es)
	 * 
	 * @return the multi-status or null
	 * @since 1.2
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o3v08Hh5Ed-ECKyh8Dg6Wg" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_o35l8Hh5Ed-ECKyh8Dg6Wg" name="statuses" type="_fXmVnnOxEd-nKvj-XTCBkg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_o4Cv4Hh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_o35l8Xh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_o5h9oHh5Ed-ECKyh8Dg6Wg" name="CreateCommand">
                    <generalization xmi:id="_o5h9oXh5Ed-ECKyh8Dg6Wg" general="_huFo1HPSEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_o51foHh5Ed-ECKyh8Dg6Wg" name="viewDescriptor" visibility="protected" isLeaf="true" type="_o5ruoXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_o5-pkHh5Ed-ECKyh8Dg6Wg">
                        <body> the view descriptor </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_o6SLkHh5Ed-ECKyh8Dg6Wg" name="containerView" visibility="protected" isLeaf="true" type="_o6IakXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_o6bVgHh5Ed-ECKyh8Dg6Wg">
                        <body> The container view </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_o6lGgHh5Ed-ECKyh8Dg6Wg" name="getViewDescriptor" visibility="protected">
                      <ownedComment xmi:id="_o6lGgXh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Return the cached view descriprot.
     * 
     * @return view descriprot
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o6uQcHh5Ed-ECKyh8Dg6Wg" type="_o5ruoXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o64BcHh5Ed-ECKyh8Dg6Wg" name="getContainerView" visibility="protected">
                      <ownedComment xmi:id="_o64BcXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * give access to the view, where that will contain the created view
	 * @return the conatiner view
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o7BycHh5Ed-ECKyh8Dg6Wg" type="_o6IakXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o7BycXh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_o7K8YHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_o7UtYHh5Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_o7UtYXh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o7eeYHh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_o7eeYXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o7noUHh5Ed-ECKyh8Dg6Wg" name="isPersisted" visibility="public">
                      <ownedComment xmi:id="_o7noUXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * returns true if the view that will be created will be a transient view, transient views
	 * will not dirty the model and will never get serialized in the saved file
	 * @return true if persisted false if transient
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_o7xZUHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_o7xZUXh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_o76jQHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_o8OFQHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_o8EUQHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Package" xmi:id="_o5ruoHh5Ed-ECKyh8Dg6Wg" name="CreateViewRequest">
                    <packagedElement xmi:type="uml:Class" xmi:id="_o5ruoXh5Ed-ECKyh8Dg6Wg" name="ViewDescriptor"/>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_o9jiAHh5Ed-ECKyh8Dg6Wg" name="CreateOrSelectElementCommand">
                    <ownedComment xmi:id="_o9tTAHh5Ed-ECKyh8Dg6Wg">
                      <body>
 * &lt;p>
 * A command that pops up a menu which can allow the user to select whether they
 * want to create a new type, select an existing element, or leave it
 * unspecified.
 * &lt;/p>
 * 
 * &lt;p>
 * The content can be customized, one or more of the above options are
 * permitted. The constants &lt;code>UNSPECIFIED&lt;/code> and
 * &lt;code>SELECT_EXISTING&lt;/code> can be used as the content of a menu item.
 * &lt;/p>
 * 
 * &lt;p>
 * The displayed strings can be customized with a custom label provider.
 * &lt;/p>
 * 
 * &lt;p>
 * The options are:
 * &lt;li>Unspecified&lt;/li>
 * &lt;li>Select Existing Element&lt;/li>
 * &lt;li>Create New Type A&lt;/li>
 * &lt;li>Create New Type B&lt;/li>
 * 
 * &lt;p>
 * If a &quot;Select Existing&quot; menu item is chosen, an additional dialog appears
 * allowing the user to choose an element.
 * 
 * &lt;p>
 * The &lt;code>getResultAdapter()&lt;/code> method returns an adaptable to the
 * result.
 * &lt;/p>
 * 
 * @author cmahoney
 </body>
                    </ownedComment>
                    <generalization xmi:id="_o9tTAnh5Ed-ECKyh8Dg6Wg" general="_o9tTAXh5Ed-ECKyh8Dg6Wg"/>
                    <ownedAttribute xmi:id="_o93EAHh5Ed-ECKyh8Dg6Wg" name="UNSPECIFIED" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_o-AN8Hh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Add this to the content list of the popup menu to add an 'unspecified'
	 * option.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_o-TI4Hh5Ed-ECKyh8Dg6Wg" name="SELECT_EXISTING" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_o-c54Hh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Add this to the content list of the popup menu to add a 'select existing'
	 * option.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_o-v00Hh5Ed-ECKyh8Dg6Wg" name="CREATE_WITHOUT_BINDING" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_o-5l0Hh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Add this to the content list of the popup menu to add a 'create without
	 * binding' option.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_o_8HoHh5Ed-ECKyh8Dg6Wg" name="resultAdapter" visibility="private" type="_o_y9sXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pAF4oHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The result to be returned from which the new element or type info can be
	 * retrieved.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pAYzkXh5Ed-ECKyh8Dg6Wg" name="selectElementDialog" visibility="private" type="_pAYzkHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pAikkHh5Ed-ECKyh8Dg6Wg">
                        <body> The dialog to be used if &quot;Select Existing Element&quot; is chosen </body>
                      </ownedComment>
                    </ownedAttribute>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_o_DW0Hh5Ed-ECKyh8Dg6Wg" name="LabelProvider">
                      <ownedComment xmi:id="_o_DW0Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The default label provider for the the menu items used in this command.
	 * Adds the &quot;Create new &quot; text to the objects of type
	 * &lt;code>IElementType&lt;/code>.
	 </body>
                      </ownedComment>
                      <generalization xmi:id="_o_WRwXh5Ed-ECKyh8Dg6Wg" general="_o_WRwHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedOperation xmi:id="_o_fbsHh5Ed-ECKyh8Dg6Wg" name="getText" visibility="public">
                        <ownedComment xmi:id="_o_fbsXh5Ed-ECKyh8Dg6Wg">
                          <body>
		 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
		 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_o_pMsHh5Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_o_pMsXh5Ed-ECKyh8Dg6Wg" name="object" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <ownedOperation xmi:id="_pArugHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_pArugXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Pops up the dialog with the content provided. If the user selects 'select
	 * existing', then the select elements dialog also appears.
	 * 
	 * @see org.eclipse.gmf.runtime.common.core.sandbox.AbstractCommand2#doExecute(org.eclipse.core.runtime.IProgressMonitor)
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pArugnh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pA1fgHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pA_QgHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pBIacHh5Ed-ECKyh8Dg6Wg" name="getSelectElementDialog" visibility="protected">
                      <ownedComment xmi:id="_pBIacXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the selectElementDialog.
	 * 
	 * @return Returns the selectElementDialog.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pBSLcHh5Ed-ECKyh8Dg6Wg" type="_pAYzkHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pBSLcXh5Ed-ECKyh8Dg6Wg" name="setSelectElementDialog" visibility="public">
                      <ownedComment xmi:id="_pBSLcnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the selectElementDialog.
	 * 
	 * @param dialog
	 *            The dialog to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pBb8cHh5Ed-ECKyh8Dg6Wg" name="dialog" type="_pAYzkHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pBlGYHh5Ed-ECKyh8Dg6Wg" name="getResultAdapter" visibility="public">
                      <ownedComment xmi:id="_pBlGYXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the resultAdapter.
	 * 
	 * @return Returns the resultAdapter.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pBu3YHh5Ed-ECKyh8Dg6Wg" type="_o_y9sXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pBu3YXh5Ed-ECKyh8Dg6Wg" name="getLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_pBu3Ynh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the label provider that is to be used to display each item in the
	 * popup menu.
	 * 
	 * @return the label provider
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pCByUHh5Ed-ECKyh8Dg6Wg" type="_pB4BUXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_o9tTAXh5Ed-ECKyh8Dg6Wg" name="PopupMenuCommand">
                    <ownedComment xmi:id="_p5wrkHh5Ed-ECKyh8Dg6Wg">
                      <body>
 * A command that pops up a &lt;code>PopupMenu&lt;/code> or a
 * &lt;code>PopupDialog&lt;/code> when it executes. The result from the
 * &lt;code>PopupMenu&lt;/code> or &lt;code>PopupDialog&lt;/code> is retrieved via
 * &lt;code>getCommandResult().getReturnValue()&lt;/code>.
 * 
 * @author cmahoney
 </body>
                    </ownedComment>
                    <generalization xmi:id="_p5wrkXh5Ed-ECKyh8Dg6Wg" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_p551gHh5Ed-ECKyh8Dg6Wg" name="POPUP_MENU" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_p6DmgHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The popup menu style for this command.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_p6WhcHh5Ed-ECKyh8Dg6Wg" name="POPUP_DIALOG" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_p6gScHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The popup dialog style for this command.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_p7GIUXh5Ed-ECKyh8Dg6Wg" name="parentShell" visibility="private" type="_p7GIUHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_p7P5UHh5Ed-ECKyh8Dg6Wg">
                        <body> The parent shell for this menu. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_p7i0QHh5Ed-ECKyh8Dg6Wg" name="popupMenu" visibility="private" type="_p7ZqUXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_p7slQHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The popup menu to appear when this command is executed if the popup menu
	 * is not &lt;code>null&lt;/code>.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_p7_gMXh5Ed-ECKyh8Dg6Wg" name="popupDialog" visibility="private" type="_p7_gMHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_p8JRMHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The dialog to appear when this command is executed, if the dialog
	 * is not &lt;code>null&lt;/code>.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_p8SbIHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_p8cMIHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_p8cMIXh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_p8l9IHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p8vHEHh5Ed-ECKyh8Dg6Wg" name="doRedoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_p844EHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_p844EXh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_p9CpEHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p9LzAHh5Ed-ECKyh8Dg6Wg" name="doUndoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_p9LzAXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_p9VkAHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_p9et8Hh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p9et8Xh5Ed-ECKyh8Dg6Wg" name="canRedo" visibility="public">
                      <ownedParameter xmi:id="_p9oe8Hh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p9yP8Hh5Ed-ECKyh8Dg6Wg" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_p9yP8Xh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p97Z4Hh5Ed-ECKyh8Dg6Wg" name="getParentShell" visibility="protected">
                      <ownedComment xmi:id="_p97Z4Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the parentShell.
	 * @return Returns the parentShell.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p-FK4Hh5Ed-ECKyh8Dg6Wg" type="_p7GIUHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p-O74Hh5Ed-ECKyh8Dg6Wg" name="setParentShell" visibility="public">
                      <ownedComment xmi:id="_p-O74Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the parentShell.
	 * @param parentShell The parentShell to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p-YF0Hh5Ed-ECKyh8Dg6Wg" name="parentShell" type="_p7GIUHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p-h20Hh5Ed-ECKyh8Dg6Wg" name="getPopupMenu" visibility="protected">
                      <ownedComment xmi:id="_p-h20Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the popupMenu.
	 * @return Returns the popupMenu.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p-h20nh5Ed-ECKyh8Dg6Wg" type="_p7ZqUXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p-rAwHh5Ed-ECKyh8Dg6Wg" name="setPopupMenu" visibility="public">
                      <ownedComment xmi:id="_p-rAwXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the popupMenu. Sets the popup dialog to null.
	 * @param popupMenu The popupMenu to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p-0xwHh5Ed-ECKyh8Dg6Wg" name="popupMenu" type="_p7ZqUXh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p--iwHh5Ed-ECKyh8Dg6Wg" name="getPopupDialog" visibility="protected">
                      <ownedComment xmi:id="_p--iwXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the popupDialog.
	 * @return Returns the popupDialog.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p_HssHh5Ed-ECKyh8Dg6Wg" type="_p7_gMHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p_HssXh5Ed-ECKyh8Dg6Wg" name="setPopupDialog" visibility="public">
                      <ownedComment xmi:id="_p_Hssnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the popupDialog. Sets the popup menu to null.
	 * @param popupDialog The popupDialog to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p_RdsHh5Ed-ECKyh8Dg6Wg" name="popupDialog" type="_p7_gMHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_pISLUHh5Ed-ECKyh8Dg6Wg" name="CreateViewAndOptionallyElementCommand">
                    <ownedComment xmi:id="_pIb8UHh5Ed-ECKyh8Dg6Wg">
                      <body>
 * A command used to optionally create a new view and new element. This command
 * is used when it is not known at command creation time whether or not an
 * element should be created as well. For example, when creating a connection to
 * an unspecified target, did the user want to
 * &lt;li>create a new element for the target (view and element)?&lt;/li>
 * &lt;li>use an existing element and its view already on the diagram (nothing
 * created)?&lt;/li>
 * &lt;li>use an existing element and add a new view to the diagram (view only)?
 * 
 * &lt;p>
 * Note: This command will pop up a dialog box if the element exists already and
 * there is a view for it on the diagram to ask the user what they want to do.
 * &lt;/p>
 * 
 * @author cmahoney
 </body>
                    </ownedComment>
                    <generalization xmi:id="_pIb8UXh5Ed-ECKyh8Dg6Wg" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_pIltUHh5Ed-ECKyh8Dg6Wg" name="elementAdapter" visibility="private" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_pIu3QHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Adapts to the element, if null at command execution time, an element is
	 * to be created.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pJLjMnh5Ed-ECKyh8Dg6Wg" name="location" visibility="private" type="_pJLjMXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pJVUMHh5Ed-ECKyh8Dg6Wg">
                        <body> The location to create the new view. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pJeeIHh5Ed-ECKyh8Dg6Wg" name="containerEP" visibility="private" type="_ot6jgHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pJyAIHh5Ed-ECKyh8Dg6Wg">
                        <body> The container editpart to send the view request to. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pJyAIXh5Ed-ECKyh8Dg6Wg" name="command" visibility="private" type="_dahWcHc2Ed-96YWU42lBhw" isUnique="false">
                      <ownedComment xmi:id="_pKE7EHh5Ed-ECKyh8Dg6Wg">
                        <body> The command executed, saved for undo/redo. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pKOFAHh5Ed-ECKyh8Dg6Wg" name="resultAdapter" visibility="private" type="_o_y9sXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pKX2AHh5Ed-ECKyh8Dg6Wg">
                        <body> The result to be returned from which the new view can be retrieved. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pK0h8Xh5Ed-ECKyh8Dg6Wg" name="preferencesHint" visibility="private" type="_pK0h8Hh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pK-S8Hh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@link DiagramPreferencesRegistry}.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_pLHc4Hh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_pLHc4Xh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pLaX0Hh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pLRN4Hh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pLaX0Xh5Ed-ECKyh8Dg6Wg" name="getExistingView" visibility="protected">
                      <ownedComment xmi:id="_pLaX0nh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Searches the container editpart to see if the element passed in already
	 * has a view.
	 * 
	 * @param element
	 * @return IView the view if found; or null
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pLkI0Hh5Ed-ECKyh8Dg6Wg" type="_o6IakXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_pLt50Hh5Ed-ECKyh8Dg6Wg" name="element" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pMA0wHh5Ed-ECKyh8Dg6Wg" name="findChildEditPart" visibility="private">
                      <ownedComment xmi:id="_pMA0wXh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Returns an immediate child editpart of the editpart passed in whose
     * element is the same as the element passed in if it exists; returns null
     * if such an editpart does not exist.
     * 
     * @param editpart
     *            the parent editpart
     * @param theElement
     *            the element to match
     * @return an immediate child editpart of the editpart passed in whose
     *         element is the same as the element passed in if it exists; null
     *         otherwise
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pMA0wnh5Ed-ECKyh8Dg6Wg" type="_pL3DwHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_pMKlwHh5Ed-ECKyh8Dg6Wg" name="editpart" type="_pL3DwHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedParameter xmi:id="_pMdgsHh5Ed-ECKyh8Dg6Wg" name="theElement" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pMdgsXh5Ed-ECKyh8Dg6Wg" name="useExistingView" visibility="protected">
                      <ownedComment xmi:id="_pMdgsnh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Prompts the user to see if they would like to use an existing view on the
     * diagram. Clients may subclass this method to customize the message
     * dialog.
     * 
     * @param view
     *            the existing view
     * @return true if this view should be used; false otherwise
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pMmqoHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_pMwboHh5Ed-ECKyh8Dg6Wg" name="view" type="_o6IakXh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pMwboXh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_pMwbonh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * &lt;li>If the element adapter is empty, this command creates a new element
	 * and view for it.&lt;/li>
	 * &lt;li>If the element adapter is not empty, and a view for this element
	 * exists in the container, this command will prompt the user to see if they
	 * want to use the existing view or create a new view for the element and
	 * then execute accordingly.&lt;/li>
	 * &lt;li>If the element adapter is not empty, and a view for this element
	 * does not exist in the container, this command will create a new element
	 * and view.&lt;/li>
	 * 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pM6MoHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pNDWkHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pNNHkHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pNW4kHh5Ed-ECKyh8Dg6Wg" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_pNW4kXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pNgCgHh5Ed-ECKyh8Dg6Wg" name="canRedo" visibility="public">
                      <ownedParameter xmi:id="_pNgCgXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pNpzgHh5Ed-ECKyh8Dg6Wg" name="doRedoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_pNpzgXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pNy9cHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pNy9cXh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pOGfcHh5Ed-ECKyh8Dg6Wg" name="doUndoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_pOGfcXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pOPpYHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pOPpYXh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pOZaYHh5Ed-ECKyh8Dg6Wg" name="getResult" visibility="public">
                      <ownedComment xmi:id="_pOZaYXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * @return the adapter from which the view can be retrieved.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pOjLYHh5Ed-ECKyh8Dg6Wg" type="_fXmVm3OxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pOjLYXh5Ed-ECKyh8Dg6Wg" name="setResult" visibility="protected">
                      <ownedComment xmi:id="_pOjLYnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the result to adapt to the view passed in.
	 * @param viewAdapter
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pOsVUHh5Ed-ECKyh8Dg6Wg" name="viewAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pO2GUHh5Ed-ECKyh8Dg6Wg" name="getElementAdapter" visibility="protected">
                      <ownedComment xmi:id="_pO2GUXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the elementAdapter.
	 * @return Returns the elementAdapter.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pO_QQHh5Ed-ECKyh8Dg6Wg" type="_fXmVm3OxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pPJBQHh5Ed-ECKyh8Dg6Wg" name="setElementAdapter" visibility="protected">
                      <ownedComment xmi:id="_pPJBQXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the elementAdapter.
	 * @param elementAdapter The elementAdapter to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pPJBQnh5Ed-ECKyh8Dg6Wg" name="elementAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pPSyQHh5Ed-ECKyh8Dg6Wg" name="getLocation" visibility="protected">
                      <ownedComment xmi:id="_pPSyQXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the location.
	 * @return Returns the location.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pPb8MHh5Ed-ECKyh8Dg6Wg" type="_pJLjMXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pPltMHh5Ed-ECKyh8Dg6Wg" name="setLocation" visibility="protected">
                      <ownedComment xmi:id="_pPltMXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the location.
	 * @param location The location to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pPltMnh5Ed-ECKyh8Dg6Wg" name="location" type="_pJLjMXh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pPveMHh5Ed-ECKyh8Dg6Wg" name="getContainerEP" visibility="protected">
                      <ownedComment xmi:id="_pPveMXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the containerEP.
	 * @return Returns the containerEP.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pP4oIHh5Ed-ECKyh8Dg6Wg" type="_ot6jgHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pQCZIHh5Ed-ECKyh8Dg6Wg" name="setContainerEP" visibility="protected">
                      <ownedComment xmi:id="_pQCZIXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the containerEP.
	 * @param containerEP The containerEP to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pQCZInh5Ed-ECKyh8Dg6Wg" name="containerEP" type="_ot6jgHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pQLjEHh5Ed-ECKyh8Dg6Wg" name="getPreferencesHint" visibility="protected">
                      <ownedComment xmi:id="_pQLjEXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry &lt;@link DiagramPreferencesRegistry>.
	 * 
	 * @return the preferences hint
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pQVUEHh5Ed-ECKyh8Dg6Wg" type="_pK0h8Hh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pQfFEHh5Ed-ECKyh8Dg6Wg" name="setPreferencesHint" visibility="protected">
                      <ownedComment xmi:id="_pQfFEXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry &lt;@link DiagramPreferencesRegistry>.
	 * 
	 * @param preferencesHint the preferences hint
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pQfFEnh5Ed-ECKyh8Dg6Wg" name="preferencesHint" type="_pK0h8Hh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pQoPAHh5Ed-ECKyh8Dg6Wg" name="getCommand" visibility="protected">
                      <ownedComment xmi:id="_pQoPAXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the command.
	 * @return Returns the command.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pQyAAHh5Ed-ECKyh8Dg6Wg" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pQ7xAHh5Ed-ECKyh8Dg6Wg" name="setCommand" visibility="protected">
                      <ownedComment xmi:id="_pQ7xAXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Sets the command.
	 * @param command The command to set.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pRE68Hh5Ed-ECKyh8Dg6Wg" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_pTA0oHh5Ed-ECKyh8Dg6Wg" name="DeferredCreateConnectionViewAndElementCommand">
                    <ownedComment xmi:id="_pTKloHh5Ed-ECKyh8Dg6Wg">
                      <body>
 * a command to create the both of the View and Semantic of the connection, but
 * the editparts of target and source to obtain the command has not been created
 * yet, since we have the ViewAdapter to we can use it to get its editpart once
 * it is created and hence on execution time we can get its editpart to get the
 * command for our request and then execute it.
 * 
 * &lt;p>
 * This command can handle both
 * &lt;code>CreateConnectionViewAndElementRequest&lt;/code> and
 * &lt;code>CreateConnectionViewRequest&lt;/code>.
 * &lt;/p>
 * 
 * @author choang
 </body>
                    </ownedComment>
                    <generalization xmi:id="_pTKloXh5Ed-ECKyh8Dg6Wg" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_pTdgkHh5Ed-ECKyh8Dg6Wg" name="request" type="_pTUWoXh5Ed-ECKyh8Dg6Wg" isUnique="false"/>
                    <ownedAttribute xmi:id="_pTnRkHh5Ed-ECKyh8Dg6Wg" name="typeInfoAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false"/>
                    <ownedAttribute xmi:id="_pT6MgHh5Ed-ECKyh8Dg6Wg" name="sourceViewAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false"/>
                    <ownedAttribute xmi:id="_pUD9gHh5Ed-ECKyh8Dg6Wg" name="targetViewAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false"/>
                    <ownedAttribute xmi:id="_pUNHcHh5Ed-ECKyh8Dg6Wg" name="command" type="_dahWcHc2Ed-96YWU42lBhw" isUnique="false"/>
                    <ownedAttribute xmi:id="_pUW4cXh5Ed-ECKyh8Dg6Wg" name="viewer" type="_pUW4cHh5Ed-ECKyh8Dg6Wg" isUnique="false"/>
                    <ownedOperation xmi:id="_pUgpcHh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_pUpzYHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pU8uUHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pUzkYHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pU8uUXh5Ed-ECKyh8Dg6Wg" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_pVGfUHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pVGfUXh5Ed-ECKyh8Dg6Wg" name="canRedo" visibility="public">
                      <ownedParameter xmi:id="_pVQQUHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pVZaQHh5Ed-ECKyh8Dg6Wg" name="getSourceEditPart" visibility="protected">
                      <ownedComment xmi:id="_pVZaQXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * gives access to the connection source edit part, which is the edit part
	 * of the connection's source &lt;code>View&lt;/code>
	 * 
	 * @return the source edit part
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pVZaQnh5Ed-ECKyh8Dg6Wg" type="_pL3DwHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pVjLQHh5Ed-ECKyh8Dg6Wg" name="getTargetEditPart" visibility="protected">
                      <ownedComment xmi:id="_pVjLQXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * gives access to the connection target edit part, which is the edit part
	 * of the connection's target &lt;code>View&lt;/code>
	 * 
	 * @return the source edit part
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pVs8QHh5Ed-ECKyh8Dg6Wg" type="_pL3DwHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pV2GMHh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_pV2GMXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pV_3MHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_pV_3MXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Finds the source and target editparts by extracting the views from the
	 * view adapters and searching in the editpart viewer. Creates a connection
	 * view and element using the request.
	 * 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pWJBIHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pWSyIHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pWSyIXh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pWcjIHh5Ed-ECKyh8Dg6Wg" name="getLabel" visibility="public">
                      <ownedComment xmi:id="_pWcjIXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * @see org.eclipse.gmf.runtime.common.core.command.ICommand#getLabel()
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pWltEHh5Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pWveEHh5Ed-ECKyh8Dg6Wg" name="doRedoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_pWveEXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pW5PEHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pXCZAHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pXMKAHh5Ed-ECKyh8Dg6Wg" name="doUndoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_pXMKAXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pXVT8Hh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pXVT8Xh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_pY1IwHh5Ed-ECKyh8Dg6Wg" name="DeferredCreateConnectionViewCommand">
                    <ownedComment xmi:id="_pY-SsHh5Ed-ECKyh8Dg6Wg">
                      <body>
 * This command is used to create a connection view between two editparts, when
 * only the view adapters are available at the time of creating the command. The
 * editparts are required to get the correct create connection command, so this
 * command defers getting the create connection command until execution time at
 * which point it can get the editparts from the editpart registry and the view
 * adapters.
 * 
 * @author cmahoney
 </body>
                    </ownedComment>
                    <generalization xmi:id="_pY-SsXh5Ed-ECKyh8Dg6Wg" general="_huFo1HPSEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_pZIDsHh5Ed-ECKyh8Dg6Wg" name="element" visibility="protected" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                      <ownedComment xmi:id="_pZR0sHh5Ed-ECKyh8Dg6Wg">
                        <body> the element for the connection's semantic element </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pZa-oHh5Ed-ECKyh8Dg6Wg" name="semanticHint" visibility="protected" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_pZkvoHh5Ed-ECKyh8Dg6Wg">
                        <body> the connection's semantic hint </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pZt5kHh5Ed-ECKyh8Dg6Wg" name="sourceViewAdapter" visibility="protected" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_paeHgHh5Ed-ECKyh8Dg6Wg">
                        <body> the source adapter from which a View can be retrieved </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_paeHgXh5Ed-ECKyh8Dg6Wg" name="targetViewAdapter" visibility="protected" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_paxCcHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * the target adapter from which a View can be retrieved
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_paxCcXh5Ed-ECKyh8Dg6Wg" name="viewer" visibility="protected" type="_pUW4cHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pa6MYHh5Ed-ECKyh8Dg6Wg">
                        <body> the graphical viewer used to get the editpart registry </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pbD9YHh5Ed-ECKyh8Dg6Wg" name="createConnectionCmd" visibility="private" type="_dahWcHc2Ed-96YWU42lBhw" isUnique="false">
                      <ownedComment xmi:id="_pbNuYHh5Ed-ECKyh8Dg6Wg">
                        <body> the command saved for undo and redo </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pbW4UHh5Ed-ECKyh8Dg6Wg" name="preferencesHint" visibility="protected" type="_pK0h8Hh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pbgpUHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@link DiagramPreferencesRegistry}.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_pbqaUHh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_pbzkQHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pb9VQHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pbzkQXh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pcGfMHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_pcGfMXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Finds the source and target editparts by extracting the views from the
	 * view adapaters and searching in the editpart viewer. Creates a connection
	 * view between the source and target.
	 * 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pcQQMHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pcQQMXh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pcaBMHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_pefE0Hh5Ed-ECKyh8Dg6Wg" name="DeferredLayoutCommand">
                    <ownedComment xmi:id="_peo10Hh5Ed-ECKyh8Dg6Wg">
                      <body>
 * This command is used to arrange editparts on a diagram, when only the view
 * adapters are available at the time of creating the command. It is necessary
 * to have the editparts when creating a layout command so this command defers
 * the creation of the layout command until execution time at which point it can
 * get the editparts from the editpart registry using the view adapters.
 * 
 * @author cmahoney
 </body>
                    </ownedComment>
                    <generalization xmi:id="_peo10Xh5Ed-ECKyh8Dg6Wg" general="_huFo1HPSEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_peym0Hh5Ed-ECKyh8Dg6Wg" name="layoutType" visibility="protected" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_pe7wwHh5Ed-ECKyh8Dg6Wg">
                        <body> the type of layout to be performed </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pfFhwHh5Ed-ECKyh8Dg6Wg" name="viewAdapters" visibility="protected" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_pfPSwHh5Ed-ECKyh8Dg6Wg">
                        <body> the IAdaptables from which an View can be retrieved </body>
                      </ownedComment>
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pfiNsHh5Ed-ECKyh8Dg6Wg" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pfYcsHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_pfrXoHh5Ed-ECKyh8Dg6Wg" name="containerEP" visibility="protected" type="_ot6jgHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pf1IoHh5Ed-ECKyh8Dg6Wg">
                        <body> the diagram editpart used to get the editpart registry </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_pf1IoXh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_pf-5oHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pgIDkHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pf-5oXh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pgR0kHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_pgR0kXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Executes a layout command with all the editparts for the view adapters.
	 * 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_pgblkHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pgkvgHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pguggHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pguggXh5Ed-ECKyh8Dg6Wg" name="optimizeCommand" visibility="private">
                      <ownedParameter xmi:id="_pg3qcHh5Ed-ECKyh8Dg6Wg" type="_HK-0B3PGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pheHYHh5Ed-ECKyh8Dg6Wg" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_phn4YHh5Ed-ECKyh8Dg6Wg" name="cleanup" visibility="protected"/>
                    <ownedOperation xmi:id="_phn4YXh5Ed-ECKyh8Dg6Wg" name="getContainerFigure" visibility="protected">
                      <ownedComment xmi:id="_phn4Ynh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * gets the container edit part's figure
	 * @return the container figure
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_phxCUXh5Ed-ECKyh8Dg6Wg" type="_phxCUHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ph6zUHh5Ed-ECKyh8Dg6Wg" name="getContainerEP" visibility="protected">
                      <ownedComment xmi:id="_ph6zUXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * gets the container edit part
	 * @return the container edit part
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_piD9QHh5Ed-ECKyh8Dg6Wg" type="_ot6jgHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_piD9QXh5Ed-ECKyh8Dg6Wg" name="getViewAdapters" visibility="protected">
                      <ownedComment xmi:id="_piD9Qnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * gets a list of &lt;code>IAdaptable&lt;/code> that can adapt to &lt;code>
	 * View&lt;/code>
	 * @return view adapters
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_piXfQHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_pigpMXh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_pigpMHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_piqaMHh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_pi0LMHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_pqti8Hh5Ed-ECKyh8Dg6Wg" name="OpenDiagramCommand">
                    <ownedComment xmi:id="_pqti8Xh5Ed-ECKyh8Dg6Wg">
                      <body>
 * Command to open a diagram.
 * 
 * @author jcorchis
 </body>
                    </ownedComment>
                    <generalization xmi:id="_pq2s4Hh5Ed-ECKyh8Dg6Wg" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_pq2s4Xh5Ed-ECKyh8Dg6Wg" name="_element" visibility="private" type="_huPZ2HPSEd-NtftfyF3YZw" isUnique="false">
                      <ownedComment xmi:id="_prAd4Hh5Ed-ECKyh8Dg6Wg">
                        <body> Remember the element to be opened. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_prKO4Hh5Ed-ECKyh8Dg6Wg" name="getElement" visibility="protected">
                      <ownedComment xmi:id="_prKO4Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * returns the element associated with that command
	 * @return the element associated with that command
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_prTY0Hh5Ed-ECKyh8Dg6Wg" type="_huPZ2HPSEd-NtftfyF3YZw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_prdJ0Hh5Ed-ECKyh8Dg6Wg" name="setElement" visibility="protected">
                      <ownedComment xmi:id="_prdJ0Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * set the element to open
	 * @param element the element to open 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_prmTwHh5Ed-ECKyh8Dg6Wg" name="element" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_prmTwXh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedComment xmi:id="_prmTwnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * This command can only be executed if the element is a diagram.
	 * @see org.eclipse.gmf.runtime.common.core.command.ICommand#isExecutable()
	</body>
                      </ownedComment>
                      <ownedParameter xmi:id="_prwEwHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_pr51wHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_pr51wXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Create a new editor to display the corresponding diagram.
	 * &lt;p>
	 * @see org.eclipse.gmf.runtime.common.core.sandbox.AbstractCommand2#doExecute(org.eclipse.core.runtime.IProgressMonitor)
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_psC_sHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_psMwsHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_psWhsHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_psWhsXh5Ed-ECKyh8Dg6Wg" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_psfroHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_psfroXh5Ed-ECKyh8Dg6Wg" name="canRedo" visibility="public">
                      <ownedParameter xmi:id="_pspcoHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_psymkHh5Ed-ECKyh8Dg6Wg" name="doRedoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_psymkXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_ps8XkHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_ptGIkHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_ptPSgHh5Ed-ECKyh8Dg6Wg" name="doUndoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_ptZDgHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_pti0gHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_pti0gXh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_pzWhkHh5Ed-ECKyh8Dg6Wg" name="PasteCommand">
                    <ownedComment xmi:id="_pzWhkXh5Ed-ECKyh8Dg6Wg">
                      <body>
 * Paste Command for the views
 * 
 * @author Vishy Ramaswamy
 </body>
                    </ownedComment>
                    <generalization xmi:id="_pzgSkXh5Ed-ECKyh8Dg6Wg" general="_pzgSkHh5Ed-ECKyh8Dg6Wg"/>
                    <ownedAttribute xmi:id="_pzpcgnh5Ed-ECKyh8Dg6Wg" name="data" visibility="private" isLeaf="true" type="_pzpcgXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_pzzNgHh5Ed-ECKyh8Dg6Wg">
                        <body>
     * The clipboard data
     </body>
                      </ownedComment>
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_p0P5cHh5Ed-ECKyh8Dg6Wg" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_p0GIcHh5Ed-ECKyh8Dg6Wg"/>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_p0slYXh5Ed-ECKyh8Dg6Wg" name="mm" visibility="private" type="_p0slYHh5Ed-ECKyh8Dg6Wg" isUnique="false"/>
                    <ownedOperation xmi:id="_p01vUHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_p0_gUHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_p1IqQHh5Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_p1IqQXh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p1SbQHh5Ed-ECKyh8Dg6Wg" name="pasteFromString" visibility="protected">
                      <ownedComment xmi:id="_p1SbQXh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Method pasteFromString.
     * pastes the clipboard contents on to self
     * @param clipboard The clipboard contents - serialization used during copy
     * @return List The list of IView resulting from the paste
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p1cMQHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_p1vHMHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_p1lWMHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_p1vHMXh5Ed-ECKyh8Dg6Wg" name="view" type="_o6IakXh5Ed-ECKyh8Dg6Wg"/>
                      <ownedParameter xmi:id="_p144MHh5Ed-ECKyh8Dg6Wg" name="clipboard" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p2CCIXh5Ed-ECKyh8Dg6Wg" name="convertEdgeBendpoints" visibility="private">
                      <ownedComment xmi:id="_p2CCInh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * @param mu the &lt;code>MeasurementUnit&lt;/code> for the notation diagram.
	 * @param edges the &lt;code>Set&lt;/code> of edges to convert the bendpoints of.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p2LzIHh5Ed-ECKyh8Dg6Wg" name="mu" type="_p2CCIHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedParameter xmi:id="_p2U9EHh5Ed-ECKyh8Dg6Wg" name="edges" type="_URINMXcvEd-96YWU42lBhw"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p2euEHh5Ed-ECKyh8Dg6Wg" name="convertNodesConstraint" visibility="private">
                      <ownedComment xmi:id="_p2euEXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * @param retval the &lt;code>List&lt;/code> of &lt;code>Node&lt;/code> objects to convert the constraint of.
	 * @param mu the &lt;code>MeasurementUnit&lt;/code> for the notation diagram.
	 * @return the &lt;code>Set&lt;/code> of &lt;code>Edge&lt;/code> views that are attached to the list of nodes 
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p2ofEHh5Ed-ECKyh8Dg6Wg" type="_URINMXcvEd-96YWU42lBhw" direction="return"/>
                      <ownedParameter xmi:id="_p2xpAHh5Ed-ECKyh8Dg6Wg" name="retval" type="_QJNf43OxEd-nKvj-XTCBkg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_p27aAHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_p2xpAXh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_p3FLAHh5Ed-ECKyh8Dg6Wg" name="mu" type="_p2CCIHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedParameter xmi:id="_p3FLAXh5Ed-ECKyh8Dg6Wg" name="isProcessOffset" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p3YF8Xh5Ed-ECKyh8Dg6Wg" name="processNodeOffset" visibility="protected">
                      <ownedComment xmi:id="_p3YF8nh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Add offset node position. 
	 * @param node
	 * @param constraintRect
	 * @return
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p3hP4Hh5Ed-ECKyh8Dg6Wg" type="_p3YF8Hh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_p3rA4Hh5Ed-ECKyh8Dg6Wg" name="node" type="_p3OU8Hh5Ed-ECKyh8Dg6Wg"/>
                      <ownedParameter xmi:id="_p30x4Hh5Ed-ECKyh8Dg6Wg" name="constraintRect" type="_p3YF8Hh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_p30x4Xh5Ed-ECKyh8Dg6Wg" name="getMapMode" visibility="public">
                      <ownedComment xmi:id="_p30x4nh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Get map mode associated with this Paste command. 
	 * @return
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_p3970Hh5Ed-ECKyh8Dg6Wg" type="_p0slYHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_qCZqMHh5Ed-ECKyh8Dg6Wg" name="PromptForConnectionAndEndCommand">
                    <ownedComment xmi:id="_qCZqMXh5Ed-ECKyh8Dg6Wg">
                      <body>
 * &lt;p>
 * A command that pops up a menu which can allow the user to select the type of
 * connection to be created and whether they want to create a new type or select
 * an existing element for the other end of the connection.
 * &lt;/p>
 * 
 * &lt;p>
 * The &lt;code>getRelationshipTypeAdapter()&lt;/code> method returns an adaptable
 * to the relationship type result.
 * &lt;/p>
 * 
 * &lt;p>
 * The &lt;code>getEndAdapter()&lt;/code> method returns an adaptable to the end
 * type result.
 * &lt;/p>
 * 
 * @author cmahoney
 </body>
                    </ownedComment>
                    <generalization xmi:id="_qCZqMnh5Ed-ECKyh8Dg6Wg" general="_o9tTAXh5Ed-ECKyh8Dg6Wg"/>
                    <ownedAttribute xmi:id="_qE8A0Xh5Ed-ECKyh8Dg6Wg" name="EXISTING_ELEMENT" visibility="private" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_qFFKwHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * This can be added to the content list to add a 'select existing' option.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_qFYswHh5Ed-ECKyh8Dg6Wg" name="connectionLabelProvider" visibility="private" type="_qFO7wHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_qFh2sHh5Ed-ECKyh8Dg6Wg">
                        <body> Label provider of the popup menu for the connection types. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_qF0xoHh5Ed-ECKyh8Dg6Wg" name="endLabelProvider" visibility="private" isStatic="true" type="_qFrnsHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_qF-ioHh5Ed-ECKyh8Dg6Wg">
                        <body> Label provider of the submenus for the other end element. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_qGIToHh5Ed-ECKyh8Dg6Wg" name="connectionAdapter" visibility="private" type="_o_y9sXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_qGbOkHh5Ed-ECKyh8Dg6Wg">
                        <body> Adapts to the connection type result. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_qGbOkXh5Ed-ECKyh8Dg6Wg" name="endAdapter" visibility="private" type="_o_y9sXh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_qGuJgHh5Ed-ECKyh8Dg6Wg">
                        <body> Adapts to the other end type result. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_qG36gXh5Ed-ECKyh8Dg6Wg" name="request" visibility="private" type="_qG36gHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_qHBEcHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * The request to create a connection. It may contain the connection type or
	 * it may be a &lt;code>CreateUnspecifiedTypeConnectionRequest&lt;/code>.
	 </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_qHK1cHh5Ed-ECKyh8Dg6Wg" name="containerEP" visibility="private" type="_ot6jgHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_qHUmcHh5Ed-ECKyh8Dg6Wg">
                        <body> The container editpart to send the view request to. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_qCjbMHh5Ed-ECKyh8Dg6Wg" name="ConnectionLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_qCslIHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Label provider of the first popup menu with the relationship types.
	 </body>
                      </ownedComment>
                      <generalization xmi:id="_qCslIXh5Ed-ECKyh8Dg6Wg" general="_o_WRwHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedOperation xmi:id="_qC2WIHh5Ed-ECKyh8Dg6Wg" name="getText" visibility="public">
                        <ownedParameter xmi:id="_qDAHIHh5Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_qDJREHh5Ed-ECKyh8Dg6Wg" name="element" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_qDJREXh5Ed-ECKyh8Dg6Wg" name="EndLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_qDTCEHh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Label provider of the second popup (submenus) for the type of the other
	 * end.
	 </body>
                      </ownedComment>
                      <generalization xmi:id="_qDTCEXh5Ed-ECKyh8Dg6Wg" general="_o_WRwHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedOperation xmi:id="_qDcMAHh5Ed-ECKyh8Dg6Wg" name="getText" visibility="public">
                        <ownedParameter xmi:id="_qDcMAXh5Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_qDvuAHh5Ed-ECKyh8Dg6Wg" name="element" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <nestedClassifier xmi:type="uml:Class" xmi:id="_qD438Hh5Ed-ECKyh8Dg6Wg" name="ConnectionAndEndLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_qD438Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Label provider of the first and only popup for the type of the other end
	 * when there is only one connection type (e.g. a single relationship type
	 * palette tool is used).
	 </body>
                      </ownedComment>
                      <generalization xmi:id="_qECo8Hh5Ed-ECKyh8Dg6Wg" general="_o_WRwHh5Ed-ECKyh8Dg6Wg"/>
                      <ownedAttribute xmi:id="_qECo8Xh5Ed-ECKyh8Dg6Wg" name="connectionItem" visibility="private" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false">
                        <ownedComment xmi:id="_qEVj4Hh5Ed-ECKyh8Dg6Wg">
                          <body> the known connection item </body>
                        </ownedComment>
                      </ownedAttribute>
                      <ownedOperation xmi:id="_qEVj4Xh5Ed-ECKyh8Dg6Wg" name="getText" visibility="public">
                        <ownedParameter xmi:id="_qEfU4Hh5Ed-ECKyh8Dg6Wg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                        <ownedParameter xmi:id="_qEoe0Hh5Ed-ECKyh8Dg6Wg" name="element" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                      </ownedOperation>
                      <ownedOperation xmi:id="_qEyP0Hh5Ed-ECKyh8Dg6Wg" name="getConnectionItem" visibility="protected">
                        <ownedComment xmi:id="_qEyP0Xh5Ed-ECKyh8Dg6Wg">
                          <body>
		 * Gets the connection item.
		 * 
		 * @return the connection item
		 </body>
                        </ownedComment>
                        <ownedParameter xmi:id="_qE8A0Hh5Ed-ECKyh8Dg6Wg" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                      </ownedOperation>
                    </nestedClassifier>
                    <ownedOperation xmi:id="_qHdwYHh5Ed-ECKyh8Dg6Wg" name="getConnectionMenuContent" visibility="protected">
                      <ownedComment xmi:id="_qHdwYXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets a list of all the connection items that will represent the
	 * connection choices and will appear in the first part of the popup menu.
	 * 
	 * &lt;p>
	 * If the objects in this are not &lt;code>IElementTypes&lt;/code> or they
	 * require a special label provider, then
	 * {@link #getConnectionLabelProvider()} should be overridden to provide
	 * this.
	 * &lt;/p>
	 * &lt;p>
	 * When this command has executed, the connection adapter result ({@link #getConnectionAdapter()})
	 * will be populated with the connection item chosen.
	 * &lt;/p>
	 * 
	 * @return the list of connection items to appear in the popup menu
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qHnhYHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_qHxSYXh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qHxSYHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qH6cUHh5Ed-ECKyh8Dg6Wg" name="getEndMenuContent" visibility="protected">
                      <ownedComment xmi:id="_qH6cUXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets a list of all the end items that will represent the other end
	 * choices and will appear in the submenu popup of the given connection
	 * item.
	 * 
	 * &lt;p>
	 * If the objects in this are not &lt;code>IElementTypes&lt;/code> or they
	 * require a special label provider, then {@link #getEndLabelProvider()}
	 * should be overridden to provide this.
	 * &lt;/p>
	 * &lt;p>
	 * When this command has executed, the end adapter result ({@link #getEndAdapter()})
	 * will be populated with the end item chosen.
	 * &lt;/p>
	 * 
	 * @param connectionItem
	 *            the connection item for which this will be a submenu
	 * @return the list of end items to appear in the popup menu
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qIENUHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_qIXIQHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qINXQHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_qIXIQXh5Ed-ECKyh8Dg6Wg" name="connectionItem" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qIg5QHh5Ed-ECKyh8Dg6Wg" name="createPopupMenu" visibility="protected">
                      <ownedComment xmi:id="_qIg5QXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the content to be used in the popup menu from the Modeling Assistant
	 * Service and creates the popup menu.
	 * 
	 * @return the top-level popup menu
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qIqDMHh5Ed-ECKyh8Dg6Wg" type="_p7ZqUXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qIz0MHh5Ed-ECKyh8Dg6Wg" name="filterUnsupportedNodeTypes" visibility="private">
                      <ownedComment xmi:id="_qIz0MXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Returns a new list with all the types from the list given that can be
	 * created.
	 * 
	 * @param allTypes
	 *            a list of &lt;code>IElementTypes&lt;/code>.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qI9lMHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_qJGvIHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qI9lMXh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                      <ownedParameter xmi:id="_qJQgIHh5Ed-ECKyh8Dg6Wg" name="allTypes" type="_QJNf43OxEd-nKvj-XTCBkg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_qJjbEHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_qJZqEHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qJtMEHh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_qJtMEXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qJ2WAHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedComment xmi:id="_qJ2WAXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Pops up the dialog with the content provided. If the user selects 'select
	 * existing', then the select elements dialog also appears.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qJ2WAnh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_qKAHAHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_qKJ4AHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qKcy8Xh5Ed-ECKyh8Dg6Wg" name="supportsExistingElement" visibility="private">
                      <ownedComment xmi:id="_qKcy8nh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Checks if the &lt;code>ModelingAssistantService&lt;/code> supports the
	 * ability to open a dialog for the user to select an existing element
	 * 
	 * @param connectionType
	 * @return true if the supported by the modeling assistant service; false
	 *         otherwise
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qKl84Hh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_qKvt4Hh5Ed-ECKyh8Dg6Wg" name="connectionType" type="_qKcy8Hh5Ed-ECKyh8Dg6Wg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qK5e4Hh5Ed-ECKyh8Dg6Wg" name="getConnectionAdapter" visibility="public">
                      <ownedComment xmi:id="_qK5e4Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the connectionAdapter.
	 * 
	 * @return Returns the connectionAdapter.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qK5e4nh5Ed-ECKyh8Dg6Wg" type="_o_y9sXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qLCo0Hh5Ed-ECKyh8Dg6Wg" name="getEndAdapter" visibility="public">
                      <ownedComment xmi:id="_qLCo0Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the endAdapter.
	 * 
	 * @return Returns the endAdapter.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qLMZ0Hh5Ed-ECKyh8Dg6Wg" type="_fXmVm3OxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qLWK0Hh5Ed-ECKyh8Dg6Wg" name="isDirectionReversed" visibility="protected">
                      <ownedComment xmi:id="_qLWK0Xh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Returns true if the request is a reversed
	 * &lt;code>CreateUnspecifiedTypeConnectionRequest&lt;/code>.
	 * 
	 * @return Returns true if the request is a reversed
	 *         &lt;code>CreateUnspecifiedTypeConnectionRequest&lt;/code>; false
	 *         otherwise
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qLfUwHh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qLyPsHh5Ed-ECKyh8Dg6Wg" name="getKnownEnd" visibility="private">
                      <ownedComment xmi:id="_qLyPsXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the known end, which even in the case of a reversed
	 * &lt;code>CreateUnspecifiedTypeConnectionRequest&lt;/code>, is the source
	 * editpart.
	 * 
	 * @return the known end
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qLyPsnh5Ed-ECKyh8Dg6Wg" type="_pL3DwHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qL8AsHh5Ed-ECKyh8Dg6Wg" name="getConnectionLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_qL8AsXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the label provider that is to be used in the first menu of the popup
	 * where the user is to choose the connection to be created.
	 * 
	 * @return the connection label provider
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qMFxsHh5Ed-ECKyh8Dg6Wg" type="_pB4BUXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qMO7oHh5Ed-ECKyh8Dg6Wg" name="getEndLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_qMO7oXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the label provider that is to be used in the second menu of the
	 * popup where the user is to choose the end (could be source or target) to
	 * be created.
	 * 
	 * @return the end label provider
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qMYsoHh5Ed-ECKyh8Dg6Wg" type="_pB4BUXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_qMYsoXh5Ed-ECKyh8Dg6Wg" name="getConnectionAndEndLabelProvider" visibility="protected">
                      <ownedComment xmi:id="_qMYsonh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Gets the label provider that is to be used when there is only one option
	 * for the connection type so the popup menu consists of a single menu
	 * identifying the connection type to be created and options for the other
	 * end of which the user must choose
	 * 
	 * @param connectionItem
	 *            the single known connection item
	 * @return the label provider
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_qMidoHh5Ed-ECKyh8Dg6Wg" type="_pB4BUXh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_qMrnkHh5Ed-ECKyh8Dg6Wg" name="connectionItem" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_qFO7wHh5Ed-ECKyh8Dg6Wg" name="ConnectionLabelProvider"/>
                  <packagedElement xmi:type="uml:Class" xmi:id="_qFrnsHh5Ed-ECKyh8Dg6Wg" name="EndLabelProvider"/>
                  <packagedElement xmi:type="uml:Class" xmi:id="_qzkocHh5Ed-ECKyh8Dg6Wg" name="SemanticCreateCommand">
                    <ownedComment xmi:id="_qzkocXh5Ed-ECKyh8Dg6Wg">
                      <body>
 * A Wrapper around a real element creation command
 * The main use of this command is to ensure that the semantic
 * adapter is updated appropriately upon undo and redo of the real command
 * 
 * @author melaasar
 </body>
                    </ownedComment>
                    <generalization xmi:id="_qzuZcHh5Ed-ECKyh8Dg6Wg" general="_7-bbAHPQEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_qz4KcXh5Ed-ECKyh8Dg6Wg" name="requestAdapter" type="_qz4KcHh5Ed-ECKyh8Dg6Wg" isUnique="false">
                      <ownedComment xmi:id="_q0BUYHh5Ed-ECKyh8Dg6Wg">
                        <body> the request adapter </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_q0LFYHh5Ed-ECKyh8Dg6Wg" name="realSemanticCommand" visibility="private" type="_HK-0B3PGEd-bh5e9e7eOjw" isUnique="false">
                      <ownedComment xmi:id="_q0UPUHh5Ed-ECKyh8Dg6Wg">
                        <body> the real element creation command </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_q0eAUHh5Ed-ECKyh8Dg6Wg" name="getCommandResult" visibility="public">
                      <ownedComment xmi:id="_q0eAUXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * If the command was properly executed, the result will be set during
	 * execution. If the command failed execution, the result may contain status
	 * information for feedback purposes.
	 * 
	 * @return 
	 * 		The command result either from this command executed
	 * 		properly or the wrapped realSemanticCommand in case status information
	 * 		needs to be returned.
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q0nxUHh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q0w7QHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_q0w7QXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_q06sQHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_q1EdQHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q1NnMHh5Ed-ECKyh8Dg6Wg" name="doRedoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_q1NnMXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_q1XYMHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_q1giIHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q1qTIHh5Ed-ECKyh8Dg6Wg" name="doUndoWithResult" visibility="protected">
                      <ownedParameter xmi:id="_q1qTIXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_q19OEHh5Ed-ECKyh8Dg6Wg" name="progressMonitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_q2G_EHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q2QwEHh5Ed-ECKyh8Dg6Wg" name="canExecute" visibility="public">
                      <ownedParameter xmi:id="_q2QwEXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q2Z6AHh5Ed-ECKyh8Dg6Wg" name="canUndo" visibility="public">
                      <ownedParameter xmi:id="_q2Z6AXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q2jrAHh5Ed-ECKyh8Dg6Wg" name="canRedo" visibility="public">
                      <ownedParameter xmi:id="_q2jrAXh5Ed-ECKyh8Dg6Wg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q2s08Hh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_q22l8Hh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_q3Jg4Hh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q3AW8Hh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q3TR4Hh5Ed-ECKyh8Dg6Wg" name="recomputeContexts" visibility="private">
                      <ownedComment xmi:id="_q3TR4Xh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Propagates the contexts from my wrapped command.
     </body>
                      </ownedComment>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q3dC4Hh5Ed-ECKyh8Dg6Wg" name="addContext" visibility="public">
                      <ownedComment xmi:id="_q3dC4Xh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Adds the context to my wrapped command.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q3dC4nh5Ed-ECKyh8Dg6Wg" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q3mM0Hh5Ed-ECKyh8Dg6Wg" name="removeContext" visibility="public">
                      <ownedComment xmi:id="_q3mM0Xh5Ed-ECKyh8Dg6Wg">
                        <body>
     * Removes the context from my wrapped command.
     </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q3v90Hh5Ed-ECKyh8Dg6Wg" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q35HwHh5Ed-ECKyh8Dg6Wg" name="dispose" visibility="public"/>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_q5PLkHh5Ed-ECKyh8Dg6Wg" name="SetBoundsCommand">
                    <ownedComment xmi:id="_q5PLkXh5Ed-ECKyh8Dg6Wg">
                      <body>
 * A command to set the bounds (location/size) of a &lt;code>View&lt;/code>
 * 
 * @author melaasar
 </body>
                    </ownedComment>
                    <generalization xmi:id="_q5Y8kHh5Ed-ECKyh8Dg6Wg" general="_huFo1HPSEd-NtftfyF3YZw"/>
                    <ownedAttribute xmi:id="_q5Y8kXh5Ed-ECKyh8Dg6Wg" name="adapter" visibility="private" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false"/>
                    <ownedAttribute xmi:id="_q5r3gHh5Ed-ECKyh8Dg6Wg" name="location" visibility="private" type="_pJLjMXh5Ed-ECKyh8Dg6Wg" isUnique="false"/>
                    <ownedAttribute xmi:id="_q5-ycXh5Ed-ECKyh8Dg6Wg" name="size" visibility="private" type="_q5-ycHh5Ed-ECKyh8Dg6Wg" isUnique="false"/>
                    <ownedOperation xmi:id="_q6RtYHh5Ed-ECKyh8Dg6Wg" name="doExecuteWithResult" visibility="protected">
                      <ownedParameter xmi:id="_q6RtYXh5Ed-ECKyh8Dg6Wg" type="_HLIlAnPGEd-bh5e9e7eOjw" direction="return"/>
                      <ownedParameter xmi:id="_q6beYHh5Ed-ECKyh8Dg6Wg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                      <ownedParameter xmi:id="_q6lPYHh5Ed-ECKyh8Dg6Wg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q6lPYXh5Ed-ECKyh8Dg6Wg" name="getAffectedFiles" visibility="public">
                      <ownedParameter xmi:id="_q6uZUHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_q7B7UHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q64KUHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Class" xmi:id="_q8hJEHh5Ed-ECKyh8Dg6Wg" name="SetViewMutabilityCommand">
                    <ownedComment xmi:id="_q8qTAHh5Ed-ECKyh8Dg6Wg">
                      <body>
 * Command that sets the view's mutability. if a view is Mutability state is used
 * by the Diagram Listener to decide if a view can move from the transient childern 
 * list of its container to the persisted list. so a mutable view will never be persisted
 * keep in mind that the mutability state of the view is a transient state so as soon as the 
 * model is closed and opened again all views will be immutable.
 * @author mhanner
 </body>
                    </ownedComment>
                    <generalization xmi:id="_q8qTAXh5Ed-ECKyh8Dg6Wg" general="_dahWcHc2Ed-96YWU42lBhw"/>
                    <ownedAttribute xmi:id="_q80EAHh5Ed-ECKyh8Dg6Wg" name="_viewAdapters" visibility="private" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_q891AHh5Ed-ECKyh8Dg6Wg">
                        <body> cached non-persisted views. </body>
                      </ownedComment>
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_q9Qv8Hh5Ed-ECKyh8Dg6Wg" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q9G-8Hh5Ed-ECKyh8Dg6Wg"/>
                    </ownedAttribute>
                    <ownedAttribute xmi:id="_q9Qv8Xh5Ed-ECKyh8Dg6Wg" name="_immutable" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                      <ownedComment xmi:id="_q9jq4Hh5Ed-ECKyh8Dg6Wg">
                        <body> immutable flag. </body>
                      </ownedComment>
                    </ownedAttribute>
                    <ownedOperation xmi:id="_q9jq4Xh5Ed-ECKyh8Dg6Wg" name="makeMutable" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_q9jq4nh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Convenience method returning a command to make the supplied views mutable.
	 * @param viewAdapters views to be associated with the command 
	 * @return &lt;code>SetViewMutabilityCommand&lt;/code>
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q92l0Hh5Ed-ECKyh8Dg6Wg" type="_q8hJEHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_q92l0Xh5Ed-ECKyh8Dg6Wg" name="viewAdapters" type="_QJNf43OxEd-nKvj-XTCBkg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_q-TRwHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q-AW0Hh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q-TRwXh5Ed-ECKyh8Dg6Wg" name="makeMutable" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_q-TRwnh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Convenience method returning a command to make the supplied view mutable.
	 * @param viewAdapter view to be associated with the command 
	 * @return &lt;code>SetViewMutabilityCommand&lt;/code>
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q-mzwHh5Ed-ECKyh8Dg6Wg" type="_q8hJEHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_q-v9sHh5Ed-ECKyh8Dg6Wg" name="viewAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q-5usHh5Ed-ECKyh8Dg6Wg" name="makeImmutable" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_q-5usXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Convenience method returning a command to make the supplied views immutable. 
	 * @param viewAdapters views to be associated with the command 
	 * @return &lt;code>SetViewMutabilityCommand&lt;/code>
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q_C4oHh5Ed-ECKyh8Dg6Wg" type="_q8hJEHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_q_MpoHh5Ed-ECKyh8Dg6Wg" name="viewAdapters" type="_QJNf43OxEd-nKvj-XTCBkg">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_q_WaoXh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_q_WaoHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q_fkkHh5Ed-ECKyh8Dg6Wg" name="makeImmutable" visibility="public" isStatic="true">
                      <ownedComment xmi:id="_q_fkkXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * Convenience method returning a command to make the supplied view immutable. 
	 * @param viewAdapter views to be associated with the command 
	 * @return &lt;code>SetViewMutabilityCommand&lt;/code>
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_q_zGkHh5Ed-ECKyh8Dg6Wg" type="_q8hJEHh5Ed-ECKyh8Dg6Wg" direction="return"/>
                      <ownedParameter xmi:id="_q_zGkXh5Ed-ECKyh8Dg6Wg" name="viewAdapter" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_q_8QgHh5Ed-ECKyh8Dg6Wg" name="getViewAdapters" visibility="protected">
                      <ownedComment xmi:id="_q_8QgXh5Ed-ECKyh8Dg6Wg">
                        <body>
	 * gets an unmodifiable copy of the cached view adapters. 
	 * @return view adapters
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_rAGBgHh5Ed-ECKyh8Dg6Wg" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rAY8cHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rAPLcHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_rAitcHh5Ed-ECKyh8Dg6Wg" name="execute" visibility="public"/>
                    <ownedOperation xmi:id="_rAitcXh5Ed-ECKyh8Dg6Wg" name="setMutability" visibility="private">
                      <ownedComment xmi:id="_rAitcnh5Ed-ECKyh8Dg6Wg">
                        <body> Set the mutability flag on all views. </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_rAr3YHh5Ed-ECKyh8Dg6Wg" name="immutable" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_rA1oYHh5Ed-ECKyh8Dg6Wg" name="getAffectedObjects" visibility="public">
                      <ownedComment xmi:id="_rA1oYXh5Ed-ECKyh8Dg6Wg">
                        <body> 
	 * Returns the view that would be affected if this
	 * command were executed, undone, or redone.
	 * @return views adapter Collection
	 </body>
                      </ownedComment>
                      <ownedParameter xmi:id="_rA_ZYHh5Ed-ECKyh8Dg6Wg" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rBSUUHh5Ed-ECKyh8Dg6Wg" value="*"/>
                        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rBIjUHh5Ed-ECKyh8Dg6Wg"/>
                      </ownedParameter>
                    </ownedOperation>
                    <ownedOperation xmi:id="_rBbeQHh5Ed-ECKyh8Dg6Wg" name="redo" visibility="public"/>
                    <ownedOperation xmi:id="_rBbeQXh5Ed-ECKyh8Dg6Wg" name="undo" visibility="public"/>
                  </packagedElement>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_osHzwHh5Ed-ECKyh8Dg6Wg" name="internal">
                  <packagedElement xmi:type="uml:Package" xmi:id="_osRkwHh5Ed-ECKyh8Dg6Wg" name="services">
                    <packagedElement xmi:type="uml:Package" xmi:id="_osRkwXh5Ed-ECKyh8Dg6Wg" name="layout">
                      <packagedElement xmi:type="uml:Class" xmi:id="_osRkwnh5Ed-ECKyh8Dg6Wg" name="LayoutNode"/>
                    </packagedElement>
                  </packagedElement>
                  <packagedElement xmi:type="uml:Package" xmi:id="_o_MgwHh5Ed-ECKyh8Dg6Wg" name="commands">
                    <packagedElement xmi:type="uml:Class" xmi:id="_o_WRwHh5Ed-ECKyh8Dg6Wg" name="ElementTypeLabelProvider"/>
                    <packagedElement xmi:type="uml:Class" xmi:id="_pzgSkHh5Ed-ECKyh8Dg6Wg" name="ClipboardCommand"/>
                  </packagedElement>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_otwygXh5Ed-ECKyh8Dg6Wg" name="editparts">
                  <packagedElement xmi:type="uml:Interface" xmi:id="_ot6jgHh5Ed-ECKyh8Dg6Wg" name="IGraphicalEditPart"/>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_p7ZqUHh5Ed-ECKyh8Dg6Wg" name="menus">
                  <packagedElement xmi:type="uml:Class" xmi:id="_p7ZqUXh5Ed-ECKyh8Dg6Wg" name="PopupMenu"/>
                </packagedElement>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_pKqw8Hh5Ed-ECKyh8Dg6Wg" name="core">
                <packagedElement xmi:type="uml:Package" xmi:id="_pKqw8Xh5Ed-ECKyh8Dg6Wg" name="preferences">
                  <packagedElement xmi:type="uml:Class" xmi:id="_pK0h8Hh5Ed-ECKyh8Dg6Wg" name="PreferencesHint"/>
                </packagedElement>
                <packagedElement xmi:type="uml:Package" xmi:id="_qzuZcXh5Ed-ECKyh8Dg6Wg" name="edithelpers">
                  <packagedElement xmi:type="uml:Class" xmi:id="_qz4KcHh5Ed-ECKyh8Dg6Wg" name="CreateElementRequestAdapter"/>
                </packagedElement>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_o6IakHh5Ed-ECKyh8Dg6Wg" name="notation">
              <packagedElement xmi:type="uml:Class" xmi:id="_o6IakXh5Ed-ECKyh8Dg6Wg" name="View"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_p2CCIHh5Ed-ECKyh8Dg6Wg" name="MeasurementUnit"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_p3OU8Hh5Ed-ECKyh8Dg6Wg" name="Node"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_p0i0YHh5Ed-ECKyh8Dg6Wg" name="draw2d">
              <packagedElement xmi:type="uml:Package" xmi:id="_p0i0YXh5Ed-ECKyh8Dg6Wg" name="ui">
                <packagedElement xmi:type="uml:Package" xmi:id="_p0i0Ynh5Ed-ECKyh8Dg6Wg" name="mapmode">
                  <packagedElement xmi:type="uml:Interface" xmi:id="_p0slYHh5Ed-ECKyh8Dg6Wg" name="IMapMode"/>
                </packagedElement>
              </packagedElement>
            </packagedElement>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_ofr8UHUuEd-R54hgjGwYvw" name="emf">
    <packagedElement xmi:type="uml:Package" xmi:id="_5f8UcHPSEd-NtftfyF3YZw" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_5f8UcXPSEd-NtftfyF3YZw" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_5f8UcnPSEd-NtftfyF3YZw" name="emf">
          <packagedElement xmi:type="uml:Package" xmi:id="_5gr7WHPSEd-NtftfyF3YZw" name="common">
            <packagedElement xmi:type="uml:Package" xmi:id="_5gr7WXPSEd-NtftfyF3YZw" name="command">
              <packagedElement xmi:type="uml:Interface" xmi:id="_vowe8HcqEd-96YWU42lBhw" name="Command">
                <ownedComment xmi:id="_vpNK4HcqEd-96YWU42lBhw">
                  <body>
 * An interface that every command is expected to support.
 * A command can be tested for executability, 
 * it can be executed, 
 * it can be tested for undoability, 
 * it can be undone, 
 * and can then be redone.
 * A command also provides access to a result collection, an affected-objects collection,
 * a label, and a description.
 *
 * &lt;p>
 * There are important constraints on the valid order in which the various methods may be invoked,
 * e.g., you cannot ask for the result before you've executed the command.
 * These constraints are documented with the various methods.
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_vpNK4XcqEd-96YWU42lBhw" name="canExecute">
                  <ownedComment xmi:id="_vpNK4ncqEd-96YWU42lBhw">
                    <body>
   * Returns whether the command is valid to &lt;code>execute&lt;/code>.
   * The {@link UnexecutableCommand#INSTANCE}.&lt;code>canExecute()&lt;/code> always returns &lt;code>false&lt;/code>.
   * This &lt;b>must&lt;/b> be called before calling &lt;code>execute&lt;/code>.
   * @return whether the command is valid to &lt;code>execute&lt;/code>.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpWU0HcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vpWU0XcqEd-96YWU42lBhw" name="execute">
                  <ownedComment xmi:id="_vpWU0ncqEd-96YWU42lBhw">
                    <body>
   * Performs the command activity required for the effect.
   * The effect of calling &lt;code>execute&lt;/code> when &lt;code>canExecute&lt;/code> returns &lt;code>false&lt;/code>, 
   * or when &lt;code>canExecute&lt;/code> hasn't been called, is undefined.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vpWU03cqEd-96YWU42lBhw" name="canUndo">
                  <ownedComment xmi:id="_vpWU1HcqEd-96YWU42lBhw">
                    <body>
   * Returns whether the command can be undone.
   * The result of calling this before &lt;code>execute&lt;/code> is well defined,
   * but the result of calling this before calling &lt;code>canExecute&lt;/code> is undefined, i.e.,
   * a command that returns &lt;code>false&lt;/code> for &lt;code>canExecute&lt;/code> may return &lt;code>true&lt;/code> for canUndo, 
   * even though that is a contradiction.
   * @return whether the command can be undone.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpWU1XcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vpWU1ncqEd-96YWU42lBhw" name="undo">
                  <ownedComment xmi:id="_vpWU13cqEd-96YWU42lBhw">
                    <body>
   * Performs the command activity required to &lt;code>undo&lt;/code> the effects of a preceding &lt;code>execute&lt;/code> (or &lt;code>redo&lt;/code>).
   * The effect, if any, of calling &lt;code>undo&lt;/code> before &lt;code>execute&lt;/code> or &lt;code>redo&lt;/code> have been called, 
   * or when canUndo returns &lt;code>false&lt;/code>, is undefined.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vpWU2HcqEd-96YWU42lBhw" name="redo">
                  <ownedComment xmi:id="_vpWU2XcqEd-96YWU42lBhw">
                    <body>
   * Performs the command activity required to &lt;code>redo&lt;/code> the effect after undoing the effect.
   * The effect, if any, of calling &lt;code>redo&lt;/code> before &lt;code>undo&lt;/code> is called is undefined.
   * Note that if you implement &lt;code>redo&lt;/code> to call &lt;code>execute&lt;/code> 
   * then any derived class will be restricted by that decision also.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vpWU2ncqEd-96YWU42lBhw" name="getResult">
                  <ownedComment xmi:id="_vpWU23cqEd-96YWU42lBhw">
                    <body>
   * Returns a collection of things which this command wishes to present as it's result.
   * The result of calling this before an &lt;code>execute&lt;/code> or &lt;code>redo&lt;/code>, or after an &lt;code>undo&lt;/code>, is undefined.
   * @return a collection of things which this command wishes to present as it's result.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpWU3HcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vpgF0HcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vpWU3XcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vpgF0XcqEd-96YWU42lBhw" name="getAffectedObjects">
                  <ownedComment xmi:id="_vpgF0ncqEd-96YWU42lBhw">
                    <body>
   * Returns the collection of things which this command wishes to present as the objects affected by the command.
   * Typically should could be used as the selection that should be highlighted to best illustrate the effect of the command.
   * The result of calling this before an &lt;code>execute&lt;/code>, &lt;code>redo&lt;/code>, or &lt;code>undo&lt;/code> is undefined.
   * The result may be different after an &lt;code>undo&lt;/code> than it is after an &lt;code>execute&lt;/code> or &lt;code>redo&lt;/code>,
   * but the result should be the same (equivalent) after either an &lt;code>execute&lt;/code> or &lt;code>redo&lt;/code>.
   * @return the collection of things which this command wishes to present as the objects affected by the command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpgF03cqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vpgF1XcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vpgF1HcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vpgF1ncqEd-96YWU42lBhw" name="getLabel">
                  <ownedComment xmi:id="_vpgF13cqEd-96YWU42lBhw">
                    <body>
   * Returns a string suitable to represent the label that identifies this command.
   * @return a string suitable to represent the label that identifies this command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpgF2HcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vpgF2XcqEd-96YWU42lBhw" name="getDescription">
                  <ownedComment xmi:id="_vpgF2ncqEd-96YWU42lBhw">
                    <body>
   * Returns a string suitable to help describe the effect of this command.
   * @return a string suitable to help describe the effect of this command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpp20HcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vpp20XcqEd-96YWU42lBhw" name="dispose">
                  <ownedComment xmi:id="_vpp20ncqEd-96YWU42lBhw">
                    <body>
   * Called to indicate that the command will never be used again.
   * Calling any other method after this one has undefined results.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vpp203cqEd-96YWU42lBhw" name="chain">
                  <ownedComment xmi:id="_vpp21HcqEd-96YWU42lBhw">
                    <body>
   * Returns a command that represents the composition of this command with the given command.
   * The resulting command may just be this, if this command is capable of composition.
   * Otherwise, it will be a new command created to compose the two.
   * &lt;p>
   * Instead of the following pattern of usage
   * &lt;pre>
   *   Command result = x;
   *   if (condition) result = result.chain(y);
   * &lt;/pre>
   * you should consider using a {@link org.eclipse.emf.common.command.CompoundCommand} 
   * and using {@link org.eclipse.emf.common.command.CompoundCommand#unwrap()} to optimize the result:
   * &lt;pre>
   *   CompoundCommand subcommands = new CompoundCommand();
   *   subcommands.append(x);
   *   if (condition) subcommands.append(y);
   *   Command result = subcommands.unwrap();
   * &lt;/pre>
   * This gives you more control over how the compound command composes it's result and affected objects.
   * @param command the command to chain.
   * @return a command that represents the composition of this command with the given command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vpp21XcqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_vpp21ncqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_vc_T0HcqEd-96YWU42lBhw" name="AbortExecutionException">
                <ownedComment xmi:id="_vc_T0XcqEd-96YWU42lBhw">
                  <body>
 * An exception thrown when a command's {@link Command#execute() execution} is to be silently aborted.
 * This is a signal to the command stack to behave as if {@link Command#canExecute() canExecute} returned &lt;code>false&lt;/code>.
 * Only a command that has not changed the state of the model should be aborted in this way.
 </body>
                </ownedComment>
                <generalization xmi:id="_vdSOwHcqEd-96YWU42lBhw" general="_vdIdwHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_vd4EoHcqEd-96YWU42lBhw" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" type="_vdu6sHcqEd-96YWU42lBhw" isUnique="false"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_vdIdwHcqEd-96YWU42lBhw" name="RuntimeException"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_vgkMQHcqEd-96YWU42lBhw" name="AbstractCommand" clientDependency="_vgtWMXcqEd-96YWU42lBhw" isAbstract="true">
                <ownedComment xmi:id="_vgtWMHcqEd-96YWU42lBhw">
                  <body>
 * An abstract implementation of a basic command.
 * Each derived class &lt;bold>must&lt;/bold> implement {@link Command#execute} and {@link Command#redo}, 
 * &lt;bold>must&lt;/bold> either implement {@link #undo} or implement {@link #canUndo} to return false,
 * and &lt;bold>must&lt;/bold> either override {@link #prepare} (this is the preferred approach) or can override {@link #canExecute} directly.
 *
 * &lt;p>
 * It is very convenient to use prepare, as it is guaranteed to be called only once just before canExecute is to be tested.
 * It can be implemented to create any additional commands that need to be executed, 
 * and the result it yields becomes the permanent cached return value for canExecute.
 *
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_vgtWMncqEd-96YWU42lBhw" name="isPrepared" visibility="protected" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vg3HMHcqEd-96YWU42lBhw">
                    <body>
   * Keeps track of whether prepare needs to be called.
   * It is tested in {@link #canExecute} so that {@link #prepare} is called exactly once to ready the command for execution.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vg3HMXcqEd-96YWU42lBhw" name="isExecutable" visibility="protected" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vg3HMncqEd-96YWU42lBhw">
                    <body>
   * Keeps track of whether the command is executable.
   * It is set in {@link #canExecute} to the result of calling {@link #prepare}.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vhARIHcqEd-96YWU42lBhw" name="description" visibility="protected" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vhARIXcqEd-96YWU42lBhw">
                    <body>
   * Holds a short textual description of the command 
   * as returned by {@link #getDescription} and set by {@link #setDescription}.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vhARIncqEd-96YWU42lBhw" name="label" visibility="protected" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vhARI3cqEd-96YWU42lBhw">
                    <body>
   * Holds the label of the command as returned by {@link #getLabel} and set by {@link #setLabel}.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <nestedClassifier xmi:type="uml:Interface" xmi:id="_viDaBXcqEd-96YWU42lBhw" name="NonDirtying">
                  <ownedComment xmi:id="_viDaBncqEd-96YWU42lBhw">
                    <body>
   * A marker interface implemented by commands that don't dirty the model.
   </body>
                  </ownedComment>
                </nestedClassifier>
                <ownedOperation xmi:id="_vhARJHcqEd-96YWU42lBhw" name="prepare" visibility="protected">
                  <ownedComment xmi:id="_vhARJXcqEd-96YWU42lBhw">
                    <body>
   * Called at most once in {@link #canExecute} to give the command an opportunity to ready itself for execution.
   * The returned value is stored in {@link #canExecute}.
   * In other words, you can override this method to initialize 
   * and to yield a cached value for the all subsequent calls to canExecute.
   * @return whether the command is executable.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vhARJncqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vhKCIHcqEd-96YWU42lBhw" name="canExecute" visibility="public">
                  <ownedComment xmi:id="_vhKCIXcqEd-96YWU42lBhw">
                    <body>
   * Calls {@link #prepare}, 
   * caches the result in {@link #isExecutable}, 
   * and sets {@link #isPrepared} to &lt;code>true&lt;/code>; 
   * from then on, it will yield the value of isExecutable.
   * @return whether the command can execute.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vhKCIncqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vhKCI3cqEd-96YWU42lBhw" name="canUndo" visibility="public">
                  <ownedComment xmi:id="_vhKCJHcqEd-96YWU42lBhw">
                    <body>
   * Returns &lt;code>true&lt;/code> because most command should be undoable.
   * @return &lt;code>true&lt;/code>.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vhKCJXcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vhKCJncqEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_vhKCJ3cqEd-96YWU42lBhw">
                    <body>
   * Throws a runtime exception.
   * @exception UnsupportedOperationException always.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vhKCKHcqEd-96YWU42lBhw" name="getResult" visibility="public">
                  <ownedComment xmi:id="_vhKCKXcqEd-96YWU42lBhw">
                    <body>
   * Returns an empty list.
   * @return an empty list.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vhKCK3cqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhTzIXcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhTzIHcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vhTzIncqEd-96YWU42lBhw" name="getAffectedObjects" visibility="public">
                  <ownedComment xmi:id="_vhTzI3cqEd-96YWU42lBhw">
                    <body>
   * Returns an empty list.
   * @return an empty list.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vhTzJHcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vhTzJncqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vhTzJXcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vhTzJ3cqEd-96YWU42lBhw" name="getLabel" visibility="public">
                  <ownedParameter xmi:id="_vhTzKHcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vh5pAHcqEd-96YWU42lBhw" name="setLabel" visibility="public">
                  <ownedComment xmi:id="_vh5pAXcqEd-96YWU42lBhw">
                    <body>
   * Sets the label after construction.
   * @param label the new label.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vh5pAncqEd-96YWU42lBhw" name="label" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vh5pA3cqEd-96YWU42lBhw" name="getDescription" visibility="public">
                  <ownedParameter xmi:id="_vh5pBHcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vh5pBXcqEd-96YWU42lBhw" name="setDescription" visibility="public">
                  <ownedComment xmi:id="_vh5pBncqEd-96YWU42lBhw">
                    <body>
   * Sets the description after construction.
   * @param description the new description.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vh5pB3cqEd-96YWU42lBhw" name="description" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vh5pCHcqEd-96YWU42lBhw" name="chain" visibility="public">
                  <ownedComment xmi:id="_vh5pCXcqEd-96YWU42lBhw">
                    <body>
   * Creates a new compound command, containing this command and the given command,
   * that delegates chain to {@link CompoundCommand#append}.
   * @param command the command to chain with this one.
   * @return a new chained compound command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vh5pCncqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_viDaAHcqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_viDaAXcqEd-96YWU42lBhw" name="dispose" visibility="public"/>
                <ownedOperation xmi:id="_viDaAncqEd-96YWU42lBhw" name="toString" visibility="public">
                  <ownedComment xmi:id="_viDaA3cqEd-96YWU42lBhw">
                    <body>
   * Returns an abbreviated name using this object's own class' name, without package qualification,
   * followed by a space separated list of &lt;tt>field:value&lt;/tt> pairs.
   * @return string representation.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_viDaBHcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_vgtWMXcqEd-96YWU42lBhw" name="AbstractCommand extends Command" supplier="_vowe8HcqEd-96YWU42lBhw" client="_vgkMQHcqEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_vmE-YHcqEd-96YWU42lBhw" name="BasicCommandStack" clientDependency="_vmE-Y3cqEd-96YWU42lBhw">
                <ownedComment xmi:id="_vmE-YXcqEd-96YWU42lBhw">
                  <body>
 * A basic and obvious implementation of an undoable stack of commands.
 * See {@link Command} for more details about the command methods that this implementation uses.
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_vmE-ZHcqEd-96YWU42lBhw" name="commandList" visibility="protected" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vmE-ZXcqEd-96YWU42lBhw">
                    <body>
   * The list of commands.
   </body>
                  </ownedComment>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vmE-Z3cqEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vmE-ZncqEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vmE-aHcqEd-96YWU42lBhw" name="top" visibility="protected" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vmOIUHcqEd-96YWU42lBhw">
                    <body>
   * The current position within the list from which the next execute, undo, or redo, will be performed. 
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vmOIUXcqEd-96YWU42lBhw" name="mostRecentCommand" visibility="protected" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vmOIUncqEd-96YWU42lBhw">
                    <body>
   * The command most recently executed, undone, or redone.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vmOIVHcqEd-96YWU42lBhw" name="listeners" visibility="protected" type="_vsyDUHcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vmOIVXcqEd-96YWU42lBhw">
                    <body>
   * The {@link CommandStackListener}s.
   </body>
                  </ownedComment>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vmX5UXcqEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vmX5UHcqEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vmX5UncqEd-96YWU42lBhw" name="saveIndex" visibility="protected" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vmX5U3cqEd-96YWU42lBhw">
                    <body>
   * The value of {@link #top} when {@link #saveIsDone} is called.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_vmX5VHcqEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedParameter xmi:id="_vmhqUHcqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmhqUXcqEd-96YWU42lBhw" name="canUndo" visibility="public">
                  <ownedParameter xmi:id="_vmhqUncqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmhqU3cqEd-96YWU42lBhw" name="undo" visibility="public"/>
                <ownedOperation xmi:id="_vmhqVHcqEd-96YWU42lBhw" name="canRedo" visibility="public">
                  <ownedParameter xmi:id="_vmhqVXcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmhqVncqEd-96YWU42lBhw" name="redo" visibility="public"/>
                <ownedOperation xmi:id="_vmhqV3cqEd-96YWU42lBhw" name="flush" visibility="public"/>
                <ownedOperation xmi:id="_vmhqWHcqEd-96YWU42lBhw" name="getUndoCommand" visibility="public">
                  <ownedParameter xmi:id="_vmhqWXcqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmq0QHcqEd-96YWU42lBhw" name="getRedoCommand" visibility="public">
                  <ownedParameter xmi:id="_vmq0QXcqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmq0QncqEd-96YWU42lBhw" name="getMostRecentCommand" visibility="public">
                  <ownedParameter xmi:id="_vmq0Q3cqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmq0RHcqEd-96YWU42lBhw" name="addCommandStackListener" visibility="public">
                  <ownedParameter xmi:id="_vmq0RXcqEd-96YWU42lBhw" name="listener" type="_vsyDUHcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vmq0RncqEd-96YWU42lBhw" name="removeCommandStackListener" visibility="public">
                  <ownedParameter xmi:id="_vm0lQHcqEd-96YWU42lBhw" name="listener" type="_vsyDUHcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vm0lQXcqEd-96YWU42lBhw" name="notifyListeners" visibility="protected">
                  <ownedComment xmi:id="_vm0lQncqEd-96YWU42lBhw">
                    <body> 
   * This is called to ensure that {@link CommandStackListener#commandStackChanged} is called for each listener.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vm0lRHcqEd-96YWU42lBhw" name="handleError" visibility="protected">
                  <ownedComment xmi:id="_vm0lRXcqEd-96YWU42lBhw">
                    <body>
   * Handles an exception thrown during command execution by logging it with the plugin.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vm0lRncqEd-96YWU42lBhw" name="exception" type="_vm0lQ3cqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vm0lR3cqEd-96YWU42lBhw" name="saveIsDone" visibility="public">
                  <ownedComment xmi:id="_vm0lSHcqEd-96YWU42lBhw">
                    <body>
   * Called after a save has been successfully performed.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vm0lSXcqEd-96YWU42lBhw" name="isSaveNeeded" visibility="public">
                  <ownedComment xmi:id="_vm0lSncqEd-96YWU42lBhw">
                    <body>
   * Returns whether the model has changes since {@link #saveIsDone} was call the last.
   * @return whether the model has changes since &lt;code>saveIsDone&lt;/code> was call the last.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vm9vMHcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_vmE-YncqEd-96YWU42lBhw" name="CommandStack">
                <ownedComment xmi:id="_vq2JoHcqEd-96YWU42lBhw">
                  <body>
 * A simple and obvious interface for an undoable stack of commands with a listener.
 * See {@link Command} for more details about the command methods that this implementation uses
 * and {@link CommandStackListener} for details about the listener.
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_vq2JoXcqEd-96YWU42lBhw" name="execute">
                  <ownedComment xmi:id="_vq2JoncqEd-96YWU42lBhw">
                    <body>
   * Clears any redoable commands not yet redone, adds the command, and then executes the command.
   * @param command the command to execute.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vq2Jo3cqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vq2JpHcqEd-96YWU42lBhw" name="canUndo">
                  <ownedComment xmi:id="_vq2JpXcqEd-96YWU42lBhw">
                    <body>
   * Returns whether the top command on the stack can be undone.
   * @return whether the top command on the stack can be undone.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vq_TkHcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vq_TkXcqEd-96YWU42lBhw" name="undo">
                  <ownedComment xmi:id="_vq_TkncqEd-96YWU42lBhw">
                    <body>
   * Moves the top of the stack down, undoing what was formerly the top command.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vq_Tk3cqEd-96YWU42lBhw" name="canRedo">
                  <ownedComment xmi:id="_vq_TlHcqEd-96YWU42lBhw">
                    <body>
   * Returns whether there are commands past the top of the stack that can be redone.
   * @return whether there are commands past the top of the stack that can be redone.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vq_TlXcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vq_TlncqEd-96YWU42lBhw" name="getUndoCommand" visibility="public">
                  <ownedComment xmi:id="_vq_Tl3cqEd-96YWU42lBhw">
                    <body>
   * Returns the command that will be undone if {@link #undo} is called.
   * @return the command that will be undone if {@link #undo} is called.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vq_TmHcqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vq_TmXcqEd-96YWU42lBhw" name="getRedoCommand" visibility="public">
                  <ownedComment xmi:id="_vq_TmncqEd-96YWU42lBhw">
                    <body>
   * Returns the command that will be redone if {@link #redo} is called.
   * @return the command that will be redone if {@link #redo} is called.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vrS1kHcqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vrS1kXcqEd-96YWU42lBhw" name="getMostRecentCommand" visibility="public">
                  <ownedComment xmi:id="_vrS1kncqEd-96YWU42lBhw">
                    <body>
   * Returns the command most recently executed, undone, or redone.
   * @return the command most recently executed, undone, or redone.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vrS1k3cqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vrS1lHcqEd-96YWU42lBhw" name="redo">
                  <ownedComment xmi:id="_vrS1lXcqEd-96YWU42lBhw">
                    <body>
   * Moves the top of the stack up, redoing the new top command.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vrS1lncqEd-96YWU42lBhw" name="flush">
                  <ownedComment xmi:id="_vrS1l3cqEd-96YWU42lBhw">
                    <body>
   * Disposes all the commands in the stack.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vrS1mHcqEd-96YWU42lBhw" name="addCommandStackListener">
                  <ownedComment xmi:id="_vrS1mXcqEd-96YWU42lBhw">
                    <body>
   * Adds a listener to the command stack, which will be notified whenever a command has been processed on the stack.
   * @param listener the listener to add.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vrS1mncqEd-96YWU42lBhw" name="listener" type="_vsyDUHcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vrb_gHcqEd-96YWU42lBhw" name="removeCommandStackListener">
                  <ownedComment xmi:id="_vrb_gXcqEd-96YWU42lBhw">
                    <body>
   * Removes a listener from the command stack.
   * @param listener the listener to remove.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vrb_gncqEd-96YWU42lBhw" name="listener" type="_vsyDUHcqEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_vmE-Y3cqEd-96YWU42lBhw" name="BasicCommandStack extends CommandStack" supplier="_vmE-YncqEd-96YWU42lBhw" client="_vmE-YHcqEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_vsyDUHcqEd-96YWU42lBhw" name="CommandStackListener">
                <ownedComment xmi:id="_vsyDUXcqEd-96YWU42lBhw">
                  <body>
 * A listener to a {@link org.eclipse.emf.common.command.CommandStack}.
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_vsyDU3cqEd-96YWU42lBhw" name="commandStackChanged">
                  <ownedComment xmi:id="_vsyDVHcqEd-96YWU42lBhw">
                    <body>
   * Called when the {@link org.eclipse.emf.common.command.CommandStack}'s state has changed.
   * @param event the event.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vsyDVXcqEd-96YWU42lBhw" name="event" type="_vsyDUncqEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_vthqMHcqEd-96YWU42lBhw" name="CommandWrapper">
                <ownedComment xmi:id="_vthqMXcqEd-96YWU42lBhw">
                  <body>
 * A command that wraps another command.
 * All the {@link Command} methods are delegated to the wrapped command.
 *
 * &lt;p>
 * There are two typical usage patterns.  
 * One typical use for this command is to modify the behaviour of a command that you can't subclass, i.e., a decorator pattern:
 *&lt;pre>
 *   Command decoratedCommand =
 *     new CommandWrapper(someOtherCommand)
 *     {
 *       public void execute()
 *       {
 *         doSomethingBeforeExecution();
 *         super.execute();
 *         doSomethingAfterExecution();
 *       }
 *       public Collection getResult()
 *       {
 *         return someOtherResult();
 *       }
 *     };
 *&lt;/pre>
 * The other typical use is to act as a proxy for a command who's creation is delayed:
 *&lt;pre>
 *   Command proxyCommand =
 *     new CommandWrapper()
 *     {
 *       public Command createCommand()
 *       {
 *         return createACommandSomehow();
 *       }
 *     };
 *&lt;/pre>
 </body>
                </ownedComment>
                <generalization xmi:id="_vthqMncqEd-96YWU42lBhw" general="_vgkMQHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_vthqM3cqEd-96YWU42lBhw" name="command" visibility="protected" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vthqNHcqEd-96YWU42lBhw">
                    <body>
   * The command for which this is a proxy or decorator.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_vthqNXcqEd-96YWU42lBhw" name="getCommand" visibility="public">
                  <ownedComment xmi:id="_vthqNncqEd-96YWU42lBhw">
                    <body>
   * Returns the command for which this is a proxy or decorator.
   * This may be &lt;code>null&lt;/code> before {@link #createCommand} is called.
   * @return the command for which this is a proxy or decorator.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vthqN3cqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vtrbMHcqEd-96YWU42lBhw" name="createCommand" visibility="protected">
                  <ownedComment xmi:id="_vtrbMXcqEd-96YWU42lBhw">
                    <body>
   * Create the command being proxied.
   * This implementation just return &lt;code>null&lt;/code>.
   * It is called by {@link #prepare}.
   * @return the command being proxied.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vtrbMncqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vtrbM3cqEd-96YWU42lBhw" name="prepare" visibility="protected">
                  <ownedComment xmi:id="_vtrbNHcqEd-96YWU42lBhw">
                    <body>
   * Returns whether the command can execute.
   * This implementation creates the command being proxied using {@link #createCommand},
   * if the command wasn't given in the constructor.
   * @return whether the command can execute.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vtrbNXcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vt0lIHcqEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_vt0lIXcqEd-96YWU42lBhw">
                    <body>
   * Delegates to the execute method of the command.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vt0lIncqEd-96YWU42lBhw" name="canUndo" visibility="public">
                  <ownedComment xmi:id="_vt0lI3cqEd-96YWU42lBhw">
                    <body>
   * Delegates to the canUndo method of the command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vt0lJHcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vt0lJXcqEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_vt0lJncqEd-96YWU42lBhw">
                    <body>
   * Delegates to the undo method of the command.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vt0lJ3cqEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_vt0lKHcqEd-96YWU42lBhw">
                    <body>
   * Delegates to the redo method of the command.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vt0lKXcqEd-96YWU42lBhw" name="getResult" visibility="public">
                  <ownedComment xmi:id="_vt0lKncqEd-96YWU42lBhw">
                    <body>
   * Delegates to the getResult method of the command.
   * @return the result.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vt-WIHcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vt-WIncqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vt-WIXcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vt-WI3cqEd-96YWU42lBhw" name="getAffectedObjects" visibility="public">
                  <ownedComment xmi:id="_vt-WJHcqEd-96YWU42lBhw">
                    <body>
   * Delegates to the getAffectedObjects method of the command.
   * @return the result.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vt-WJXcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vt-WJ3cqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vt-WJncqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vuHgEHcqEd-96YWU42lBhw" name="getLabel" visibility="public">
                  <ownedComment xmi:id="_vuHgEXcqEd-96YWU42lBhw">
                    <body>
   * Delegates to the getLabel method of the command.
   * @return the label.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vuHgEncqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vuHgE3cqEd-96YWU42lBhw" name="getDescription" visibility="public">
                  <ownedComment xmi:id="_vuHgFHcqEd-96YWU42lBhw">
                    <body>
   * Delegates to the getDescription method of the command.
   * @return the description.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vuHgFXcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vuRREHcqEd-96YWU42lBhw" name="dispose" visibility="public">
                  <ownedComment xmi:id="_vuRREXcqEd-96YWU42lBhw">
                    <body>
   * Delegates to the dispose method of the command.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vuRREncqEd-96YWU42lBhw" name="toString" visibility="public">
                  <ownedParameter xmi:id="_vuRRE3cqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_vwW7wHcqEd-96YWU42lBhw" name="CompoundCommand">
                <ownedComment xmi:id="_vwW7wXcqEd-96YWU42lBhw">
                  <body>
 * A command that comprises a sequence of subcommands.
 * Derived classes can control the way results are accumulated from the individual commands;
 * the default behaviour is to return the result of the last command.
 </body>
                </ownedComment>
                <generalization xmi:id="_vwW7wncqEd-96YWU42lBhw" general="_vgkMQHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_vwW7w3cqEd-96YWU42lBhw" name="commandList" visibility="protected" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vwW7xHcqEd-96YWU42lBhw">
                    <body>
   * The list of subcommands.
   </body>
                  </ownedComment>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vwgFsHcqEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vwW7xXcqEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vwgFsXcqEd-96YWU42lBhw" name="LAST_COMMAND_ALL" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vwgFsncqEd-96YWU42lBhw">
                    <body>
   * When {@link #resultIndex} is set to this, 
   * {@link #getResult} and {@link #getAffectedObjects} are delegated to the last command, if any, in the list.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vwp2sHcqEd-96YWU42lBhw" name="MERGE_COMMAND_ALL" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vwp2sXcqEd-96YWU42lBhw">
                    <body>
   * When {@link #resultIndex} is set to this, 
   * {@link #getResult} and {@link #getAffectedObjects}
   * are set to the result of merging the corresponding collection of each command in the list.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vwp2sncqEd-96YWU42lBhw" name="resultIndex" visibility="protected" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_vwznsHcqEd-96YWU42lBhw">
                    <body>
   * The index of the command whose result and affected objects are forwarded.
   * Negative values have special meaning, as defined by the static constants.
   * A value of -1 indicates that the last command in the list should be used.
   * We could have more special behaviours implemented for other negative values.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_vwznsXcqEd-96YWU42lBhw" name="isEmpty" visibility="public">
                  <ownedComment xmi:id="_vwznsncqEd-96YWU42lBhw">
                    <body>
   * Returns whether there are commands in the list.
   * @return whether there are commands in the list.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vwzns3cqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vwzntHcqEd-96YWU42lBhw" name="getCommandList" visibility="public">
                  <ownedComment xmi:id="_vwzntXcqEd-96YWU42lBhw">
                    <body>
   * Returns an unmodifiable view of the commands in the list.
   * @return an unmodifiable view of the commands in the list.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vwzntncqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vw8xoHcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vwznt3cqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vw8xoXcqEd-96YWU42lBhw" name="getResultIndex" visibility="public">
                  <ownedComment xmi:id="_vw8xoncqEd-96YWU42lBhw">
                    <body>
   * Returns the index of the command whose result and affected objects are forwarded.
   * Negative values have special meaning, as defined by the static constants.
   * @return the index of the command whose result and affected objects are forwarded.
   * @see #LAST_COMMAND_ALL
   * @see #MERGE_COMMAND_ALL
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vw8xo3cqEd-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vw8xpHcqEd-96YWU42lBhw" name="prepare" visibility="protected">
                  <ownedComment xmi:id="_vw8xpXcqEd-96YWU42lBhw">
                    <body>
   * Returns whether all the commands can execute so that {@link #isExecutable} can be cached.
   * An empty command list causes &lt;code>false&lt;/code> to be returned.
   * @return whether all the commands can execute.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vw8xpncqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vw8xp3cqEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_vw8xqHcqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#execute} for each command in the list.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vxGioHcqEd-96YWU42lBhw" name="canUndo" visibility="public">
                  <ownedComment xmi:id="_vxGioXcqEd-96YWU42lBhw">
                    <body>
   * Returns &lt;code>false&lt;/code> if any of the commands return &lt;code>false&lt;/code> for {@link Command#canUndo}.
   * @return &lt;code>false&lt;/code> if any of the commands return &lt;code>false&lt;/code> for &lt;code>canUndo&lt;/code>.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxGioncqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vxGio3cqEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_vxGipHcqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#undo} for each command in the list, in reverse order.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vxGipXcqEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_vxGipncqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#redo} for each command in the list.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vxGip3cqEd-96YWU42lBhw" name="getResult" visibility="public">
                  <ownedComment xmi:id="_vxGiqHcqEd-96YWU42lBhw">
                    <body>
   * Determines the result by composing the results of the commands in the list;
   * this is affected by the setting of {@link #resultIndex}.
   * @return the result.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxGiqXcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vxQToXcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vxQToHcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vxQToncqEd-96YWU42lBhw" name="getMergedResultCollection" visibility="protected">
                  <ownedComment xmi:id="_vxQTo3cqEd-96YWU42lBhw">
                    <body>
   * Returns the merged collection of all command results.
   * @return the merged collection of all command results.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxQTpHcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vxZdkHcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vxQTpXcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vxZdkXcqEd-96YWU42lBhw" name="getAffectedObjects" visibility="public">
                  <ownedComment xmi:id="_vxZdkncqEd-96YWU42lBhw">
                    <body>
   * Determines the affected objects by composing the affected objects of the commands in the list;
   * this is affected by the setting of {@link #resultIndex}.
   * @return the affected objects.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxZdk3cqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vxjOkXcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vxjOkHcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vxjOkncqEd-96YWU42lBhw" name="getMergedAffectedObjectsCollection" visibility="protected">
                  <ownedComment xmi:id="_vxjOk3cqEd-96YWU42lBhw">
                    <body>
   * Returns the merged collection of all command affected objects.
   * @return the merged collection of all command affected objects.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxjOlHcqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vxjOlncqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vxjOlXcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_vxjOl3cqEd-96YWU42lBhw" name="getLabel" visibility="public">
                  <ownedComment xmi:id="_vxsYgHcqEd-96YWU42lBhw">
                    <body>
   * Determines the label by composing the labels of the commands in the list;
   * this is affected by the setting of {@link #resultIndex}.
   * @return the label.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxsYgXcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vxsYgncqEd-96YWU42lBhw" name="getDescription" visibility="public">
                  <ownedComment xmi:id="_vxsYg3cqEd-96YWU42lBhw">
                    <body>
   * Determines the description by composing the descriptions of the commands in the list;
   * this is affected by the setting of {@link #resultIndex}.
   * @return the description.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxsYhHcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vxsYhXcqEd-96YWU42lBhw" name="append" visibility="public">
                  <ownedComment xmi:id="_vxsYhncqEd-96YWU42lBhw">
                    <body>
   * Adds a command to this compound command's list of commands.
   * @param command the command to append.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vxsYh3cqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vx2JgHcqEd-96YWU42lBhw" name="appendAndExecute" visibility="public">
                  <ownedComment xmi:id="_vx2JgXcqEd-96YWU42lBhw">
                    <body>
   * Checks if the command can execute; 
   * if so, it is executed, appended to the list, and true is returned,
   * if not, it is just disposed and false is returned.
   * A typical use for this is to execute commands created during the execution of another command, e.g.,
   * &lt;pre>
   *   class MyCommand extends CommandBase
   *   {
   *     protected Command subcommand;
   *
   *     //...
   *
   *     public void execute()
   *     {
   *       // ...
   *       Compound subcommands = new CompoundCommand();
   *       subcommands.appendAndExecute(new AddCommand(...));
   *       if (condition) subcommands.appendAndExecute(new AddCommand(...));
   *       subcommand = subcommands.unwrap();
   *     }
   *
   *     public void undo()
   *     {
   *       // ...
   *       subcommand.undo();
   *     }
   *
   *     public void redo()
   *     {
   *       // ...
   *       subcommand.redo();
   *     }
   *
   *     public void dispose()
   *     {
   *       // ...
   *       if (subcommand != null)
   *      {
   *         subcommand.dispose();
   *       }
   *     }
   *   }
   * &lt;/pre>
   * Another use is in an execute override of compound command itself:
   * &lt;pre>
   *   class MyCommand extends CompoundCommand
   *   {
   *     public void execute()
   *     {
   *       // ...
   *       appendAndExecute(new AddCommand(...));
   *       if (condition) appendAndExecute(new AddCommand(...));
   *     }
   *   }
   * &lt;/pre>
   * Note that appending commands will modify what getResult and getAffectedObjects return,
   * so you may want to set the resultIndex flag.
   * @param command the command.
   * @return whether the command was successfully executed and appended.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vx2JgncqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_vx2Jg3cqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vx2JhHcqEd-96YWU42lBhw" name="appendIfCanExecute" visibility="public">
                  <ownedComment xmi:id="_vx2JhXcqEd-96YWU42lBhw">
                    <body>
   * Adds a command to this compound command's the list of commands and returns &lt;code>true&lt;/code>, 
   * if &lt;code>command.{@link org.eclipse.emf.common.command.Command#canExecute() canExecute()}&lt;/code> returns true;
   * otherwise, it simply calls &lt;code>command.{@link org.eclipse.emf.common.command.Command#dispose() dispose()}&lt;/code> 
   * and returns &lt;code>false&lt;/code>.
   * @param command the command.
   * @return whether the command was executed and appended.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vx_6gHcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_vx_6gXcqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vx_6gncqEd-96YWU42lBhw" name="dispose" visibility="public">
                  <ownedComment xmi:id="_vx_6g3cqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#dispose} for each command in the list.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vx_6hHcqEd-96YWU42lBhw" name="unwrap" visibility="public">
                  <ownedComment xmi:id="_vx_6hXcqEd-96YWU42lBhw">
                    <body>
   * Returns one of three things: 
   * {@link org.eclipse.emf.common.command.UnexecutableCommand#INSTANCE}, if there are no commands,
   * the one command, if there is exactly one command,
   * or &lt;code>this&lt;/code>, if there are multiple commands;
   * this command is {@link #dispose}d in the first two cases.
   * You should only unwrap a compound command if you created it for that purpose, e.g.,
   * &lt;pre>
   *   CompoundCommand subcommands = new CompoundCommand();
   *   subcommands.append(x);
   *   if (condition) subcommands.append(y);
   *   Command result = subcommands.unwrap();
   * &lt;/pre>
   * is a good way to create an efficient accumulated result.
   * @return the unwrapped command.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vx_6hncqEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vyJEcHcqEd-96YWU42lBhw" name="toString" visibility="public">
                  <ownedParameter xmi:id="_vyJEcXcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_vzo5QHcqEd-96YWU42lBhw" name="IdentityCommand">
                <ownedComment xmi:id="_vzo5QXcqEd-96YWU42lBhw">
                  <body>
 * A command that always produces the same result.
 </body>
                </ownedComment>
                <generalization xmi:id="_vzo5QncqEd-96YWU42lBhw" general="_vgkMQHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_vzo5Q3cqEd-96YWU42lBhw" name="INSTANCE" visibility="public" isLeaf="true" isStatic="true" type="_vzo5QHcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vzyDMHcqEd-96YWU42lBhw">
                    <body>
   * An empty instance of this object.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_vzyDMXcqEd-96YWU42lBhw" name="result" visibility="protected" type="_vhKCKncqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_vzyDMncqEd-96YWU42lBhw">
                    <body>
   * Keeps track of the result returned from {@link #getResult}.
   </body>
                  </ownedComment>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_vz70MHcqEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_vzyDM3cqEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedOperation xmi:id="_vz70MXcqEd-96YWU42lBhw" name="canExecute" visibility="public">
                  <ownedComment xmi:id="_vz70MncqEd-96YWU42lBhw">
                    <body>
   * Returns &lt;code>true&lt;/code>.
   * @return &lt;code>true&lt;/code>.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_vz70M3cqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_vz70NHcqEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_vz70NXcqEd-96YWU42lBhw">
                    <body>
   * Do nothing.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vz70NncqEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_vz70N3cqEd-96YWU42lBhw">
                    <body>
   * Do nothing.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_vz70OHcqEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_v0E-IHcqEd-96YWU42lBhw">
                    <body>
   * Do nothing.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_v0E-IXcqEd-96YWU42lBhw" name="getLabel" visibility="public">
                  <ownedParameter xmi:id="_v0E-IncqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_v0E-I3cqEd-96YWU42lBhw" name="getDescription" visibility="public">
                  <ownedParameter xmi:id="_v0E-JHcqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_v0E-JXcqEd-96YWU42lBhw" name="getResult" visibility="public">
                  <ownedComment xmi:id="_v0E-JncqEd-96YWU42lBhw">
                    <body>
   * Return the identity result.
   * @return the identity result.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_v0E-J3cqEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_v0OvIXcqEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_v0OvIHcqEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_v1RQ8HcqEd-96YWU42lBhw" name="StrictCompoundCommand">
                <ownedComment xmi:id="_v1RQ8XcqEd-96YWU42lBhw">
                  <body>
 * A composite command which assumes that later commands in the list 
 * may depend on the results and side-effects of earlier commands in the list.
 * Because of this, it must implement {@link Command#canExecute} more carefully,
 * i.e., in order to determine canExecute for the composite, it doesn't simply test each command.
 * It tests the first command to see if it can execute;
 * then, if there is another command in the list, it checks if the first command can undo and then goes ahead and executes it!
 * This process is repeated until the last command that is not followed by another, which then determines the final result.
 * (For efficiency, when this processing gets to the last command, that command is tested for canUndo too and that result is cached.)
 * All the commands that have been executed are then undone, if {@link #isPessimistic} is &lt;code>true&lt;/code>; 
 * by default it's &lt;code>false&lt;/code>.
 *
 * &lt;p>
 * It is important for all but the last command to have no visible side-effect!
 * Multiple commands with visible side-effects must be composed into a single command using just a {@link CompoundCommand}
 * and that composite could be the last command of a strict composite.
 *
 * &lt;p>
 * Here is an example of how this can be used in conjunction with a {@link CommandWrapper}.
 * &lt;pre>
 *   Command strictCompoundCommand = new StrictCompoundCommand();
 *   Command copyCommand = new CopyCommand(...);
 *   strictCompoundCommand.add(copyCommand);
 *
 *   Command addCommand =
 *     new CommandWrapper()
 *     {
 *       public Command createCommand()
 *       {
 *         new AddCommand(parent, copyCommand.getResult()); 
 *       }
 *     };
 *   strictCompoundCommand.append(addCommand);
 * &lt;/pre>
 * Here the add command won't know which command to create until it has the result of the copy command.
 * The proxy makes sure the creation of the add command is deferred and the strict composite ensures that execution dependencies are met.
 </body>
                </ownedComment>
                <generalization xmi:id="_v1RQ8ncqEd-96YWU42lBhw" general="_vwW7wHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_v1bB8HcqEd-96YWU42lBhw" name="isUndoable" visibility="protected" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_v1bB8XcqEd-96YWU42lBhw">
                    <body>
   * The result for {@link Command#canUndo}.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_v1bB8ncqEd-96YWU42lBhw" name="isPessimistic" visibility="protected" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_v1ky8HcqEd-96YWU42lBhw">
                    <body>
   * Whether commands that have been tentatively executed need to be undone.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_v1ky8XcqEd-96YWU42lBhw" name="rightMostExecutedCommandIndex" visibility="protected" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_v1ky8ncqEd-96YWU42lBhw">
                    <body>
   * Remember to call redo instead of execute for any command at or before this index in the list.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_v1ky83cqEd-96YWU42lBhw" name="prepare" visibility="protected">
                  <ownedComment xmi:id="_v1ky9HcqEd-96YWU42lBhw">
                    <body>
   * Returns &lt;code>false&lt;/code> if any command on the list returns &lt;code>false&lt;/code> for {@link Command#canExecute},
   * or if some command before the last one can't be undone and hence we can't test all the commands for executability.
   * @return whether the command can execute.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_v1t84HcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_v1t84XcqEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_v1t84ncqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#execute} for each command in the list, 
   * but makes sure to call redo for any commands that were previously executed to compute canExecute.
   * In the case that {@link #isPessimistic} is false, only the last command will be executed
   * since the others will have been executed but not undone during {@link #prepare}.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_v1t843cqEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_v1t85HcqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#undo} for each command in the list.
   * In the case that {@link #isPessimistic} is false, only the last command will be undone
   * since the others will have been executed and not undo during {@link #prepare}.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_v1t85XcqEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_v1t85ncqEd-96YWU42lBhw">
                    <body>
   * Calls {@link Command#redo} for each command in the list.
   * In the case that {@link #isPessimistic} is false, only the last command will be redone
   * since the others will have been executed and not undo during {@link #prepare}.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_v1t853cqEd-96YWU42lBhw" name="appendAndExecute" visibility="public">
                  <ownedComment xmi:id="_v1t86HcqEd-96YWU42lBhw">
                    <body>
   * Checks if the command can execute; 
   * if so, it is executed, appended to the list, and &lt;code>true&lt;/code> is returned,
   * if not, it is just disposed and &lt;code>false&lt;/code> is returned.
   * A typical use for this is to execute commands created during the execution of another command, e.g.,
   * &lt;pre>
   *   class MyCommand extends AbstractCommand
   *   {
   *     protected Command subcommand;
   *
   *     //...
   *
   *     public void execute()
   *     {
   *       // ...
   *       StrictCompoundCommand subcommands = new StrictCompoundCommand();
   *       subcommands.appendAndExecute(new AddCommand(...));
   *       if (condition) subcommands.appendAndExecute(new AddCommand(...));
   *       subcommand = subcommands.unwrap();
   *     }
   *
   *     public void undo()
   *     {
   *       // ...
   *       subcommand.undo();
   *     }
   *
   *     public void redo()
   *     {
   *       // ...
   *       subcommand.redo();
   *     }
   *
   *     public void dispose()
   *     {
   *       // ...
   *       if (subcommand != null)
   *      {
   *         subcommand.dispose();
   *       }
   *     }
   *   }
   * &lt;/pre>
   * @return whether the command was successfully executed and appended.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_v13t4HcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_v13t4XcqEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_v13t4ncqEd-96YWU42lBhw" name="toString" visibility="public">
                  <ownedParameter xmi:id="_v13t43cqEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_v2UZ0HcqEd-96YWU42lBhw" name="UnexecutableCommand">
                <ownedComment xmi:id="_v2djwHcqEd-96YWU42lBhw">
                  <body>
 * A singleton {@link UnexecutableCommand#INSTANCE} that cannot execute.
 </body>
                </ownedComment>
                <generalization xmi:id="_v2djwXcqEd-96YWU42lBhw" general="_vgkMQHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_v2djwncqEd-96YWU42lBhw" name="INSTANCE" visibility="public" isLeaf="true" isStatic="true" type="_v2UZ0HcqEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_v2djw3cqEd-96YWU42lBhw">
                    <body>
   * The one instance of this object.
   </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_v2djxHcqEd-96YWU42lBhw" name="canExecute" visibility="public">
                  <ownedComment xmi:id="_v2djxXcqEd-96YWU42lBhw">
                    <body>
   * Returns &lt;code>false&lt;/code>.
   * @return &lt;code>false&lt;/code>.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_v2nUwHcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_v2nUwXcqEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_v2nUwncqEd-96YWU42lBhw">
                    <body>
   * Throws an exception if it should ever be called.
   * @exception UnsupportedOperationException always.
   </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_v2nUw3cqEd-96YWU42lBhw" name="canUndo" visibility="public">
                  <ownedComment xmi:id="_v2nUxHcqEd-96YWU42lBhw">
                    <body>
   * Returns &lt;code>false&lt;/code>.
   * @return &lt;code>false&lt;/code>.
   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_v2nUxXcqEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_v2nUxncqEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_v2nUx3cqEd-96YWU42lBhw">
                    <body>
   * Throws an exception if it should ever be called.
   * @exception UnsupportedOperationException always.
   </body>
                  </ownedComment>
                </ownedOperation>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_zp5RxHctEd-96YWU42lBhw" name="notify">
              <packagedElement xmi:type="uml:Class" xmi:id="_zp5RxXctEd-96YWU42lBhw" name="Notification"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9HzhMXcuEd-96YWU42lBhw" name="Notifier"/>
              <packagedElement xmi:type="uml:Package" xmi:id="_9yk8g3cuEd-96YWU42lBhw" name="impl">
                <packagedElement xmi:type="uml:Class" xmi:id="_9yuGcHcuEd-96YWU42lBhw" name="AdapterImpl"/>
              </packagedElement>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_huPZ13PSEd-NtftfyF3YZw" name="ecore">
            <packagedElement xmi:type="uml:Class" xmi:id="_huPZ2HPSEd-NtftfyF3YZw" name="EObject"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_zsR3YHctEd-96YWU42lBhw" name="EStructuralFeature"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_zskyUHctEd-96YWU42lBhw" name="EClassifier"/>
            <packagedElement xmi:type="uml:Package" xmi:id="_0WmmwXctEd-96YWU42lBhw" name="resource">
              <packagedElement xmi:type="uml:Class" xmi:id="_0WmmwnctEd-96YWU42lBhw" name="Resource"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_00QMEHctEd-96YWU42lBhw" name="ResourceSet"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_0w-OkXctEd-96YWU42lBhw" name="change">
              <packagedElement xmi:type="uml:Interface" xmi:id="_0w-OknctEd-96YWU42lBhw" name="ChangeDescription"/>
              <packagedElement xmi:type="uml:Package" xmi:id="_9Gw_YXcuEd-96YWU42lBhw" name="util">
                <packagedElement xmi:type="uml:Class" xmi:id="_9Gw_YncuEd-96YWU42lBhw" name="ChangeRecorder"/>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_dQNUoHh6Ed-ECKyh8Dg6Wg" name="EReference"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_dSvrQHh6Ed-ECKyh8Dg6Wg" name="EClass"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_husFw3PSEd-NtftfyF3YZw" name="transaction">
            <packagedElement xmi:type="uml:Interface" xmi:id="_0l8qUHctEd-96YWU42lBhw" name="Transaction">
              <ownedComment xmi:id="_0mGbUHctEd-96YWU42lBhw">
                <body>
 * Specification of a transaction in a {@link TransactionalEditingDomain}.  All
 * reading and writing of data in a &lt;code>TransactionalEditingDomain&lt;/code> is
 * performed in the context of a transaction.
 * &lt;p>
 * This interface is not intended to be implemented by clients.  It is used
 * internally and by frameworks extending this API.  It is mostly of use to
 * {@link ResourceSetListener}s to find out the state of a transaction in the
 * event call-backs.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see TransactionalEditingDomain
 * @see TransactionalCommandStack
 * @see ResourceSetListener
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_0mPlQHctEd-96YWU42lBhw" name="OPTION_NO_NOTIFICATIONS" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0mPlQXctEd-96YWU42lBhw">
                  <body>
	 * Option to suppress the post-commit event upon completion of the
	 * transaction.  This does not suppress the pre-commit triggers.
	 * &lt;p>
	 * The value is a {@link Boolean}; the default is {@link Boolean#FALSE}.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0mPlQnctEd-96YWU42lBhw" name="OPTION_NO_TRIGGERS" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0mZWQHctEd-96YWU42lBhw">
                  <body>
	 * Option to suppress the pre-commit event that implements triggers.
	 * This does not suppress the post-commit event.
	 * &lt;p>
	 * The value is a {@link Boolean}; the default is {@link Boolean#FALSE}.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0mZWQXctEd-96YWU42lBhw" name="OPTION_NO_VALIDATION" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0migMHctEd-96YWU42lBhw">
                  <body>
	 * Option to suppress validation.  Note that it does not suppress triggers,
	 * so a transaction could still roll back on commit if a pre-commit
	 * listener throws.
	 * &lt;p>
	 * The value is a {@link Boolean}; the default is {@link Boolean#FALSE}.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0migMXctEd-96YWU42lBhw" name="OPTION_NO_UNDO" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0msRMHctEd-96YWU42lBhw">
                  <body>
	 * Option to suppress undo/redo recording.  This has two effects:  it
	 * prevents rollback of the transaction, as this requires the undo
	 * information.  It also prevents undo/redo of any {@link RecordingCommand}s
	 * executed in the scope of this transaction.
	 * &lt;p>
	 * The value is a {@link Boolean}; the default is {@link Boolean#FALSE}.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0msRMXctEd-96YWU42lBhw" name="OPTION_UNPROTECTED" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0msRMnctEd-96YWU42lBhw">
                  <body>
	 * Option to enable a read/write transaction in the scope of a (nesting)
	 * read-only transaction.  Because this option deliberately violates the
	 * read-write exclusion mechanism for model integrity, this option also
	 * suppresses undo recording, triggers, and validation.  It does not
	 * suppress post-commit events.
	 * &lt;p>
	 * The value is a {@link Boolean}; the default is {@link Boolean#FALSE}.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0msRM3ctEd-96YWU42lBhw" name="OPTION_IS_UNDO_REDO_TRANSACTION" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0msRNHctEd-96YWU42lBhw">
                  <body>
     * An informational option that tags the transaction as a transaction that
     * is performing the undo or redo of a command.
     * &lt;p>
     * The value is a {@link Boolean}; the default is {@link Boolean#FALSE}.
     * &lt;/p>&lt;p>
     * &lt;b>Note&lt;/b> that this option should not be applied by clients of the
     * transaction API.  Clients may only check to see whether a transaction
     * has this option, e.g., in a
     * {@linkplain ResourceSetListener#resourceSetChanged post-commit listener}.
     * &lt;/p>
     * 
     * @since 1.1
     </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0m2CMHctEd-96YWU42lBhw" name="OPTION_VALIDATE_EDIT" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0m2CMXctEd-96YWU42lBhw">
                  <body>
     * &lt;p>
     * Option indicating that a transaction is to validate-edit the resource
     * that it has modified when it commits, and to roll back if any resources
     * are not modifiable.
     * &lt;/p>&lt;p>
     * The value is either a {@link Boolean} indicating whether to validate or
     * not, or an instance of the {@link ValidateEditSupport} interface that
     * provides a custom validate-edit implementation.
     * &lt;/p>
     * 
     * @see ValidateEditSupport
     * @see #OPTION_VALIDATE_EDIT_CONTEXT
     * 
     * @since 1.2
     </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0m2CMnctEd-96YWU42lBhw" name="OPTION_VALIDATE_EDIT_CONTEXT" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0m_MIHctEd-96YWU42lBhw">
                  <body>
     * The context object to use when validating edit.  This is usually a
     * &lt;tt>org.eclipse.swt.widgets.Shell&lt;/tt> providing a UI context for
     * interaction with the user.
     * 
     * @see #OPTION_VALIDATE_EDIT
     * 
     * @since 1.2
     </body>
                </ownedComment>
              </ownedAttribute>
              <ownedOperation xmi:id="_0m_MIXctEd-96YWU42lBhw" name="getEditingDomain">
                <ownedComment xmi:id="_0m_MInctEd-96YWU42lBhw">
                  <body>
	 * Queries the editing domain in which I am transacting.  Note that this
	 * is available also before I start and after I close.
	 * 
	 * @return my editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0m_MI3ctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0m_MJHctEd-96YWU42lBhw" name="getParent">
                <ownedComment xmi:id="_0m_MJXctEd-96YWU42lBhw">
                  <body>
	 * My parent transaction, if any.  The thread that owns an editing domain's
	 * active transaction can create nested transactions simply by starting
	 * new ones.  Nested transactions commit differently from top-level
	 * transactions:  although they send
	 * {@link ResourceSetListener#transactionAboutToCommit(ResourceSetChangeEvent) pre-commit}
	 * events, they do not send post-commit events, nor are they validated.
	 * Validation is performed only by the top-level transaction to validate
	 * all changes made in its scope, and only the top-level transaction then
	 * can send the post-commit event.  Nested transactions can roll back their
	 * changes without affecting their parent transactions.
	 * &lt;p>
	 * Transactions can nest as follows:
	 * &lt;/p>
	 * &lt;ul>
	 *   &lt;li>read-only transactions can be nested in read-only or
	 *       read/write transactions&lt;/li>
	 *   &lt;li>read/write transactions can only be nested in read/write
	 *       transactions&lt;/li>
	 * &lt;/ul>
	 * @return my parent transaction
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0m_MJnctEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0m_MJ3ctEd-96YWU42lBhw" name="getOwner">
                <ownedComment xmi:id="_0m_MKHctEd-96YWU42lBhw">
                  <body>
	 * Queries the thread that owns me.  Only this thread is allowed to read
	 * or write (in the case of read/write transactions) the editing domain's
	 * resource set while I am open.
	 * 
	 * @return my owning thread
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0nI9IXctEd-96YWU42lBhw" type="_0nI9IHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0nI9InctEd-96YWU42lBhw" name="isReadOnly">
                <ownedComment xmi:id="_0nI9I3ctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I am a read-only transaction.  Even my owning thread
	 * is not permitted to make changes to the model if I am read-only.
	 * 
	 * @return &lt;code>true&lt;/code> if I am read-only; &lt;code>false&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0nI9JHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0nI9JXctEd-96YWU42lBhw" name="getOptions">
                <ownedComment xmi:id="_0nI9JnctEd-96YWU42lBhw">
                  <body>
	 * Obtains the special options with which I was created.  The options
	 * (map keys) are defined by the {@link #OPTION_NO_NOTIFICATIONS Transaction}
	 * interface.
	 * 
	 * @return an unmodifiable view of my options
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0nI9J3ctEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0nSuIHctEd-96YWU42lBhw" name="isActive">
                <ownedComment xmi:id="_0nSuIXctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I am active.  I am active after I have started and
	 * before I have closed (committed or rolled back).
	 * 
	 * @return whether I am active
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0nSuInctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0nSuI3ctEd-96YWU42lBhw" name="yield">
                <ownedComment xmi:id="_0nSuJHctEd-96YWU42lBhw">
                  <body>
	 * Temporarily yields access to another read-only transaction.  The
	 * {@link TransactionalEditingDomain} supports any number of pseudo-concurrent
	 * read-only transactions.  Transactions that are expected to be
	 * long-running should yield frequently, as a task running in a progress
	 * monitor is expected to check for cancellation frequently.  However, there
	 * is a higher cost (in time) associated with yielding, so it should not
	 * be overdone.
	 * &lt;p>
	 * Only read-only transactions may yield, and only the transaction that
	 * is currently active in the editing domain may yield.  The yielding
	 * transaction may be nested, but not within a read/write transaction
	 * at any depth.
	 * &lt;/p>
	 * &lt;p>
	 * Upon yielding, some other read-only transaction that is attempting to
	 * start or to return from a yield will take control of the editing domain.
	 * Control is never yielded to a read/write transaction (not even to a
	 * read-only transaction nested in a read/write) because this would
	 * introduce dirty reads (transactions reading uncommitted changes).
	 * If there are no other read-only transactions to receive the transfer of
	 * control, then the call returns immediately.  Otherwise, control is
	 * transferred in FIFO fashion to waiting transactions.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0nSuJXctEd-96YWU42lBhw" name="commit">
                <ownedComment xmi:id="_0nSuJnctEd-96YWU42lBhw">
                  <body>
	 * Attempts to commit the transaction.  The transaction may only commit if
	 * it is the currently active transaction in the editing domain.  After the
	 * transaction has committed, it is no longer active and cannot be started
	 * again.
	 * &lt;p>
	 * Commit proceeds in three phases:  pre-commit events and triggers,
	 * validation, and the post-commit events.
	 * &lt;/p>
	 * &lt;p>
	 * Pre-commit notifications are sent to the editing domain's registered
	 * {@link ResourceSetListener}s to inform them that the transaction is
	 * committing.  If any listener throws a {@link RollbackException}, then
	 * the transaction is rolled back and the exception is propagated to the
	 * caller.  Any trigger commands returned by pre-commit listeners are
	 * executed after all listeners are invoked, in a nested transaction.
	 * This nested transaction, then, follows the commit protocol to send out
	 * pre-commit notifications again.  This process continues until no more
	 * trigger commands are executed or some listener causes rollback.
	 * &lt;/p>
	 * &lt;p>
	 * After all pre-commit processing completes, the transaction is validated.
	 * Validation checks all of the notifications received from the model
	 * during the transaction (including any nested transactions, esp. those
	 * that executed triggers).  If the validation yields an error status (or
	 * more severe), then the transaction is rolled back, throwing a
	 * {@link RollbackException} with the validation status.
	 * &lt;/p>
	 * &lt;p>
	 * The final phase, if validation passes, is to send out the post-commit
	 * event to the resource set listeners.  This event includes all of the
	 * notifications received during the transaction, including triggers.
	 * Note that, because these listeners can read the model, they may cause
	 * further notifications (by resolving proxies, loading resources, etc.).
	 * Listeners are invoked in a nested read-only transaction, so it will
	 * also commit and send out a post-commit event if necessary with additional
	 * notifications.
	 * &lt;/p>
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that even a {@link #isReadOnly() read-only} transaction can
	 * roll back.  This should only occur, however, if it is corrupted by a
	 * concurrent modification by another thread, which means that invalid data
	 * could have been read.
	 * &lt;/p>
	 * 
	 * @throws RollbackException if a listener or validation caused the
	 *     transaction to roll back instead of committing successfully
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0nb4EHctEd-96YWU42lBhw" name="rollback">
                <ownedComment xmi:id="_0nb4EXctEd-96YWU42lBhw">
                  <body>
	 * Rolls back the transaction, undoing all of the pending model changes.
	 * Once it has rolled back, the transaction is no longer active and cannot
	 * be started again.  No events are sent when the transaction rolls back;
	 * to listeners it appears that nothing ever happened.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0nb4EnctEd-96YWU42lBhw" name="getChangeDescription">
                <ownedComment xmi:id="_0nb4E3ctEd-96YWU42lBhw">
                  <body>
	 * Obtains the change description summarizing the changes made to the model
	 * during the execution of the transaction.  The change description must
	 * not be used until after the transaction has successfully committed.
	 * If the transaction rolls back, then it has no change description.
	 * 
	 * @return the change description, or &lt;code>null&lt;/code> if the transaction
	 *     rolled back or is still {@link #isActive() active}
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0nb4FHctEd-96YWU42lBhw" type="_0wrToHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0nlpEHctEd-96YWU42lBhw" name="getStatus" visibility="public">
                <ownedComment xmi:id="_0nlpEXctEd-96YWU42lBhw">
                  <body>
	 * Obtains the status of the transaction.  This may provide warning or
	 * or error messages from validation (after I have committed/rolled back) or
	 * other sources, or it might be OK.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that while I am still active, my status is usually OK.
	 * It may not be OK if I have been aborted, in which case I will
	 * roll back on attempt to commit.
	 * &lt;/p>
	 * 
	 * @return my status, most interesting after I have closed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0nlpEnctEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_0nlpE3ctEd-96YWU42lBhw" name="OptionMetadata">
                <ownedComment xmi:id="_0nlpFHctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * An interface that allows clients to query certain meta-data about
	 * transaction options.
	 * &lt;/p>
	 * &lt;p>
	 * This interface is not intended to be implemented by clients. Extend the
	 * {@link BasicTransactionOptionMetadata} class, instead.
	 * &lt;/p>
	 * 
	 * @noimplement This interface is not intended to be implemented by clients.
	 * @noextend This interface is not intended to be extended by clients.
	 * 
	 * @author Christian W. Damus (cdamus)
	 * 
	 * @since 1.3
	 * 
	 * @see BasicTransactionOptionMetadata
	 * @see Registry
	 </body>
                </ownedComment>
                <ownedOperation xmi:id="_0nlpFXctEd-96YWU42lBhw" name="getOption">
                  <ownedComment xmi:id="_0nlpFnctEd-96YWU42lBhw">
                    <body>
		 * Obtains the key of the option that I describe. This is the key that
		 * would be used in the options map of a transaction.
		 * 
		 * @return my option
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0nlpF3ctEd-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0nuzAHctEd-96YWU42lBhw" name="isTag">
                  <ownedComment xmi:id="_0nuzAXctEd-96YWU42lBhw">
                    <body>
		 * &lt;p>
		 * Queries whether the option is a tag, meaning that it adorns a
		 * transaction with client-specific information but that it does not
		 * otherwise affect the semantics (or behaviour) of the transaction.
		 * &lt;/p>
		 * &lt;p>
		 * Unrecognized options are assumed to be tags, because a transaction
		 * would not be able to interpret their meaning.
		 * &lt;/p>
		 * 
		 * @return &lt;code>true&lt;/code> if the option key is a tag option or if it
		 *         is not recognized by this meta-data instance;
		 *         &lt;code>false&lt;/code> if it is recognized and is known not to be
		 *         a tag
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0nuzAnctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0nuzA3ctEd-96YWU42lBhw" name="isHereditary">
                  <ownedComment xmi:id="_0nuzBHctEd-96YWU42lBhw">
                    <body>
		 * &lt;p>
		 * Queries whether the option is inherited by nested transactions.
		 * &lt;/p>
		 * &lt;p>
		 * Unrecognized options are assumed to be inherited.
		 * &lt;/p>
		 * 
		 * @return &lt;code>true&lt;/code> if the option is inherited or if it is not
		 *         recognized; &lt;code>false&lt;/code> if it is not inherited
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0nuzBXctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0nuzBnctEd-96YWU42lBhw" name="getType">
                  <ownedComment xmi:id="_0nuzB3ctEd-96YWU42lBhw">
                    <body>
		 * &lt;p>
		 * Obtains the type value of an option.
		 * &lt;/p>
		 * &lt;p>
		 * The type of an unrecognized option is assumed to be {@link Object}.
		 * &lt;/p>
		 * 
		 * @return the default value of the option, or &lt;code>Object&lt;/code> if it
		 *         is not known
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0n4kAHctEd-96YWU42lBhw" type="_zsR3ZXctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0n4kAXctEd-96YWU42lBhw" name="getDefaultValue">
                  <ownedComment xmi:id="_0n4kAnctEd-96YWU42lBhw">
                    <body>
		 * &lt;p>
		 * Obtains the default value of an option.
		 * &lt;/p>
		 * &lt;p>
		 * The default value of an unrecognized option is assumed to be
		 * &lt;code>null&lt;/code>.
		 * &lt;/p>
		 * 
		 * @return the default value of the option, or &lt;code>null&lt;/code> if it
		 *         is not known
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0n4kA3ctEd-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0n4kBHctEd-96YWU42lBhw" name="getValue">
                  <ownedComment xmi:id="_0n4kBXctEd-96YWU42lBhw">
                    <body>
		 * Gets the value (implicit/default or explicit) of my option in the
		 * specified map.
		 * 
		 * @param options
		 *            an options map
		 * 
		 * @return my value in the map
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0n4kBnctEd-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_0oCVAHctEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0oCVAXctEd-96YWU42lBhw" name="isSet">
                  <ownedComment xmi:id="_0oCVAnctEd-96YWU42lBhw">
                    <body>
		 * Queries whether the specified map has a setting for my option.
		 * 
		 * @param options
		 *            an options map
		 * @return whether it has a setting for my option
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0oCVA3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_0oCVBHctEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0oLe8HctEd-96YWU42lBhw" name="sameSetting">
                  <ownedComment xmi:id="_0oLe8XctEd-96YWU42lBhw">
                    <body>
		 * Queries whether the specified options maps have the same value of my
		 * option, whether that be implicit or explicit. That is, this method
		 * accounts for default values and such complex cases as the
		 * {@link Transaction#OPTION_VALIDATE_EDIT} in which values of two
		 * different types may mean the same thing.
		 * 
		 * @param options1
		 *            an options map
		 * @param options2
		 *            another options map
		 * 
		 * @return whether the two maps have the same setting of my option
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0oLe8nctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_0ooK4HctEd-96YWU42lBhw" name="options1" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                  <ownedParameter xmi:id="_0ooK4XctEd-96YWU42lBhw" name="options2" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0ooK4nctEd-96YWU42lBhw" name="inherit">
                  <ownedComment xmi:id="_0ooK43ctEd-96YWU42lBhw">
                    <body>
		 * Updates the options map of a child transaction to inherit the setting
		 * in a parent transaction, if it is a hereditary option and the child
		 * does not already have a setting for it.
		 * 
		 * @param parentOptions
		 *            the options map to inherit a value from. It is conceivable
		 *            that inheritance of an option may depend on more than one
		 *            option in this parent map
		 * @param childOptions
		 *            the map that is to inherit the option setting
		 * @param force
		 *            whether to inherit the option anyway despite that it is
		 *            not hereditary. This is used for application of default
		 *            options, and can be ignored by the implementor if
		 *            necessary. Also, clients must not use this parameter to
		 *            attempt to override an existing child setting; a
		 *            well-behaved option will not do that
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0ooK5HctEd-96YWU42lBhw" name="parentOptions" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                  <ownedParameter xmi:id="_0ox74HctEd-96YWU42lBhw" name="childOptions" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                  <ownedParameter xmi:id="_0ox74XctEd-96YWU42lBhw" name="force" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <nestedClassifier xmi:type="uml:Interface" xmi:id="_0ox74nctEd-96YWU42lBhw" name="Registry">
                  <ownedComment xmi:id="_0ox743ctEd-96YWU42lBhw">
                    <body>
		 * &lt;p>
		 * A registry of metadata describing transaction options.  The default
		 * implementation of the {@link TransactionalEditingDomain} interface
		 * provides a transaction option registry as an adapter.  Access to the
		 * registry is thread-safe.
		 * &lt;/p>
		 * &lt;p>
		 * This interface is not intended to be implemented by clients.
		 * &lt;/p>
		 * 
		 * @noimplement This interface is not intended to be implemented by
		 *              clients.
		 * @noextend This interface is not intended to be extended by clients.
		 * 
		 * @author Christian W. Damus (cdamus)
		 * 
		 * @since 1.3
		 </body>
                  </ownedComment>
                  <ownedAttribute xmi:id="_0o7F0HctEd-96YWU42lBhw" name="INSTANCE" type="_0ox74nctEd-96YWU42lBhw" isUnique="false">
                    <ownedComment xmi:id="_0o7F0XctEd-96YWU42lBhw">
                      <body>
			 * The shared transaction option metadata registry.
			 </body>
                    </ownedComment>
                  </ownedAttribute>
                  <ownedOperation xmi:id="_0o7F0nctEd-96YWU42lBhw" name="getOptionMetadata">
                    <ownedComment xmi:id="_0o7F03ctEd-96YWU42lBhw">
                      <body>
			 * Obtains a metadata object describing the specified transaction
			 * option. For unrecognized options, a default meta-data is provided
			 * that gives reasonable answers.
			 * 
			 * @param option
			 *            an option key
			 * @return the option meta-data (never &lt;code>null&lt;/code>)
			 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_0o7F1HctEd-96YWU42lBhw" type="_0nlpE3ctEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_0o7F1XctEd-96YWU42lBhw" name="option" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                  </ownedOperation>
                </nestedClassifier>
              </nestedClassifier>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_5gGFcHPSEd-NtftfyF3YZw" name="impl">
              <packagedElement xmi:type="uml:Interface" xmi:id="_8wkF4HcuEd-96YWU42lBhw" name="InternalTransactionalEditingDomain">
                <ownedComment xmi:id="_8w3A0HcuEd-96YWU42lBhw">
                  <body>
 * Internal interface that must be provided by any implementation of the public
 * {@link TransactionalEditingDomain} API, in order to function correctly in the transactional
 * editing domain framework.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_8w3A0XcuEd-96YWU42lBhw" general="_0y6IQHctEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_8w3A0ncuEd-96YWU42lBhw" name="startTransaction">
                  <ownedComment xmi:id="_8w3A03cuEd-96YWU42lBhw">
                    <body>
	 * Creates and starts a new transaction.  The current thread is blocked
	 * until I grant it exclusive access to my resource set.
	 * 
	 * @param readOnly &lt;code>true&lt;/code> if the transaction is intended only
	 *     to read the resource set; &lt;code>false&lt;/code> if it will modify it
	 * @param options the options to apply to the transaction (as specified by
	 *     the {@link TransactionalCommandStack} interface
	 *     
	 * @return the newly started transaction
	 * 
	 * @throws InterruptedException if the current thread is interrupted while
	 *     waiting for the transaction to start
	 * @throws IllegalArgumentException if the current thread does not
	 *     {@link Transaction#getOwner() own} the transaction that it wants
	 *     to start or if it is attempting to start a transaction in an
	 *     inappropriate context
	 *     
	 * @see #activate(InternalTransaction)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8w3A1HcuEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_8xAx0HcuEd-96YWU42lBhw" name="readOnly" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_8xAx0XcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xAx0ncuEd-96YWU42lBhw" name="getActiveTransaction">
                  <ownedComment xmi:id="_8xAx03cuEd-96YWU42lBhw">
                    <body>
	 * Obtains the transaction that currently has access to me, and whose
	 * thread of execution is active.
	 * 
	 * @return my active transaction, or &lt;code>null&lt;/code> if no transaction
	 *     is currently active
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xJ7wHcuEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xJ7wXcuEd-96YWU42lBhw" name="activate">
                  <ownedComment xmi:id="_8xJ7wncuEd-96YWU42lBhw">
                    <body>
	 * Activates (starts) the specified transaction.  The current thread is
	 * blocked until the transaction is activated, at which point it will be
	 * my {@linkplain #getActiveTransaction() active transaction} until it either
	 * yields (in the case of a read-only transaction) or closes.
	 * &lt;p>
	 * Note that only the thread that owns a transaction may activate it.  Also,
	 * a nested read-write transaction cannot be activated if its parent
	 * transaction is read-only, unless the read-write transaction has the
	 * {@linkplain Transaction#OPTION_UNPROTECTED 'unprotected' option}.
	 * &lt;/p>
	 * 
	 * @param tx the transaction to activate
	 * 
	 * @throws InterruptedException if the current thread is interrupted while
	 *     waiting for me to activate its transaction
	 * @throws IllegalArgumentException if the current thread does not
	 *     {@linkplain Transaction#getOwner() own} the transaction that it wants
	 *     to activate or if it is attempting to activate a transaction in an
	 *     inappropriate context
	 * 
	 * @see #getActiveTransaction()
	 * @see TransactionalEditingDomain#yield()
	 * @see #startTransaction(boolean, Map)
	 * @see #deactivate(InternalTransaction)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xJ7w3cuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xJ7xHcuEd-96YWU42lBhw" name="precommit">
                  <ownedComment xmi:id="_8xTswHcuEd-96YWU42lBhw">
                    <body>
	 * Performs the pre-commit notifications and processing of trigger comamnds.
	 * This method must be called at the beginning of the
	 * {@linkplain Transaction#commit() commit} of a read/write transaction (not a
	 * read-only transaction), unless it has the
	 * {@linkplain Transaction#OPTION_NO_TRIGGERS 'no triggers' option}.
	 * 
	 * @param tx the transaction that is being committed
	 * 
	 * @throws RollbackException if any of the pre-commit listeners forces
	 *     rollback of the transaction.  The caller must honour this rollback
	 *     request by actually {@linkplain Transaction#rollback() rolling back}
	 *     the transaction
	 * 
	 * @see Transaction#commit()
	 * @see Transaction#rollback()
	 * @see ResourceSetListener#transactionAboutToCommit(org.eclipse.emf.transaction.ResourceSetChangeEvent)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xTswXcuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xTswncuEd-96YWU42lBhw" name="deactivate">
                  <ownedComment xmi:id="_8xTsw3cuEd-96YWU42lBhw">
                    <body>
	 * Deactivates the specified transaction.  After this method completes, the
	 * transaction is no longer my
	 * {@link #getActiveTransaction() active transaction}.
	 * &lt;p>
	 * The current thread must own the transaction that it is attempting to
	 * deactivate and this transaction must currently be my active transaction.
	 * &lt;/p>
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that a transaction &lt;em>must&lt;/em> ensure that this method is
	 * called when it closes, either by commit or by rollback, and at most once.
	 * &lt;/p>
	 *   
	 * @param tx the transaction to deactivate
	 * 
	 * @throws IllegalArgumentException if either the transaction is not the
	 *     active transaction, or the current thread does not own it
	 *     
	 * @see #activate(InternalTransaction)
	 * @see Transaction#commit()
	 * @see Transaction#rollback()
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xddwHcuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xddwXcuEd-96YWU42lBhw" name="getChangeRecorder">
                  <ownedComment xmi:id="_8xddwncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the change recorder that I use to track changes in my resource
	 * set.  Transactions are expected to use this change recorder as follows:
	 * &lt;ul>
	 *   &lt;li>Start recording a fresh change description on 
	 *       {@linkplain InternalTransaction#start() starting} and
	 *       {@linkplain InternalTransaction#resume(org.eclipse.emf.transaction.TransactionChangeDescription) resuming}&lt;/li>
	 *   &lt;li>End recording (storing the change description) on
	 *       {@linkplain Transaction#commit() committing} and
	 *       {@linkplain InternalTransaction#pause() pausing}&lt;/li>
	 *   &lt;li>End recording (applying the change description) on
	 *       {@linkplain Transaction#rollback() rolling back}&lt;/li>
	 * &lt;/ul>
	 * 
	 * @return my change recorder
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xddxHcuEd-96YWU42lBhw" type="_8xddw3cuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xmnsHcuEd-96YWU42lBhw" name="getValidator">
                  <ownedComment xmi:id="_8xmnsXcuEd-96YWU42lBhw">
                    <body>
	 * Gets the validator that transactions should use to validate themselves
	 * upon committing.  A transaction must ask the validator to validate after
	 * performing the pre-commit phase (if needed), unless it has the
	 * {@linkplain Transaction#OPTION_NO_VALIDATION 'no validation' option}.
	 * 
	 * @return my transaction validator
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xmns3cuEd-96YWU42lBhw" type="_9XwBsHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xmntHcuEd-96YWU42lBhw" name="broadcastUnbatched">
                  <ownedComment xmi:id="_8xmntXcuEd-96YWU42lBhw">
                    <body>
	 * Broadcasts the specified notification to listeners as a singleton list,
	 * in a situation where batching is not possible because events are
	 * occurring outside of any transaction context.  This can only occur in
	 * the case of {@linkplain NotificationFilter#READ read notifications}.
	 * 
	 * @param notification the notification to send to resource set listeners
	 * 
	 * @see NotificationFilter#READ
	 * @see ResourceSetListener
	 * @see FilterManager#selectUnbatched(java.util.List, NotificationFilter)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xmntncuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xwYsHcuEd-96YWU42lBhw" name="getUndoRedoOptions">
                  <ownedComment xmi:id="_8xwYsXcuEd-96YWU42lBhw">
                    <body>
	 * Retrieves the undo/redo options that should be used when creating
	 *  transactions.
	 *  
	 * @return A map with undo/redo options.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8xwYsncuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8xwYs3cuEd-96YWU42lBhw" name="startPrivileged">
                  <ownedComment xmi:id="_8xwYtHcuEd-96YWU42lBhw">
                    <body>
	 * Transfers ownership of this editing domain to the specified
	 * privileged runnable.
	 *  
	 * @param runnable the runnable whose thread is to borrow me
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8yNEoHcuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8yNEoXcuEd-96YWU42lBhw" name="endPrivileged">
                  <ownedComment xmi:id="_8yNEoncuEd-96YWU42lBhw">
                    <body>
	 * Returns me to my previous owner, upon completion of the specified
	 * privileged runnable.
	 * 
	 * @param runnable the runnable whose thread had borrowed me
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8yNEo3cuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8gUqcHcuEd-96YWU42lBhw" name="AbstractTransactionalCommandStack" clientDependency="_8gd0YXcuEd-96YWU42lBhw" isAbstract="true">
                <ownedComment xmi:id="_8gUqcXcuEd-96YWU42lBhw">
                  <body>
 * Partial implementation of the {@link TransactionalCommandStack} interface,
 * useful for subclasses to define their specific handling of transactions and
 * other concerns.
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @since 1.1
 </body>
                </ownedComment>
                <generalization xmi:id="_8gUqcncuEd-96YWU42lBhw" general="_vmE-YHcqEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_8gd0YncuEd-96YWU42lBhw" name="domain" visibility="private" type="_8wkF4HcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_8gnlYHcuEd-96YWU42lBhw" name="exceptionHandler" visibility="protected" type="_zqV9sHctEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_8gnlYXcuEd-96YWU42lBhw" name="getDomain" visibility="public">
                  <ownedParameter xmi:id="_8gnlYncuEd-96YWU42lBhw" type="_8wkF4HcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8gxWYHcuEd-96YWU42lBhw" name="setEditingDomain" visibility="public">
                  <ownedParameter xmi:id="_8gxWYXcuEd-96YWU42lBhw" name="domain" type="_8wkF4HcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8gxWYncuEd-96YWU42lBhw" name="rollback" visibility="protected">
                  <ownedComment xmi:id="_8gxWY3cuEd-96YWU42lBhw">
                    <body>
     * Ensures that the specified transaction is rolled back, first rolling
     * back a nested transaction (if any).
     * 
     * @param tx a transaction to roll back
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8gxWZHcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8g6gUHcuEd-96YWU42lBhw" name="setExceptionHandler" visibility="public">
                  <ownedParameter xmi:id="_8g6gUXcuEd-96YWU42lBhw" name="handler" type="_zqV9sHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hERUHcuEd-96YWU42lBhw" name="getExceptionHandler" visibility="public">
                  <ownedParameter xmi:id="_8hERUXcuEd-96YWU42lBhw" type="_zqV9sHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hERUncuEd-96YWU42lBhw" name="handleError" visibility="protected">
                  <ownedComment xmi:id="_8hERU3cuEd-96YWU42lBhw">
                    <body>
     * Extends the inherited method by first aborting the active
     * transaction (if any) and passing the exception along to
     * the registered exception handler (if any).
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8hERVHcuEd-96YWU42lBhw" name="exception" type="_vm0lQ3cqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hNbQXcuEd-96YWU42lBhw" name="isCancelException" visibility="private">
                  <ownedComment xmi:id="_8hNbQncuEd-96YWU42lBhw">
                    <body>
     * Does the specified exception indicate that the user canceled execution,
     * undo, or redo of a command?
     * 
     * @param exception an exception
     * @return &lt;code>true&lt;/code> if it is an {@link OperationCanceledException}
     *     or a {@link RollbackException} that was caused by operation cancel
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8hXMQHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_8hXMQXcuEd-96YWU42lBhw" name="exception" type="_8hNbQHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hXMQncuEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_8hXMQ3cuEd-96YWU42lBhw">
                    <body>
     * Default implementation delegates to the subclass implementation of
     * {@link #doExecute(Command, Map)}, handling the roll-back exception if the
     * command is rolled back.  Note that &lt;code>doExecute()&lt;/code> is only
     * called if the command is {@linkplain Command#canExecute() executable}.
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8hXMRHcuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8hg9QHcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hg9QXcuEd-96YWU42lBhw" name="doExecute" visibility="public" isAbstract="true">
                  <ownedComment xmi:id="_8hg9QncuEd-96YWU42lBhw">
                    <body>
     * Implemented by subclasses to perform the execution of the specified
     * &lt;code>command&lt;/code>.  Invoked by the {@link #execute(Command, Map)}
     * method.
     * 
     * @param command the command to execute
     * @param options the transaction options to apply to execution of the command
     * 
     * @throws InterruptedException if the current thread is interrupted while
     *     waiting to start the transaction
     * @throws RollbackException if the execution of the command is rolled back
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8hqHMHcuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8hqHMXcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hqHMncuEd-96YWU42lBhw" name="handleRollback" visibility="protected">
                  <ownedComment xmi:id="_8hqHM3cuEd-96YWU42lBhw">
                    <body>
     * Handles the roll-back of the specified &lt;code>command&lt;/code> execution.
     * This default implementation disposes the command and notifies
     * command-stack listeners so that they may get the latest information, in
     * case they were already notified of command execution, for example.
     * 
     * @param command the command whose execution was rolled back (may be
     *    &lt;code>null&lt;/code> if not known)
     * @param rbe the roll-back exception (may be &lt;code>null&lt;/code> if no
     *    exception is to be thrown)
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8hqHNHcuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8hz4MHcuEd-96YWU42lBhw" name="rbe" type="_0hoLAHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8hz4MXcuEd-96YWU42lBhw" name="execute" visibility="public">
                  <ownedComment xmi:id="_8hz4MncuEd-96YWU42lBhw">
                    <body>
     * Redefines the inherited method by forwarding to the
     * {@link TransactionalCommandStack#execute(Command, Map)} method. Any
     * checked exception thrown by that method is handled by
     * {@link #handleError(Exception)} but is not propagated.
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8hz4M3cuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8h9pMHcuEd-96YWU42lBhw" name="basicExecute" visibility="protected">
                  <ownedComment xmi:id="_8h9pMXcuEd-96YWU42lBhw">
                    <body>
     * Provides access to the {@link BasicCommandStack} implementation of the
     * {@link #execute(Command)} method, as this class overrides it to delegate
     * to the {@link TransactionalCommandStack#execute(Command, Map)} method.
     * 
     * @param command the command to execute
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8h9pMncuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8h9pM3cuEd-96YWU42lBhw" name="getUndoRedoOptions" visibility="protected">
                  <ownedComment xmi:id="_8h9pNHcuEd-96YWU42lBhw">
                    <body>
     * Obtains my editing domain's default undo/redo transaction options.
     * 
     * @return my editing domain's transaction options for undo/redo
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8iGzIHcuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8iGzIXcuEd-96YWU42lBhw" name="makeTriggerTransactionOptions" visibility="public" isLeaf="true" isStatic="true">
                  <ownedComment xmi:id="_8iGzIncuEd-96YWU42lBhw">
                    <body>
     * Customizes the specified &lt;code>options&lt;/code> for the case of a transaction
     * that executes trigger commands.  The original map is not affected.
     * 
     * @param options a client-supplied options map
     * @return a derived map of options suitable for trigger transactions
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8iQkIHcuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                  <ownedParameter xmi:id="_8iQkIXcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_8gd0YHcuEd-96YWU42lBhw" name="InternalTransactionalCommandStack">
                <ownedComment xmi:id="_8vOCEHcuEd-96YWU42lBhw">
                  <body>
 * An internal interface that must be provided by any implementation of the public
 * {@link TransactionalCommandStack} interface, in order to function correctly in the
 * transactional editing domain framework.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_8vOCEXcuEd-96YWU42lBhw" general="_0xkrgHctEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_8vOCEncuEd-96YWU42lBhw" name="getDomain">
                  <ownedComment xmi:id="_8vOCE3cuEd-96YWU42lBhw">
                    <body>
	 * Obtains the editing domain in which I create transactions.
	 * 
	 * @return my editing domain
	 * 
	 * @see #createTransaction(Command, Map)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8vXzEHcuEd-96YWU42lBhw" type="_8wkF4HcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8vXzEXcuEd-96YWU42lBhw" name="setEditingDomain">
                  <ownedComment xmi:id="_8vXzEncuEd-96YWU42lBhw">
                    <body>
	 * Assigns the editing domain in which I create transactions.
	 * 
	 * @param domain my editing domain
	 * 
	 * @see #createTransaction(Command, Map)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8vXzE3cuEd-96YWU42lBhw" name="domain" type="_8wkF4HcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8vXzFHcuEd-96YWU42lBhw" name="createTransaction">
                  <ownedComment xmi:id="_8vXzFXcuEd-96YWU42lBhw">
                    <body>
	 * Creates a read/write transaction in my editing domain for the purpose
	 * of executing the specified command.  The resulting transaction is
	 * expected to be started when it is returned (hence the possibility of
	 * interruption).
	 * 
	 * @param command a command that I need to execute
	 * @param options the options to apply to the resulting transaction
	 * @return the command transaction
	 * 
	 * @throws InterruptedException if the current thread is interrupted while
	 *     waiting for the transaction to start
	 *     
	 * @see #getDomain()
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8vg9AHcuEd-96YWU42lBhw" type="_8i2aAHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_8vg9AXcuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8vg9AncuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8vquAHcuEd-96YWU42lBhw" name="executeTriggers">
                  <ownedComment xmi:id="_8vquAXcuEd-96YWU42lBhw">
                    <body>
	 * Executes the specified list of trigger commands.  All of the commands are
	 * executed within a single child transaction of the transaction that executed
	 * the triggering &lt;code>command&lt;/code>; they must not be &quot;piggy-backed&quot; on
	 * the currently active transaction.
	 * 
	 * @param command the command whose execution triggered additional commands
	 *     (from pre-commit listeners)
	 * @param triggers a list of zero or more {@link Command}s to execute.
	 *     If there are none, then no transaction needs to be started
	 * @param options the options to apply to the child transaction
	 * 
	 * @throws InterruptedException if the current thread is interrupted while
	 *     waiting for the trigger transaction to start
	 * @throws RollbackException if the trigger transaction rolls back on commit
	 * 
	 * @see ResourceSetListener#transactionAboutToCommit(org.eclipse.emf.transaction.ResourceSetChangeEvent)
	 * @see #createTransaction(Command, Map)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8vquAncuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8vquA3cuEd-96YWU42lBhw" name="triggers" type="_vowe8HcqEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8v0fAHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8vquBHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8v0fAXcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8v0fAncuEd-96YWU42lBhw" name="dispose">
                  <ownedComment xmi:id="_8v0fA3cuEd-96YWU42lBhw">
                    <body>
	 * Disposes of my state and any additional resources that I may be
	 * retaining.  I am only disposed when my {@link #getDomain() editing domain}
	 * is disposed.
	 </body>
                  </ownedComment>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_8gd0YXcuEd-96YWU42lBhw" name="AbstractTransactionalCommandStack extends InternalTransactionalCommandStack" supplier="_8gd0YHcuEd-96YWU42lBhw" client="_8gUqcHcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_8hNbQHcuEd-96YWU42lBhw" name="Throwable"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_8i2aAHcuEd-96YWU42lBhw" name="EMFCommandTransaction">
                <ownedComment xmi:id="_8i2aAXcuEd-96YWU42lBhw">
                  <body>
 * A transaction implementation use by the command stack to wrap the execution
 * of {@link Command}s, to provide them the write access that they need.
 * The transaction knows the {@link #getCommand() command} that it is
 * servicing.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_8i2aA3cuEd-96YWU42lBhw" general="_8i2aAncuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_8jALAHcuEd-96YWU42lBhw" name="command" visibility="private" isLeaf="true" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_8jALAXcuEd-96YWU42lBhw" name="getCommand" visibility="public" isLeaf="true">
                  <ownedComment xmi:id="_8jALAncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the command for which I provide read/write access to the
	 * editing domain.
	 * 
	 * @return my command
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8jJ8AHcuEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8jJ8AXcuEd-96YWU42lBhw" name="addCommand" visibility="private" isStatic="true">
                  <ownedComment xmi:id="_8jJ8AncuEd-96YWU42lBhw">
                    <body>
	 * Given the specified options and command, computes an options map that
	 * has the same options as those provided, plus the specified command as
	 * the executing-command option.
	 * 
	 * @param options a map of options
	 * @param command the command that we are executing in this transaction
	 * @return a new map of options that increments those supplied with the
	 *       appropriate executing-command option
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8jTF8HcuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                  <ownedParameter xmi:id="_8jTF8XcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                  <ownedParameter xmi:id="_8jTF8ncuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8i2aAncuEd-96YWU42lBhw" name="TransactionImpl" clientDependency="_9NLJYXcuEd-96YWU42lBhw">
                <ownedComment xmi:id="_9NLJYHcuEd-96YWU42lBhw">
                  <body>
 * The default transaction implementation.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_9NLJYncuEd-96YWU42lBhw" name="ALLOW_CHANGE_PROPAGATION_BLOCKING" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_9NUTUHcuEd-96YWU42lBhw">
                    <body>
	 * This option, when provided to a transaction that inherits from this implementation
	 *  class and has children transactions that are using this implementation class,
	 *  provides an optional block of the normal propagation of change descriptions
	 *  to the parent transaction by any transaction in the child subtree of this transaction.
	 *  The child exercises its option to negate the propagation of change descriptions by
	 *  adding the {@link #BLOCK_CHANGE_PROPAGATION} option to its own options with
	 *  the value of {@link Boolean#TRUE}. This option &lt;i>IS&lt;/i> inherited by child transactions.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9NeEUHcuEd-96YWU42lBhw" name="BLOCK_CHANGE_PROPAGATION" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_9NeEUXcuEd-96YWU42lBhw">
                    <body>
	 * This option blocks the propagation of change descriptions to the parent transaction. The option
	 *  has no effect unless the parent transaction has allowed this negation to happen by having the
	 *  {@link #ALLOW_CHANGE_PROPAGATION_BLOCKING} option added either directly or through
	 *  option inheritance. Note that to enable this option it must be added to the options map with
	 *  the value of {@link Boolean#TRUE}. This option is &lt;i>NOT&lt;/i> inherited by child transactions.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9Nn1UHcuEd-96YWU42lBhw" name="OPTION_IS_TRIGGER_TRANSACTION" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_9Nw_QHcuEd-96YWU42lBhw">
                    <body>
     * An informative option that tags the transaction as a transaction that is
     * executing trigger commands.
     </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9N6wQHcuEd-96YWU42lBhw" name="OPTION_EXECUTING_COMMAND" visibility="public" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_9N6wQXcuEd-96YWU42lBhw">
                    <body>
	 * An internal option that identifies the {@link Command} that a transaction
	 * was created to execute, in the case that it is an
	 * {@link EMFCommandTransaction}.
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9OEhQHcuEd-96YWU42lBhw" name="DEFAULT_UNDO_REDO_OPTIONS" visibility="public" isLeaf="true" isStatic="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false">
                  <ownedComment xmi:id="_9OEhQXcuEd-96YWU42lBhw">
                    <body>
	 * The transaction options that should be used when undoing/redoing changes
	 * on the command stack.  Undo and redo must not perform triggers because
	 * these were implemented as chained commands during the original execution.
	 * Moreover, validation is not required during undo/redo because we can
	 * only return the model from a valid state to another valid state if the
	 * original execution did so.  Finally, it is not necessary to record
	 * undo information when we are undoing or redoing.
	 * &lt;p>
	 * As of the 1.2 release, this map is immutable.
	 * &lt;/p>
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9ONrMHcuEd-96YWU42lBhw" name="nextId" visibility="private" isStatic="true" type="_vdu6sHcqEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9OXcMHcuEd-96YWU42lBhw" name="id" isLeaf="true" type="_vdu6sHcqEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9OgmIHcuEd-96YWU42lBhw" name="domain" visibility="private" isLeaf="true" type="_0y6IQHctEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9O0IIHcuEd-96YWU42lBhw" name="owner" visibility="private" type="_0nI9IHctEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9O9SEHcuEd-96YWU42lBhw" name="readOnly" visibility="private" isLeaf="true" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9PHDEHcuEd-96YWU42lBhw" name="options" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9PHDEXcuEd-96YWU42lBhw" name="mutableOptions" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9PQ0EHcuEd-96YWU42lBhw" name="parent" visibility="private" type="_8tIXYHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9PZ-AHcuEd-96YWU42lBhw" name="root" visibility="private" type="_8tIXYHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9PjvAHcuEd-96YWU42lBhw" name="active" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9Ps48HcuEd-96YWU42lBhw" name="closing" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9P2p8HcuEd-96YWU42lBhw" name="rollingBack" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9QAa8HcuEd-96YWU42lBhw" name="notifications" visibility="protected" type="_zp5RxXctEd-96YWU42lBhw" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9QJk4HcuEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9QAa8XcuEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9QJk4ncuEd-96YWU42lBhw" name="change" visibility="protected" isLeaf="true" type="_9QJk4XcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9QTV4HcuEd-96YWU42lBhw" name="aborted" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9QdG4HcuEd-96YWU42lBhw" name="status" visibility="private" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9QmQ0HcuEd-96YWU42lBhw" name="triggers" visibility="private" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9QwB0XcuEd-96YWU42lBhw" name="triggerChange" visibility="private" type="_9QwB0HcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_9Q5LwHcuEd-96YWU42lBhw" name="start" visibility="public"/>
                <ownedOperation xmi:id="_9Q5LwXcuEd-96YWU42lBhw" name="getEditingDomain" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9RC8wHcuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9RC8wXcuEd-96YWU42lBhw" name="getLifecycle" visibility="protected">
                  <ownedComment xmi:id="_9RC8wncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the life-cycle adapter, if any, of my editing domain, with which
	 * I will notify it of my lifecycle events.
	 * 
	 * @return my domain's lifecycle adapter, or &lt;code>null&lt;/code> if my editing
	 *         domain does not provide one
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9RC8w3cuEd-96YWU42lBhw" type="_8rpJoHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9RMtwHcuEd-96YWU42lBhw" name="getParent" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9RMtwXcuEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9RV3sHcuEd-96YWU42lBhw" name="setParent" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9RyjoHcuEd-96YWU42lBhw" name="parent" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9RyjoXcuEd-96YWU42lBhw" name="getRoot" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9RyjoncuEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9R8UoHcuEd-96YWU42lBhw" name="getOwner" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9R8UoXcuEd-96YWU42lBhw" type="_0nI9IHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9SFekHcuEd-96YWU42lBhw" name="isReadOnly" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9SFekXcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9SPPkHcuEd-96YWU42lBhw" name="getOptions" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9SPPkXcuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9SPPkncuEd-96YWU42lBhw" name="isActive" visibility="public">
                  <ownedParameter xmi:id="_9SZAkHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9SZAkXcuEd-96YWU42lBhw" name="getStatus" visibility="public">
                  <ownedParameter xmi:id="_9SZAkncuEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9SiKgHcuEd-96YWU42lBhw" name="setStatus" visibility="public">
                  <ownedParameter xmi:id="_9SiKgXcuEd-96YWU42lBhw" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9SiKgncuEd-96YWU42lBhw" name="abort" visibility="public">
                  <ownedParameter xmi:id="_9SiKg3cuEd-96YWU42lBhw" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Sr7gHcuEd-96YWU42lBhw" name="isAborted" visibility="protected">
                  <ownedComment xmi:id="_9Sr7gXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether I have been aborted.
	 * 
	 * @return &lt;code>true&lt;/code> if I have been aborted; &lt;code>false&lt;/code>, otherwise
	 * 
	 * @see InternalTransaction#abort(IStatus)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9Sr7gncuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9S1sgHcuEd-96YWU42lBhw" name="commit" visibility="public"/>
                <ownedOperation xmi:id="_9S1sgXcuEd-96YWU42lBhw" name="combine" visibility="private">
                  <ownedComment xmi:id="_9S1sgncuEd-96YWU42lBhw">
                    <body>
	 * Produces a status object combining live-validation status with
	 * validate-edit status.
	 * 
	 * @param validationStatus a live-validation status, or &lt;code>null&lt;/code>
	 *    if validation is disabled
	 * @param editStatus a validate-edit status, or &lt;code>null&lt;/code> if it is
	 *    not enabled
	 *    
	 * @return an appropriate status, which may even by OK just because both
	 *    inputs are &lt;code>null&lt;/code>
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9S1sg3cuEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9S-2cHcuEd-96YWU42lBhw" name="validationStatus" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_9S-2cXcuEd-96YWU42lBhw" name="editStatus" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9TIncHcuEd-96YWU42lBhw" name="rollback" visibility="public"/>
                <ownedOperation xmi:id="_9TIncXcuEd-96YWU42lBhw" name="doRollback" visibility="private"/>
                <ownedOperation xmi:id="_9TIncncuEd-96YWU42lBhw" name="yield" visibility="public"/>
                <ownedOperation xmi:id="_9TInc3cuEd-96YWU42lBhw" name="getChangeDescription" visibility="public">
                  <ownedParameter xmi:id="_9TIndHcuEd-96YWU42lBhw" type="_0wrToHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9TRxYHcuEd-96YWU42lBhw" name="getInternalDomain" visibility="protected">
                  <ownedComment xmi:id="_9TRxYXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains my owning editing domain as the internal interface.
	 * 
	 * @return the internal view of my editing domain
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9TRxYncuEd-96YWU42lBhw" type="_8wkF4HcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9TbiYHcuEd-96YWU42lBhw" name="startRecording" visibility="private">
                  <ownedComment xmi:id="_9TbiYXcuEd-96YWU42lBhw">
                    <body>
	 * Starts recording changes upong activation or resumption from a child
	 * transaction, unless undo recording is disabled by my options.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9TbiYncuEd-96YWU42lBhw" name="stopRecording" visibility="private">
                  <ownedComment xmi:id="_9TbiY3cuEd-96YWU42lBhw">
                    <body>
	 * Stops recording changes and adds them to my composite change description,
	 * unless undo recording is disabled by my options.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9TbiZHcuEd-96YWU42lBhw" name="pause" visibility="public"/>
                <ownedOperation xmi:id="_9TlTYHcuEd-96YWU42lBhw" name="resume" visibility="public">
                  <ownedParameter xmi:id="_9TlTYXcuEd-96YWU42lBhw" name="nestedChanges" type="_0wrToHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9TlTYncuEd-96YWU42lBhw" name="isRollingBack" visibility="public">
                  <ownedParameter xmi:id="_9TlTY3cuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9TudUHcuEd-96YWU42lBhw" name="close" visibility="protected">
                  <ownedComment xmi:id="_9TudUXcuEd-96YWU42lBhw">
                    <body>
	 * Closes me.  This is the last step in committing or rolling back,
	 * deactivating me in my editing domain.  Also, if I have a parent
	 * transaction, I {@link InternalTransaction#resume(TransactionChangeDescription) resume}
	 * it.
	 * &lt;p>
	 * If a subclass overrides this method, it &lt;em>must&lt;/em> ensure that this
	 * implementation is also invoked.
	 * &lt;/p>
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9TudUncuEd-96YWU42lBhw" name="add" visibility="public">
                  <ownedParameter xmi:id="_9T4OUHcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9T4OUXcuEd-96YWU42lBhw" name="getNotifications" visibility="public">
                  <ownedParameter xmi:id="_9T4OUncuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9UB_UXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9UB_UHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_9ULJQHcuEd-96YWU42lBhw" name="validate" visibility="protected">
                  <ownedComment xmi:id="_9ULJQXcuEd-96YWU42lBhw">
                    <body>
	 * Validates me.  Should only be called during commit.
	 * 
	 * @return the result of validation.  If this is an error or worse,
	 *     then I must roll back
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9ULJQncuEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9ULJQ3cuEd-96YWU42lBhw" name="getTriggers" visibility="public">
                  <ownedParameter xmi:id="_9UU6QHcuEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9UU6QXcuEd-96YWU42lBhw" name="addTriggers" visibility="public">
                  <ownedParameter xmi:id="_9UU6QncuEd-96YWU42lBhw" name="triggers" type="_8uUqM3cuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9UeEMHcuEd-96YWU42lBhw" name="startPrivileged" visibility="public">
                  <ownedParameter xmi:id="_9UeEMXcuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9UeEMncuEd-96YWU42lBhw" name="endPrivileged" visibility="public">
                  <ownedParameter xmi:id="_9Un1MHcuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Un1MXcuEd-96YWU42lBhw" name="inheritOptions" visibility="private">
                  <ownedParameter xmi:id="_9Un1MncuEd-96YWU42lBhw" name="parent" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9UxmMHcuEd-96YWU42lBhw" name="toString" visibility="public">
                  <ownedParameter xmi:id="_9UxmMXcuEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9UxmMncuEd-96YWU42lBhw" name="isUndoEnabled" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9UxmM3cuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction should record undo information,
	 * according to its {@link Transaction#getOptions() options} and
	 * {@link Transaction#isReadOnly() read-only state}.
	 * 
	 * @param tx a transaction
	 * @return &lt;code>true&lt;/code> if the transaction should record undo
	 *     information; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9U6wIHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9U6wIXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9VEhIHcuEd-96YWU42lBhw" name="isValidationEnabled" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9VEhIXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction should validate changes,
	 * according to its {@link Transaction#getOptions() options} and
	 * {@link Transaction#isReadOnly() read-only state}.
	 * 
	 * @param tx a transaction
	 * @return &lt;code>true&lt;/code> if the transaction should validate
	 *     changes; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9VOSIHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9VOSIXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9VOSIncuEd-96YWU42lBhw" name="isTriggerEnabled" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9VOSI3cuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction should invoke pre-commit,
	 * listeners, according to its {@link Transaction#getOptions() options} and
	 * {@link Transaction#isReadOnly() read-only state}.
	 * 
	 * @param tx a transaction
	 * @return &lt;code>true&lt;/code> if the transaction should perform the pre-commit
	 *     procedures; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9VXcEHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9VXcEXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9VhNEHcuEd-96YWU42lBhw" name="isNotificationEnabled" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9VhNEXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction should send post-commit events,
	 * according to its {@link Transaction#getOptions() options}.
	 * 
	 * @param tx a transaction
	 * @return &lt;code>true&lt;/code> if the transaction should send post-commit
	 *     events; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9VqXAHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9VqXAXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9VqXAncuEd-96YWU42lBhw" name="isUnprotected" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9VqXA3cuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction is an unprotected write,
	 * according to its {@link Transaction#getOptions() options} and
	 * {@link Transaction#isReadOnly() read-only state}.
	 * 
	 * @param tx a transaction
	 * @return &lt;code>true&lt;/code> if the transaction is an unprotected write
	 *     transaction; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9V0IAHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9V0IAXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9V95AHcuEd-96YWU42lBhw" name="collectsNotifications" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9V95AXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction collects notifications for
	 * broadcast to listeners or for validation.  This is determined by
	 * the transaction's options.
	 * 
	 * @param tx a transaction
	 * 
	 * @return &lt;code>true&lt;/code> any of notification, triggers, and validation
	 *     are enabled; &lt;code>false&lt;/code>, otherwise
	 * 
	 * @see #isNotificationEnabled(Transaction)
	 * @see #isTriggerEnabled(Transaction)
	 * @see #isValidationEnabled(Transaction)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9WHC8HcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9WHC8XcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9WQz8HcuEd-96YWU42lBhw" name="hasOption" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9WQz8XcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified transaction has a boolean option.
	 * 
	 * @param tx a transaction
	 * @param option the boolean-valued option to query
	 * @return &lt;code>true&lt;/code> if the transaction has the option;
	 *    &lt;code>false&lt;/code> if it does not
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9WQz8ncuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9Wak8HcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9Wak8XcuEd-96YWU42lBhw" name="option" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Wak8ncuEd-96YWU42lBhw" name="getDefaultOptions" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9Wak83cuEd-96YWU42lBhw">
                    <body>
	 * Obtains the default transaction options, if any, of the specified editing
	 * domain.
	 * 
	 * @param domain an editing domain
	 * @return its default transaction options, or an empty map if none are
	 *     defined
	 * 
	 * @since 1.2
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9Wju4HcuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                  <ownedParameter xmi:id="_9Wju4XcuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8lYwoHcuEd-96YWU42lBhw" name="EditingDomainManager">
                <ownedComment xmi:id="_8lihoHcuEd-96YWU42lBhw">
                  <body>
 * The editing domain manager initializes editing domain instances from the
 * &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code> extension point.
 * It also configures listeners from the
 * &lt;code>org.eclipse.emf.transaction.listeners&lt;/code> point.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_8lihoXcuEd-96YWU42lBhw" name="EXT_POINT_DOMAINS" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8lrrkHcuEd-96YWU42lBhw" name="E_DOMAIN" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8l1ckHcuEd-96YWU42lBhw" name="A_ID" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8l-mgHcuEd-96YWU42lBhw" name="A_FACTORY" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8mIXgHcuEd-96YWU42lBhw" name="EXT_POINT_LISTENERS" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8mSIgHcuEd-96YWU42lBhw" name="E_LISTENER" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8mbScHcuEd-96YWU42lBhw" name="A_CLASS" visibility="private" isLeaf="true" isStatic="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_8mlDcHcuEd-96YWU42lBhw" name="INSTANCE" visibility="private" isLeaf="true" isStatic="true" type="_8lYwoHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_8mu0cXcuEd-96YWU42lBhw" name="universalListeners" visibility="private" type="_8mu0cHcuEd-96YWU42lBhw" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8m3-YXcuEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8m3-YHcuEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_8m3-YncuEd-96YWU42lBhw" name="listeners" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedOperation xmi:id="_8nBvYHcuEd-96YWU42lBhw" name="getInstance" visibility="public" isStatic="true">
                  <ownedComment xmi:id="_8nBvYXcuEd-96YWU42lBhw">
                    <body>
	 * Gets the singleton instance.
	 * 
	 * @return the instance
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8nBvYncuEd-96YWU42lBhw" type="_8lYwoHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8nK5UHcuEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                  <ownedComment xmi:id="_8nK5UXcuEd-96YWU42lBhw">
                    <body>
	 * Creates the editing domain registered on the extension point under the
	 * specified &lt;code>id&lt;/code>, if an appropriate extension exists.
	 * 
	 * @param id the editing domain ID to initialize
	 * 
	 * @return the corresponding editing domain, or &lt;code>null&lt;/code> if no
	 *     such extension was found
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8nK5UncuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_8nK5U3cuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8nUqUHcuEd-96YWU42lBhw" name="isStaticallyRegistered" visibility="public">
                  <ownedComment xmi:id="_8nUqUXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified editing domain ID is statically registered
	 * on our extension point.
	 * 
	 * @param id the domain ID to query
	 * 
	 * @return whether it is statically registered
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8nUqUncuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_8nUqU3cuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8nebUHcuEd-96YWU42lBhw" name="assertDynamicallyRegistered" visibility="public">
                  <ownedComment xmi:id="_8nebUXcuEd-96YWU42lBhw">
                    <body>
	 * Asserts that the specified editing domain ID is dynamically registered,
	 * not statically registered on the extension point.
	 * 
	 * @param id
	 *            the ID of an editing domain
	 * 
	 * @throws IllegalArgumentException
	 *             if the specified ID is statically registered
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8nebUncuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8nebU3cuEd-96YWU42lBhw" name="configureListeners" visibility="public">
                  <ownedComment xmi:id="_8nebVHcuEd-96YWU42lBhw">
                    <body>
	 * Creates (if necessary) listeners registered against the specified
	 * editing domain ID and and adds them to it.  Note that this includes
	 * listeners registered against all domains (by not specifying an ID).
	 * &lt;p>
	 * At most a single instance of any registered listener is created.
	 * &lt;/p>
	 * 
	 * @param id the editing domain ID
	 * @param domain the editing domain to which to add the listeners
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8nnlQHcuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_8nnlQXcuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8nxWQHcuEd-96YWU42lBhw" name="deconfigureListeners" visibility="public">
                  <ownedComment xmi:id="_8nxWQXcuEd-96YWU42lBhw">
                    <body>
	 * Removes from the editing domain the listeners that are registered against 
	 * its ID.  Note that this includes
	 * listeners registered against all domains (by not specifying an ID).
	 * 
	 * @param id the editing domain ID
	 * @param domain the editing domain from which to remove the listeners
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8nxWQncuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_8nxWQ3cuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8nxWRHcuEd-96YWU42lBhw" name="getDomainConfig" visibility="private">
                  <ownedComment xmi:id="_8nxWRXcuEd-96YWU42lBhw">
                    <body>
	 * Retrieves the configuration element for the extension providing
	 * the specified domain ID.
	 * 
	 * @param id the domain ID to retrieve
	 * @return the corresponding configuration element, or &lt;code>null&lt;/code> if this
	 *     ID is not registered on the extension point
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8n7HQHcuEd-96YWU42lBhw" type="_8mu0cHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_8n7HQXcuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8n7HQncuEd-96YWU42lBhw" name="getListenerConfigs" visibility="private">
                  <ownedComment xmi:id="_8oERMHcuEd-96YWU42lBhw">
                    <body>
	 * Retrieves the configuration elements for listeners registered on the specified
	 * editing domain ID.  This includes listeners that are registered against all
	 * editing domains.
	 * 
	 * @param id the domain ID to retrieve
	 * @return the configuration elements for listeners registered to this ID
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8oERMXcuEd-96YWU42lBhw" type="_8mu0cHcuEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8oERM3cuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8oERMncuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8oOCMHcuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8oOCMXcuEd-96YWU42lBhw" name="getUniversalListenerConfigs" visibility="private">
                  <ownedComment xmi:id="_8oOCMncuEd-96YWU42lBhw">
                    <body>
	 * Retrieves the configuration elements for listeners that are registered on all
	 * editing domains.
	 * 
	 * @return the configuration elements for universal listeners
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8oOCM3cuEd-96YWU42lBhw" type="_8mu0cHcuEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8oXMIXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8oXMIHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_8oXMIncuEd-96YWU42lBhw" name="getListener" visibility="private">
                  <ownedComment xmi:id="_8oXMI3cuEd-96YWU42lBhw">
                    <body>
	 * Initializes a listener from the extension point configuration element.
	 * The &lt;code>create&lt;/code> argument determines whether to lazily create the
	 * listener; it should be &lt;code>true&lt;/code> when adding listeners to editing
	 * domains and &lt;code>false&lt;/code> when removing them.
	 * 
	 * @param config the configuration element
	 * @param create if the listener does not exist yet, create it
	 * @return the listener, or &lt;code>null&lt;/code> if either the configuration is
	 *     invalid or &lt;code>create = false&lt;/code> and the listener does not yet exist
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8og9IHcuEd-96YWU42lBhw" type="_0epIcHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_8og9IXcuEd-96YWU42lBhw" name="config" type="_8mu0cHcuEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8og9IncuEd-96YWU42lBhw" name="create" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8pje8HcuEd-96YWU42lBhw" name="FilterManager" isLeaf="true">
                <ownedComment xmi:id="_8pje8XcuEd-96YWU42lBhw">
                  <body>
 * An object that manages the filtering of notifications.  This class can implement
 * optimizations to reduce the effort of filtering notification lists for listeners
 * that have similar filters.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_8ptP8HcuEd-96YWU42lBhw" name="INSTANCE" visibility="private" isLeaf="true" isStatic="true" type="_8pje8HcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_8p3A8HcuEd-96YWU42lBhw" name="getInstance" visibility="public" isStatic="true">
                  <ownedComment xmi:id="_8p3A8XcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the singleton instance of this class.
	 * 
	 * @return the singleton instance
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8p3A8ncuEd-96YWU42lBhw" type="_8pje8HcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8p3A83cuEd-96YWU42lBhw" name="select" visibility="public">
                  <ownedComment xmi:id="_8p3A9HcuEd-96YWU42lBhw">
                    <body>
	 * Selects the notifications in the given list that match the specified
	 * filter.
	 * &lt;p>
	 * For unbatched notifications, it is better to use the
	 * {@link #selectUnbatched(List, NotificationFilter)} method.
	 * &lt;/p>
	 * 
	 * @param notifications a list of notifications to select from
	 * @param filter a notification filter
	 * @param cache A cache list that is precisely the same size as the notifications
	 *  list but is used and reused as a scratch pad. Its purpose is to cut down the
	 *  number of objects created and garbage collected while propagating filtered
	 *  events to a group of listeners. Note that it will be repeatedly cleared and
	 *  populated each time it is given to this method.
	 * 
	 * @return the notifications that match the filter
	 * 
	 * @see #selectUnbatched(List, NotificationFilter)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8qAK4HcuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8qAK4ncuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8qAK4XcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8qJ74HcuEd-96YWU42lBhw" name="notifications" type="_zp5RxXctEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8qJ74ncuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8qJ74XcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8qTs4HcuEd-96YWU42lBhw" name="filter" type="_zrPVkHctEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_8qTs4XcuEd-96YWU42lBhw" name="cache" type="_zp5RxXctEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8qc20HcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8qTs4ncuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_8qc20XcuEd-96YWU42lBhw" name="select" visibility="public">
                  <ownedComment xmi:id="_8qc20ncuEd-96YWU42lBhw">
                    <body>
	 * Selects the notifications in the given list that match the specified
	 * filter.
	 * &lt;p>
	 * For unbatched notifications, it is better to use the
	 * {@link #selectUnbatched(List, NotificationFilter)} method.
	 * &lt;/p>
	 * 
	 * @param notifications a list of notifications to select from
	 * @param filter a notification filter
	 * 
	 * @return the notifications that match the filter
	 * 
	 * @see #selectUnbatched(List, NotificationFilter)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8qmn0HcuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8qmn0ncuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8qmn0XcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8qvxwHcuEd-96YWU42lBhw" name="notifications" type="_zp5RxXctEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8qvxwncuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8qvxwXcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8q5iwHcuEd-96YWU42lBhw" name="filter" type="_zrPVkHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8q5iwXcuEd-96YWU42lBhw" name="selectUnbatched" visibility="public">
                  <ownedComment xmi:id="_8q5iwncuEd-96YWU42lBhw">
                    <body>
	 * Selects the notifications in the given singleton list of an unbatched
	 * notification that match the specified filter.  The result is, thus,
	 * either an empty list or the original list back again.
	 * &lt;p>
	 * This method is more efficient for processing unbatched notifications than
	 * is the {@link #select(List, NotificationFilter)} method.
	 * &lt;/p>
	 * 
	 * @param notification a singleton list containing the unbatched
	 *     notification
	 * @param filter a notification filter
	 * 
	 * @return the original list or an empty list, according to the filter
	 * 
	 * @see #select(List, NotificationFilter)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8q5iw3cuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8rDTwXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8rDTwHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8rDTwncuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8rMdsXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8rMdsHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_8rMdsncuEd-96YWU42lBhw" name="filter" type="_zrPVkHctEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_8rpJoHcuEd-96YWU42lBhw" name="InternalLifecycle">
                <ownedComment xmi:id="_8rpJoXcuEd-96YWU42lBhw">
                  <body>
 * &lt;p>
 * Internal adapter interface that must be provided by a
 * {@link TransactionalEditingDomain} implementation that provides a
 * {@link Lifecycle} adapter. It is required by transactions, to send their
 * life-cycle notifications.
 * &lt;/p>&lt;p>
 * This interface is not intended to be implemented by clients, but by
 * editing domain providers.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @see TransactionalEditingDomain.Lifecycle
 * 
 * @since 1.3
 </body>
                </ownedComment>
                <generalization xmi:id="_8ry6oXcuEd-96YWU42lBhw" general="_8ry6oHcuEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_8ry6o3cuEd-96YWU42lBhw" name="transactionStarting">
                  <ownedComment xmi:id="_8ry6pHcuEd-96YWU42lBhw">
                    <body>
	 * Notifies me that a transaction has commenced its start sequence. There
	 * may be any number of steps implemented before requesting the editing
	 * domain to
	 * {@linkplain InternalTransactionalEditingDomain#activate(InternalTransaction)
	 * activate} it.
	 * 
	 * @param transaction
	 *            a transaction that is starting
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8r8EkHcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8r8EkXcuEd-96YWU42lBhw" name="transactionInterrupted">
                  <ownedComment xmi:id="_8r8EkncuEd-96YWU42lBhw">
                    <body>
	 * Notifies me that a transaction has been interrupted in its start
	 * sequence. There may be any number of steps implemented by the transaction
	 * that can be interrupted.
	 * 
	 * @param transaction
	 *            a transaction thatwas interrupted while starting
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8r8Ek3cuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8sF1kHcuEd-96YWU42lBhw" name="transactionStarted">
                  <ownedComment xmi:id="_8sF1kXcuEd-96YWU42lBhw">
                    <body>
	 * Notifies me that a transaction has completed its start sequence. There
	 * may be any number of steps implemented after requesting the editing
	 * domain to
	 * {@linkplain InternalTransactionalEditingDomain#activate(InternalTransaction)
	 * activate} it.
	 * 
	 * @param transaction
	 *            a transaction that has started
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8sF1kncuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8sF1k3cuEd-96YWU42lBhw" name="transactionClosing">
                  <ownedComment xmi:id="_8sF1lHcuEd-96YWU42lBhw">
                    <body>
	 * Notifies me that a transaction has commenced its commit or rollback
	 * sequence. There may be any number of steps implemented before requesting
	 * the editing domain to
	 * {@linkplain InternalTransactionalEditingDomain#deactivate(InternalTransaction)
	 * deactivate} it.
	 * 
	 * @param transaction
	 *            a transaction that is closing
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8sPmkHcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8sPmkXcuEd-96YWU42lBhw" name="transactionClosed">
                  <ownedComment xmi:id="_8sPmkncuEd-96YWU42lBhw">
                    <body>
	 * Notifies me that a transaction has completed its commit or rollback
	 * sequence. There may be any number of steps implemented after requesting
	 * the editing domain to
	 * {@linkplain InternalTransactionalEditingDomain#deactivate(InternalTransaction)
	 * deactivate} it.
	 * 
	 * @param transaction
	 *            a transaction that has closed
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8sPmk3cuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_8tIXYHcuEd-96YWU42lBhw" name="InternalTransaction">
                <ownedComment xmi:id="_8tSIYHcuEd-96YWU42lBhw">
                  <body>
 * An internal interface that must be provided by any implementation of the
 * public {@link Transaction} interface, in order to function correctly in
 * the transactional editing domain framework.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_8tb5YHcuEd-96YWU42lBhw" general="_0l8qUHctEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_8tb5YXcuEd-96YWU42lBhw" name="getRoot">
                  <ownedComment xmi:id="_8tb5YncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the root transaction (the one that has no parent).  This could
	 * be me if I am the root.
	 * 
	 * @return the root transaction in a nested transaction structure
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8tb5Y3cuEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8tlDUHcuEd-96YWU42lBhw" name="setParent">
                  <ownedComment xmi:id="_8tlDUXcuEd-96YWU42lBhw">
                    <body>
	 * Assigns my parent transaction (the one in which I am nested).  This
	 * must be done by the editing domain immediately upon activating me.
	 * 
	 * @param parent my parent transaction
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8tlDUncuEd-96YWU42lBhw" name="parent" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8tlDU3cuEd-96YWU42lBhw" name="start">
                  <ownedComment xmi:id="_8tu0UHcuEd-96YWU42lBhw">
                    <body>
	 * Starts me.  Usually, this will delegate to the editing domain
	 * to {@link InternalTransactionalEditingDomain#activate(InternalTransaction) activate}
	 * me.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that this call should block the current thread until the
	 * editing domain grants exclusive access.
	 * &lt;/p>
	 * 
	 * @throws InterruptedException if the current thread is interrupted while
	 *     waiting for activation
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_8t4lUHcuEd-96YWU42lBhw" name="abort">
                  <ownedComment xmi:id="_8t4lUXcuEd-96YWU42lBhw">
                    <body>
	 * Aborts the transaction with a reason given by the specified status.  This is
	 * used, for example, when a transaction is corrupted by another thread
	 * concurrently writing the model (obviously without an active transaction!).
	 * The transaction is expected to rollback when it attempts to commit, and to
	 * propagate this status up to the root transaction.
	 * 
	 * @param status a status object providing the reason.  It should be the status
	 *     attached to the eventual {@link RollbackException}, and should be
	 *     set as my {@link #setStatus(IStatus) status}
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8t4lUncuEd-96YWU42lBhw" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8t4lU3cuEd-96YWU42lBhw" name="add">
                  <ownedComment xmi:id="_8t4lVHcuEd-96YWU42lBhw">
                    <body>
	 * Adds the specified notification to the list of notifications received
	 * during this transaction.
	 * 
	 * @param notification the notification to add
	 * 
	 * @see #getNotifications()
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8t4lVXcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8t4lVncuEd-96YWU42lBhw" name="getNotifications">
                  <ownedComment xmi:id="_8t4lV3cuEd-96YWU42lBhw">
                    <body>
	 * Obtains the list of notifications that were received during execution
	 * of this transaction.  These are the notifications that later will
	 * be sent to pre-commit listeners, validation, and eventually to
	 * post-commit listeners (if I successfully commit).
	 * 
	 * @return my notifications
	 * 
	 * @see #add(Notification)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8t4lWHcuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8uBvQHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8t4lWXcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_8uBvQXcuEd-96YWU42lBhw" name="pause">
                  <ownedComment xmi:id="_8uBvQncuEd-96YWU42lBhw">
                    <body>
	 * Pauses me while a child transaction is active, so that I do not collect
	 * either notifications or recorded changes during that time.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_8uBvQ3cuEd-96YWU42lBhw" name="resume">
                  <ownedComment xmi:id="_8uBvRHcuEd-96YWU42lBhw">
                    <body>
	 * Resumes me after completion of a child transaction.  If the child
	 * committed, then I add its change description to my changes.
	 * 
	 * @param nestedChanges the nested transaction's recorded changes, or
	 *     &lt;code>null&lt;/code> if it rolled back (in which case, I do not add
	 *     anything to my changes)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uBvRXcuEd-96YWU42lBhw" name="nestedChanges" type="_0wrToHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8uLgQHcuEd-96YWU42lBhw" name="setStatus">
                  <ownedComment xmi:id="_8uLgQXcuEd-96YWU42lBhw">
                    <body>
	 * Sets the status of the transaction.
	 * 
	 * @param status my status
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uLgQncuEd-96YWU42lBhw" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8uLgQ3cuEd-96YWU42lBhw" name="isRollingBack">
                  <ownedComment xmi:id="_8uLgRHcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether this transaction or any of its ancestors is in the
	 * process of rolling back.
	 * 
	 * @return &lt;code>true&lt;/code> if I or my
	 *   {@link Transaction#getParent() parent} (if any) am rolling back;
	 *   &lt;code>false&lt;/code> otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uLgRXcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8uUqMHcuEd-96YWU42lBhw" name="getTriggers">
                  <ownedComment xmi:id="_8uUqMXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the triggers that were executed during my commit.
	 * 
	 * @return my pre-commit trigger commands, or &lt;code>null&lt;/code> if I have
	 *     no triggers (perhaps because the {@link Transaction#OPTION_NO_TRIGGERS}
	 *     was applied).  This may be a single {@link Command} or a
	 *     compound of multiple
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uUqMncuEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8uUqNHcuEd-96YWU42lBhw" name="addTriggers">
                  <ownedComment xmi:id="_8uUqNXcuEd-96YWU42lBhw">
                    <body>
	 * Adds a group of triggers that were executed during my commit.
	 * 
	 * @param triggers the triggers to add
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uUqNncuEd-96YWU42lBhw" name="triggers" type="_8uUqM3cuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8uebMXcuEd-96YWU42lBhw" name="startPrivileged">
                  <ownedComment xmi:id="_8uebMncuEd-96YWU42lBhw">
                    <body>
	 * Transfers ownership of this transaction to the specified
	 * privileged runnable.
	 *  
	 * @param runnable the runnable whose thread is to borrow me
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uoMMHcuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8uoMMXcuEd-96YWU42lBhw" name="endPrivileged">
                  <ownedComment xmi:id="_8uoMMncuEd-96YWU42lBhw">
                    <body>
	 * Returns me to my previous owner, upon completion of the specified
	 * privileged runnable.
	 * 
	 * @param runnable the runnable whose thread had borrowed me
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8uoMM3cuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8uebMHcuEd-96YWU42lBhw" name="PrivilegedRunnable" isLeaf="true">
                <ownedComment xmi:id="_8y8rgHcuEd-96YWU42lBhw">
                  <body>
 * Implementation of the privileged runnable, which allows a thread to lend
 * its transaction to another cooperating thread for synchronous execution.
 * 
 * @param &lt;T> the result type of the runnable
 * 
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_8y8rg3cuEd-96YWU42lBhw" general="_8y8rgncuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_8zF1cHcuEd-96YWU42lBhw" name="transaction" visibility="private" isLeaf="true" type="_8tIXYHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_8zPmcHcuEd-96YWU42lBhw" name="delegate" visibility="private" isLeaf="true" type="_0i9nwnctEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_8zZXcHcuEd-96YWU42lBhw" name="owner" visibility="private" isLeaf="true" type="_0nI9IHctEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_8zihYHcuEd-96YWU42lBhw" name="getTransaction" visibility="public">
                  <ownedComment xmi:id="_8zihYXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the transaction to which I provide access.
	 * 
	 * @return my transaction
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8zihYncuEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8zsSYHcuEd-96YWU42lBhw" name="getOwner" visibility="public">
                  <ownedComment xmi:id="_8zsSYXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the thread that created and owns me.  This thread is the
	 * original owner of my {@linkplain #getTransaction() transaction}.
	 * 
	 * @return my owner
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_8zsSYncuEd-96YWU42lBhw" type="_0nI9IHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_8zsSY3cuEd-96YWU42lBhw" name="run" visibility="public">
                  <ownedComment xmi:id="_8zsSZHcuEd-96YWU42lBhw">
                    <body>
	 * Runs my delegate in the context of the transaction that I share.
	 </body>
                  </ownedComment>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8xddw3cuEd-96YWU42lBhw" name="TransactionChangeRecorder">
                <ownedComment xmi:id="_9Gw_YHcuEd-96YWU42lBhw">
                  <body>
 * The change recorder for a {@link org.eclipse.emf.transaction.TransactionalEditingDomain},
 * used by transactions to record rollback information and to detect changes that
 * violate the transaction protocol.  It also forwards notifications to the
 * domain's currently active transaction.
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see InternalTransactionalEditingDomain#getChangeRecorder()
 * @see TransactionValidator
 * @see InternalTransaction#add(Notification)
 </body>
                </ownedComment>
                <generalization xmi:id="_9G6wYHcuEd-96YWU42lBhw" general="_9Gw_YncuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_9G6wYXcuEd-96YWU42lBhw" name="domain" visibility="private" type="_8wkF4HcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9HD6UHcuEd-96YWU42lBhw" name="paused" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9HNrUHcuEd-96YWU42lBhw" name="disposed" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9HW1QXcuEd-96YWU42lBhw" name="validateEdit" visibility="private" type="_9HW1QHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_9HgmQHcuEd-96YWU42lBhw" name="getEditingDomain" visibility="public" isLeaf="true">
                  <ownedComment xmi:id="_9HgmQXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the editing domain that I assist.
	 * 
	 * @return my editing domain
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9HqXQHcuEd-96YWU42lBhw" type="_8wkF4HcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9HqXQXcuEd-96YWU42lBhw" name="beginRecording" visibility="public">
                  <ownedComment xmi:id="_9HqXQncuEd-96YWU42lBhw">
                    <body>
	 * Starts recording changes in my editing domain.
	 * 
	 * @throws IllegalStateException if I have been {@link #dispose() disposed}
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9HqXQ3cuEd-96YWU42lBhw" name="endRecording" visibility="public">
                  <ownedComment xmi:id="_9HqXRHcuEd-96YWU42lBhw">
                    <body>
	 * Extends the inherited implementation to clear the reference to the
	 * change description returned.
	 * 
	 * @throws IllegalStateException if I have been {@link #dispose() disposed}
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9HzhMHcuEd-96YWU42lBhw" type="_0w-OknctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9HzhMncuEd-96YWU42lBhw" name="setTarget" visibility="public">
                  <ownedComment xmi:id="_9HzhM3cuEd-96YWU42lBhw">
                    <body>
	 * Overrides the superclass method to
	 * &lt;ul>
	 *   &lt;li>ignore the &quot;originalTargetObjects&quot; since we never resume recording
	 *       a paused change description&lt;/li>
	 *   &lt;li>ignore the &quot;targetObjects&quot; because we will never find, upon
	 *       upon consolidating changes, that any target object is unexpectedly
	 *       orphaned (as we always listen to everything in the resource set,
	 *       so will always get the appropriate removal notifications).  Also,
	 *       because we manage an entire resource set on behalf of an editing
	 *       domain, disposal by removing ourselves from the adapters lists of
	 *       our targets is not an issue because we cannot cause a memory leak
	 *       outside of the scope of the editing domain and its resource set&lt;/li>
	 * &lt;/ul>
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9H9SMHcuEd-96YWU42lBhw" name="target" type="_9HzhMXcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9IHDMHcuEd-96YWU42lBhw" name="notifyChanged" visibility="public">
                  <ownedComment xmi:id="_9IHDMXcuEd-96YWU42lBhw">
                    <body>
	 * Detects whether the change indicated by the specified notification
	 * violates the transaction protocol and/or how it changes the load state of
	 * a resource (if it all), in addition to recording the change (if I am
	 * currently recording) and passing it along to the domain's current
	 * transaction (if any).
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9IHDMncuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9IQNIHcuEd-96YWU42lBhw" name="processResourceSetNotification" visibility="protected">
                  <ownedComment xmi:id="_9IQNIXcuEd-96YWU42lBhw">
                    <body>
	 * Analyzes a resource set notification for changes in the load state of
	 * resources and violations of the transaction protocol before passing it
	 * to the active transaction (if any).
	 * 
	 * @param notification a notification from the resource set
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9IQNIncuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9IZ-IHcuEd-96YWU42lBhw" name="processResourceNotification" visibility="protected">
                  <ownedComment xmi:id="_9IZ-IXcuEd-96YWU42lBhw">
                    <body>
	 * Analyzes a resource notification for changes in its load state
	 * and violations of the transaction protocol before passing it
	 * to the active transaction (if any).
	 * 
	 * @param notification a notification from a resource
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9IZ-IncuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9IZ-I3cuEd-96YWU42lBhw" name="processObjectNotification" visibility="protected">
                  <ownedComment xmi:id="_9IZ-JHcuEd-96YWU42lBhw">
                    <body>
	 * Analyzes an object notification for violations of the transaction
	 * protocol before passing it to the active transaction (if any).
	 * 
	 * @param notification a notification from a model element
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9IjIEHcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9IjIEXcuEd-96YWU42lBhw" name="appendNotification" visibility="protected">
                  <ownedComment xmi:id="_9IjIEncuEd-96YWU42lBhw">
                    <body>
	 * Appends the specified notification to the batch for the active
	 * transaction, to be distributed when it commits.  If there is no
	 * active transaction, then it is sent immediately to post-commit
	 * listeners (unbatched).  This method applies the read/write transaction
	 * protocol check to this notification.
	 * 
	 * @param notification the notification to append
	 * 
	 * @throws IllegalStateException if the notification is not a result of
	 *     reading the resource set and no transaction is active or the
	 *     active transaction is read-only
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9Is5EHcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Is5EXcuEd-96YWU42lBhw" name="assertWriting" visibility="protected">
                  <ownedComment xmi:id="_9Is5EncuEd-96YWU42lBhw">
                    <body>
	 * Implements the read/write transaction protocol check.
	 * 
	 * @throws IllegalStateException if no transaction is active or the
	 *     active transaction is read-only
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9Is5E3cuEd-96YWU42lBhw" name="pause" visibility="public">
                  <ownedComment xmi:id="_9Is5FHcuEd-96YWU42lBhw">
                    <body>
	 * Temporarily pauses the recording of the current change description.
	 * 
	 * @throws IllegalStateException if I am not currently recording
	 * 
	 * @see ChangeRecorder#isRecording()
	 * @see #isPaused()
	 * @see #resume()
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9I2qEHcuEd-96YWU42lBhw" name="isPaused" visibility="public">
                  <ownedComment xmi:id="_9I2qEXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether I am currently paused in my recording.
	 * 
	 * @see ChangeRecorder#isRecording()
	 * @see #pause()
	 * @see #resume()
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9I2qEncuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9I2qE3cuEd-96YWU42lBhw" name="resume" visibility="public">
                  <ownedComment xmi:id="_9I2qFHcuEd-96YWU42lBhw">
                    <body>
	 * Resumes the paused recording of the current change description.
	 * 
	 * @throws IllegalStateException if I am not currently paused
	 * 
	 * @see ChangeRecorder#isRecording()
	 * @see #pause()
	 * @see #isPaused()
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9I_0AHcuEd-96YWU42lBhw" name="dispose" visibility="public">
                  <ownedComment xmi:id="_9I_0AXcuEd-96YWU42lBhw">
                    <body>
	 * Extends the inherited implementation to remove myself from all adapters
	 * that I can find in my editing domain.
	 * 
	 * @since 1.1
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9JJlAHcuEd-96YWU42lBhw" name="getValidateEditSupport" visibility="public">
                  <ownedParameter xmi:id="_9JJlAXcuEd-96YWU42lBhw" type="_9HW1QHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9JJlAncuEd-96YWU42lBhw" name="setValidateEditSupport" visibility="public">
                  <ownedComment xmi:id="_9JJlA3cuEd-96YWU42lBhw">
                    <body>
	 * Sets my validate-edit support, if applicable, for the duration of a
	 * root transaction.
	 * 
	 * @param validateEdit my validate-edit support, or &lt;code>null&lt;/code>
	 * 
	 * @since 1.2
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9JTWAHcuEd-96YWU42lBhw" name="validateEdit" type="_9HW1QHcuEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_9XwBsHcuEd-96YWU42lBhw" name="TransactionValidator">
                <ownedComment xmi:id="_9X5ysHcuEd-96YWU42lBhw">
                  <body>
 * Interface for an object that validates a transaction when it commits.
 * Different implementations are provided for read and for write transactions.
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ReadOnlyValidatorImpl
 * @see ReadWriteValidatorImpl
 * @see Transaction#commit()
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_9YC8oHcuEd-96YWU42lBhw" name="NULL" type="_9XwBsHcuEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_9YC8oXcuEd-96YWU42lBhw">
                    <body>
	 * A &quot;null&quot; instance that is suitable for use when there is no active
	 * transaction. It does not provide any notifications, nor does it validate
	 * anything.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_9YC8oncuEd-96YWU42lBhw" name="add">
                  <ownedComment xmi:id="_9YC8o3cuEd-96YWU42lBhw">
                    <body>
	 * Adds a transaction for eventual validation.  Transactions must be added
	 * to the editing domain's current validator as soon as they are activated,
	 * so that it does not miss any notifications.
	 * 
	 * @param transaction the transaction (root or a nested transaction) to add
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9YMtoHcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9YMtoXcuEd-96YWU42lBhw" name="remove">
                  <ownedComment xmi:id="_9YMtoncuEd-96YWU42lBhw">
                    <body>
	 * Removes a transaction that has rolled back.  Transactions must be removed
	 * as soon as they roll back.  Removal ensures that we do not pass to the
	 * resource set listeners any notifications of changes that were rolled back.
	 * &lt;p>
	 * Note that, for efficiency, transactions that have successfully committed
	 * should also be removed after they have been deactivated.  This ensures
	 * that they are no longer referenced by validator and can, therefore, be
	 * reclaimed (the validator retains the notifications, only).
	 * &lt;/p>
	 * 
	 * @param transaction the transaction (root or a nested transaction) to remove
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9YMto3cuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9YWeoHcuEd-96YWU42lBhw" name="validate">
                  <ownedComment xmi:id="_9YWeoXcuEd-96YWU42lBhw">
                    <body>
	 * Performs the validation step of a commit.
	 * 
	 * @param tx the transaction to validate
	 * 
	 * @return the status of validation.  If the severity is error or worse,
	 *     then the transaction &lt;em>must&lt;/em> roll back, and this status
	 *     included in the exception
	 *     
	 * @see Transaction#commit()
	 * @see RollbackException
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9YWeoncuEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9YWeo3cuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9YfokHcuEd-96YWU42lBhw" name="getNotificationsForValidation">
                  <ownedComment xmi:id="_9YfokXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the notifications received, in order, during the execution of
	 * the (possibly nested) transaction(s) that I am validating.
	 * 
	 * @param tx the transaction to be validated
	 * 
	 * @return the transaction's notifications, or &lt;code>null&lt;/code> if the
	 *     transaction has not started yet
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9YfokncuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9YpZkHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9Yfok3cuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_9ZGFgHcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9ZGFgXcuEd-96YWU42lBhw" name="getNotificationsForPrecommit">
                  <ownedComment xmi:id="_9ZGFgncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the notifications that I need to broadcast in a pre-commit
	 * resource-change event for the specified transaction.  Note that this
	 * does not include notifications from &quot;no-triggers&quot; transactions.
	 * 
	 * @param tx the transaction to be broadcast
	 * 
	 * @return those of the transaction's notifications that are eligible to
	 *     be broadcast, or &lt;code>null&lt;/code> if the transaction has not started
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9ZGFg3cuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9ZPPcXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9ZPPcHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_9ZZAcHcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9ZZAcXcuEd-96YWU42lBhw" name="getNotificationsForPostcommit">
                  <ownedComment xmi:id="_9ZZAcncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the notifications that I need to broadcast in a post-commit
	 * resource-change event for the specified transaction.  Note that this
	 * does not include notifications from &quot;silent&quot; transactions.
	 * 
	 * @param tx the transaction to be broadcast
	 * 
	 * @return those of the transaction's notifications that are eligible to
	 *     be broadcast, or &lt;code>null&lt;/code> if the transaction has not started
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9ZZAc3cuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9ZixcXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9ZixcHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_9Zr7YHcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Zr7YXcuEd-96YWU42lBhw" name="dispose">
                  <ownedComment xmi:id="_9Zr7YncuEd-96YWU42lBhw">
                    <body>
	 * Disposes me by clearing my state and cleaning up any resources that I
	 * am retaining.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <nestedClassifier xmi:type="uml:Interface" xmi:id="_9Zr7Y3cuEd-96YWU42lBhw" name="Factory">
                  <ownedComment xmi:id="_9Z1sYHcuEd-96YWU42lBhw">
                    <body>
     * Interface that clients implement to define a validator factory.
     * 
     * @since 1.1
     * 
     * @author David Cummings (dcummin)
     </body>
                  </ownedComment>
                  <ownedAttribute xmi:id="_9Z1sYXcuEd-96YWU42lBhw" name="INSTANCE" type="_9Zr7Y3cuEd-96YWU42lBhw" isUnique="false">
                    <ownedComment xmi:id="_9Z_dYHcuEd-96YWU42lBhw">
                      <body>
         * The shared default implementation of the validator factory interface.
         </body>
                    </ownedComment>
                  </ownedAttribute>
                  <ownedOperation xmi:id="_9Z_dYXcuEd-96YWU42lBhw" name="createReadOnlyValidator" visibility="public">
                    <ownedComment xmi:id="_9Z_dYncuEd-96YWU42lBhw">
                      <body>
         * Creates and returns a &lt;code>TransactionValidator&lt;/code> which is
         * used to validate a read write transaction.
         * 
         * @since 1.1
         *
         * @return the transaction validator that will validate the 
         *          read write transaction
         </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_9Z_dY3cuEd-96YWU42lBhw" type="_9XwBsHcuEd-96YWU42lBhw" direction="return"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_9aInUHcuEd-96YWU42lBhw" name="createReadWriteValidator" visibility="public">
                    <ownedComment xmi:id="_9aInUXcuEd-96YWU42lBhw">
                      <body>
         * Creates and returns a &lt;code>TransactionValidator&lt;/code> which is
         * used to validate a read only transaction.
         * 
         * @since 1.1
         *
         * @return the transaction validator that will validate the 
         *          read only transaction
         </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_9aInUncuEd-96YWU42lBhw" type="_9XwBsHcuEd-96YWU42lBhw" direction="return"/>
                  </ownedOperation>
                </nestedClassifier>
              </packagedElement>
              <packagedElement xmi:type="uml:Package" xmi:id="_8y8rgXcuEd-96YWU42lBhw" name="RunnableWithResult">
                <packagedElement xmi:type="uml:Class" xmi:id="_8y8rgncuEd-96YWU42lBhw" name="Impl"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_80lqQHcuEd-96YWU42lBhw" name="ReadOnlyValidatorImpl">
                <ownedComment xmi:id="_80u0MHcuEd-96YWU42lBhw">
                  <body>
 * A validator for read-only transactions.  It provides all of the notifications
 * (in order) that occurred during the transaction, but does not validate them
 * (validation always passes with no problems).
 * &lt;p>
 * A read-only validator should be created for the root transaction of any
 * nested read-only transaction structure, when the root transaction is
 * activated.  As child transactions are activated, they must be
 * {@link #add(InternalTransaction) added} to me so that I may correctly track
 * which notifications were received during which transaction, and at which
 * time relative to the start and completion of nested transactions.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ReadWriteValidatorImpl
 </body>
                </ownedComment>
                <generalization xmi:id="_80u0MncuEd-96YWU42lBhw" general="_80u0MXcuEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_80u0M3cuEd-96YWU42lBhw" name="validate" visibility="public">
                  <ownedComment xmi:id="_80u0NHcuEd-96YWU42lBhw">
                    <body>
	 * I always return an OK status because there is never anything to validate
	 * in a read-only transaction.
	 * 
	 * @return an OK status, always
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_804lMHcuEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_80u0MXcuEd-96YWU42lBhw" name="ReadWriteValidatorImpl" clientDependency="_82hj8XcuEd-96YWU42lBhw">
                <ownedComment xmi:id="_82hj8HcuEd-96YWU42lBhw">
                  <body>
 * A validator for read/write transactions.  It provides all of the notifications
 * (in order) that occurred during the transaction, and validates them to detect
 * changes that would violate model integrity.
 * &lt;p>
 * A read/write validator should be created for the root transaction of any
 * nested read/write transaction structure, when the root transaction is
 * activated.  As child transactions are activated, they must be
 * {@link #add(InternalTransaction) added} to me so that I may correctly track
 * which notifications were received during which transaction, and at which
 * time relative to the start and completion of nested transactions.
 * &lt;/p>
 * &lt;p>
 * Whenever a transaction (nested or otherwise) is rolled back, it must be
 * {@link #remove(InternalTransaction) removed} from me so that I may forget
 * the notifications received for any changes that it or its nested transactions
 * made.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ReadOnlyValidatorImpl
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_82qt4HcuEd-96YWU42lBhw" name="VALIDATION" isLeaf="true" isStatic="true" type="_82hj8ncuEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_82qt4XcuEd-96YWU42lBhw">
                    <body> Bit indicating that we are collecting notifications for validation. </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_820e4HcuEd-96YWU42lBhw" name="PRECOMMIT" isLeaf="true" isStatic="true" type="_82hj8ncuEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_820e4XcuEd-96YWU42lBhw">
                    <body> Bit indicating that we are collecting notifications for pre-commit. </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_82-P4HcuEd-96YWU42lBhw" name="POSTCOMMIT" isLeaf="true" isStatic="true" type="_82hj8ncuEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_82-P4XcuEd-96YWU42lBhw">
                    <body> Bit indicating that we are collecting notifications for post-commit. </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_83HZ0XcuEd-96YWU42lBhw" name="tree" visibility="private" type="_890ewHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_83RK0HcuEd-96YWU42lBhw" name="transactionToPrecommit" visibility="private" type="_890ewHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_83RK0XcuEd-96YWU42lBhw" name="txToNode" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_83HZ0HcuEd-96YWU42lBhw" name="NotificationTree" visibility="private">
                  <ownedComment xmi:id="_85NEgXcuEd-96YWU42lBhw">
                    <body>
	 * A tree mirroring the nesting structure of transactions.  The tree
	 * records, for every transaction:
	 * &lt;ul>
	 *   &lt;li>the notifications (by directly referencing the mutable
	 *       notification list)&lt;/li>
	 *   &lt;li>tree nodes for corresponding to the the children of the transaction
	 *       (transactions otherwise only know their parents)&lt;/li>
	 *   &lt;li>the number of notifications in the parent transaction that
	 *       preceded its activation, if it has a parent&lt;/li>
	 *   &lt;li>a bit mask indicating which kinds of notifications (pre/post commit
	 *       and validation) the transaction provides&lt;/li>
	 * &lt;/ul>
	 * &lt;p>
	 * The third item above is important in reconstructing the complete
	 * ordering (in linear time) of the notifications received during nesting
	 * transactions, so that both validation and post-commit listeners get
	 * the correct sequence of events.
	 * &lt;/p>
	 * 
	 * @author Christian W. Damus (cdamus)
	 </body>
                  </ownedComment>
                  <ownedAttribute xmi:id="_85W1gHcuEd-96YWU42lBhw" name="children" visibility="private" isLeaf="true" type="_890ewHcuEd-96YWU42lBhw" isUnique="false">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_85f_cHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_85W1gXcuEd-96YWU42lBhw"/>
                  </ownedAttribute>
                  <ownedAttribute xmi:id="_85pwcHcuEd-96YWU42lBhw" name="parentNotificationCount" visibility="private" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
                  <ownedAttribute xmi:id="_85pwcXcuEd-96YWU42lBhw" name="transaction" visibility="private" type="_8tIXYHcuEd-96YWU42lBhw" isUnique="false"/>
                  <ownedAttribute xmi:id="_85zhcHcuEd-96YWU42lBhw" name="notifications" visibility="private" type="_zp5RxXctEd-96YWU42lBhw" isUnique="false">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_858rYXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_858rYHcuEd-96YWU42lBhw"/>
                  </ownedAttribute>
                  <ownedAttribute xmi:id="_858rYncuEd-96YWU42lBhw" name="notificationMask" visibility="private" isLeaf="true" type="_82hj8ncuEd-96YWU42lBhw" isUnique="false"/>
                  <ownedOperation xmi:id="_86GcYHcuEd-96YWU42lBhw" name="addChild">
                    <ownedComment xmi:id="_86GcYXcuEd-96YWU42lBhw">
                      <body>
		 * Adds a child transaction to me.  If this transaction has no parent,
		 * then it is the root transaction.
		 * 
		 * @param child the child transaction to add
		 * @param notificationMask a mask of the {@link #POSTCOMMIT}, {@link #PRECOMMIT}, and
		 *     {@link #VALIDATION} bits of the kinds of notifications that the
		 *     transaction collects
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_86PmUHcuEd-96YWU42lBhw" type="_890ewHcuEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_86PmUXcuEd-96YWU42lBhw" name="child" type="_8tIXYHcuEd-96YWU42lBhw"/>
                    <ownedParameter xmi:id="_86PmUncuEd-96YWU42lBhw" name="notificationMask" type="_82hj8ncuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_86ZXUHcuEd-96YWU42lBhw" name="getChildren">
                    <ownedComment xmi:id="_86ZXUXcuEd-96YWU42lBhw">
                      <body>
		 * Obtains my child nodes, storing the notifications from my
		 * transaction's children.
		 * 
		 * @return my children
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_86ZXUncuEd-96YWU42lBhw" type="_890ewHcuEd-96YWU42lBhw" direction="return">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_86jIUHcuEd-96YWU42lBhw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_86ZXU3cuEd-96YWU42lBhw"/>
                    </ownedParameter>
                  </ownedOperation>
                  <ownedOperation xmi:id="_86jIUXcuEd-96YWU42lBhw" name="collectNotifications">
                    <ownedComment xmi:id="_86jIUncuEd-96YWU42lBhw">
                      <body>
		 * Collects all of the notifications from me and my children, in the
		 * correct time-linear order.
		 * 
		 * @param purpose a bit indicating what kind of notifications
		 *     to collect (for what purpose we are collecting them)
		 * 
		 * @return my notifications (which might be an empty list)
		 * 
		 * @see ReadWriteValidatorImpl#VALIDATION
		 * @see ReadWriteValidatorImpl#PRECOMMIT
		 * @see ReadWriteValidatorImpl#POSTCOMMIT
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_86jIU3cuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_86sSQXcuEd-96YWU42lBhw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_86sSQHcuEd-96YWU42lBhw"/>
                    </ownedParameter>
                    <ownedParameter xmi:id="_862DQHcuEd-96YWU42lBhw" name="purpose" type="_82hj8ncuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_862DQXcuEd-96YWU42lBhw" name="collectNotifications" visibility="private">
                    <ownedComment xmi:id="_862DQncuEd-96YWU42lBhw">
                      <body>
		 * Recursive implementation of the {@link #collectNotifications()} method.
		 * 
		 * @param notifications the accumulator list
		 * @param purpose a bit indicating what kind of notifications
		 *     to collect (for what purpose we are collecting them)
		 * 
		 * @see #collectNotifications()
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_862DQ3cuEd-96YWU42lBhw" name="notifications" type="_QJNf43OxEd-nKvj-XTCBkg">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_86_0QXcuEd-96YWU42lBhw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_86_0QHcuEd-96YWU42lBhw"/>
                    </ownedParameter>
                    <ownedParameter xmi:id="_86_0QncuEd-96YWU42lBhw" name="purpose" type="_82hj8ncuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_87I-MHcuEd-96YWU42lBhw" name="setRolledBack">
                    <ownedComment xmi:id="_87I-MXcuEd-96YWU42lBhw">
                      <body>
		 * Indicates that my transaction has been rolled back.  This will
		 * reduce the list of notifications that I store to only those indicating
		 * changes that rollback did not revert (i.e., resource-level changes
		 * that are not semantic changes, such as resource load/unload, URI
		 * change, etc.).
		 </body>
                    </ownedComment>
                  </ownedOperation>
                  <ownedOperation xmi:id="_87I-MncuEd-96YWU42lBhw" name="isUndoableObjectChange" visibility="private">
                    <ownedComment xmi:id="_87I-M3cuEd-96YWU42lBhw">
                      <body>
		 * Determines whether the specified notification indicates an undoable
		 * change to a model element.  This filters out non-model changes such
		 * as changes to the modification/loaded state of resources, their
		 * URIs, etc.
		 * 
		 * @param notification a notification
		 * @return &lt;code>true&lt;/code> if it represents an undoable change to an
		 *     object or a resource (the contents list, in particular)
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_87I-NHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                    <ownedParameter xmi:id="_87SvMHcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_87SvMXcuEd-96YWU42lBhw" name="getNotifications">
                    <ownedComment xmi:id="_87SvMncuEd-96YWU42lBhw">
                      <body>
		 * Obtains my corresponding transaction's notifications.
		 * 
		 * @return my notifications
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_87SvM3cuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_87b5IXcuEd-96YWU42lBhw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_87b5IHcuEd-96YWU42lBhw"/>
                    </ownedParameter>
                  </ownedOperation>
                  <ownedOperation xmi:id="_87lqIHcuEd-96YWU42lBhw" name="detachTransaction">
                    <ownedComment xmi:id="_87lqIXcuEd-96YWU42lBhw">
                      <body>
		 * Detaches the node from its transaction.
		 </body>
                    </ownedComment>
                  </ownedOperation>
                </nestedClassifier>
                <ownedOperation xmi:id="_83a70HcuEd-96YWU42lBhw" name="add" visibility="public">
                  <ownedComment xmi:id="_83a70XcuEd-96YWU42lBhw">
                    <body>
	 * Adds the specified transaction to me for validation.  This must be called
	 * when the transaction is activated.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_83kFwHcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_83kFwXcuEd-96YWU42lBhw" name="remove" visibility="public">
                  <ownedComment xmi:id="_83kFwncuEd-96YWU42lBhw">
                    <body>
	 * Removes the specified transaction from me.  This must be called
	 * when the transaction is rolled back, and is recommended also after a
	 * successful commit.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_83t2wHcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_83t2wXcuEd-96YWU42lBhw" name="getNotificationsForValidation" visibility="public">
                  <ownedParameter xmi:id="_83t2wncuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_833AsXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_833AsHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_833AsncuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_84AxsHcuEd-96YWU42lBhw" name="getNotificationsForPrecommit" visibility="public">
                  <ownedParameter xmi:id="_84AxsXcuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_84KisHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_84AxsncuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_84KisXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_84KisncuEd-96YWU42lBhw" name="getNotificationsForPostcommit" visibility="public">
                  <ownedParameter xmi:id="_84TsoHcuEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_84TsoncuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_84TsoXcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_84ddoHcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_84ddoXcuEd-96YWU42lBhw" name="findTree" visibility="private">
                  <ownedComment xmi:id="_84ddoncuEd-96YWU42lBhw">
                    <body>
	 * Finds the specified transaction's corresponding node in the notification
	 * tree structure that I maintain.
	 * 
	 * @param tx the transaction to search for
	 * 
	 * @return the corresponding notification tree node, or
	 *    &lt;code>null&lt;/code> if this transaction has not yet been added to me
	 *    or has already completed (in which case, it is no longer in my map)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_84nOoHcuEd-96YWU42lBhw" type="_890ewHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_84nOoXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_84nOoncuEd-96YWU42lBhw" name="validate" visibility="public">
                  <ownedParameter xmi:id="_84wYkHcuEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_84wYkXcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_84wYkncuEd-96YWU42lBhw" name="createValidator" visibility="protected">
                  <ownedComment xmi:id="_84wYk3cuEd-96YWU42lBhw">
                    <body>
	 * Creates a validator which will be responsible for the transaction validation
     *
     * @since 1.1
     *
	 * @return the validator
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_846Jk3cuEd-96YWU42lBhw" type="_846JkncuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_85DTgHcuEd-96YWU42lBhw" name="dispose" visibility="public"/>
                <ownedOperation xmi:id="_85DTgXcuEd-96YWU42lBhw" name="computeNotificationMask" visibility="private" isStatic="true">
                  <ownedComment xmi:id="_85DTgncuEd-96YWU42lBhw">
                    <body>
	 * Computes a mask of notification kinds that the specified transaction
	 * supports.  The notification kinds indicate which functions that use
	 * notifications are enabled for the transaction.
	 * 
	 * @param transaction a transaction
	 * @return a mask of the {@link #POSTCOMMIT}, {@link #PRECOMMIT}, and
	 *     {@link #VALIDATION} bits
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_85DTg3cuEd-96YWU42lBhw" type="_82hj8ncuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_85NEgHcuEd-96YWU42lBhw" name="transaction" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_82hj8XcuEd-96YWU42lBhw" name="ReadWriteValidatorImpl extends TransactionValidator" supplier="_9XwBsHcuEd-96YWU42lBhw" client="_80u0MXcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_890ewHcuEd-96YWU42lBhw" name="NotificationTree"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9CSvEHcuEd-96YWU42lBhw" name="ResourceSetManager" isLeaf="true">
                <ownedComment xmi:id="_9CSvEXcuEd-96YWU42lBhw">
                  <body>
 * The resource set manager keeps track of the load state of {@link Resource}s
 * in a resource set managed by a transactional editing domain.  It assists in
 * the enforcement of write transaction semantics for certain kinds of changes
 * to the state of a resource (in particular, its contents).
 * &lt;p>
 * The resource set manager is a singleton rather than a per-editing-domain
 * instance primarily because the notification filters need to be able to
 * distinguish events coming from loading/unloading resources, and filters do
 * not have any editing domain context.  This is not a problem, as the resources
 * are tracked by their object identity, so their states are absolute, not
 * relative to any particular editing domain.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_9CcgEHcuEd-96YWU42lBhw" name="INSTANCE" visibility="private" isLeaf="true" isStatic="true" type="_9CSvEHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9ClqAHcuEd-96YWU42lBhw" name="loadingResources" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9CvbAHcuEd-96YWU42lBhw" name="loadedResources" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9C5MAHcuEd-96YWU42lBhw" name="unloadingResources" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedOperation xmi:id="_9C5MAXcuEd-96YWU42lBhw" name="getInstance" visibility="public" isStatic="true">
                  <ownedComment xmi:id="_9C5MAncuEd-96YWU42lBhw">
                    <body>
	 * Obtains the singleton manager instance.
	 * 
	 * @return the singleton instance
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9DCV8HcuEd-96YWU42lBhw" type="_9CSvEHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9DMG8HcuEd-96YWU42lBhw" name="observe" visibility="public">
                  <ownedComment xmi:id="_9DMG8XcuEd-96YWU42lBhw">
                    <body>
	 * Observes the specified resource set, usually only when the editing domain
	 * is initialized.  This resource set may already contain resources in a
	 * variety of states, so I will examine each of them in turn and record
	 * their states.
	 * 
	 * @param rset a resource set
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9DMG8ncuEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9DfB4HcuEd-96YWU42lBhw" name="observe" visibility="public">
                  <ownedComment xmi:id="_9DfB4XcuEd-96YWU42lBhw">
                    <body>
	 * Analyzes a notification from a resource set for any potential state
	 * changes in its resources.
	 * 
	 * @param rset a resource set sending a notification
	 * @param notification the notification from the resource set
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9Doy4HcuEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9Doy4XcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Dx80HcuEd-96YWU42lBhw" name="observe" visibility="private">
                  <ownedComment xmi:id="_9Dx80XcuEd-96YWU42lBhw">
                    <body>
	 * Analyzes the current state of a resource.
	 * 
	 * @param res a resource to analyze
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9Dx80ncuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9Dx803cuEd-96YWU42lBhw" name="observe" visibility="public">
                  <ownedComment xmi:id="_9Dx81HcuEd-96YWU42lBhw">
                    <body>
	 * Analyzes a notification from a resource for any potential state change.
	 * 
	 * @param res a resource
	 * @param notification the notification from the resource
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9D7t0HcuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9D7t0XcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9EFe0HcuEd-96YWU42lBhw" name="isLoaded" visibility="public">
                  <ownedComment xmi:id="_9EFe0XcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified resource is currently loaded.
	 * 
	 * @param res a resource
	 * @return &lt;code>true&lt;/code> if the resource has completed loading and is
	 *     not now unloading; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9EFe0ncuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9EFe03cuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9EOowHcuEd-96YWU42lBhw" name="isLoading" visibility="public">
                  <ownedComment xmi:id="_9EOowXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified resource is currently loading.
	 * 
	 * @param res a resource
	 * @return &lt;code>true&lt;/code> if the resource is not yet loaded but is in
	 *     the process of loading; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9EOowncuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9EOow3cuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9EYZwHcuEd-96YWU42lBhw" name="isUnloading" visibility="public">
                  <ownedComment xmi:id="_9EYZwXcuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified resource is currently unloading.
	 * 
	 * @param res a resource
	 * @return &lt;code>true&lt;/code> if the resource is loaded but is in
	 *     the process of unloading; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9EiKwHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9EiKwXcuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9EiKwncuEd-96YWU42lBhw" name="isUnloaded" visibility="public">
                  <ownedComment xmi:id="_9EiKw3cuEd-96YWU42lBhw">
                    <body>
	 * Queries whether the specified resource is currently unloaded.
	 * 
	 * @param res a resource
	 * @return &lt;code>true&lt;/code> if the resource has completed unloading and is
	 *     not now loading; &lt;code>false&lt;/code>, otherwise
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9ErUsHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9ErUsXcuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9ErUsncuEd-96YWU42lBhw" name="setLoaded" visibility="private">
                  <ownedComment xmi:id="_9ErUs3cuEd-96YWU42lBhw">
                    <body>
	 * Records the specified resource's state as 'loaded'.
	 * 
	 * @param res a loaded resource
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9E1FsHcuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9E1FsXcuEd-96YWU42lBhw" name="setLoading" visibility="private">
                  <ownedComment xmi:id="_9E1FsncuEd-96YWU42lBhw">
                    <body>
	 * Records the specified resource's state as 'loading'.
	 * 
	 * @param res a loading resource
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9E-PoHcuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9E-PoXcuEd-96YWU42lBhw" name="setUnloading" visibility="private">
                  <ownedComment xmi:id="_9E-PoncuEd-96YWU42lBhw">
                    <body>
	 * Records the specified resource's state as 'unloading'.
	 * 
	 * @param res an unloading resource
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9E-Po3cuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9FIAoHcuEd-96YWU42lBhw" name="setUnloaded" visibility="private">
                  <ownedComment xmi:id="_9FIAoXcuEd-96YWU42lBhw">
                    <body>
	 * Records the specified resource's state as 'unloaded'.
	 * 
	 * @param res an unloaded resource
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9FIAoncuEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9NLJYXcuEd-96YWU42lBhw" name="TransactionImpl extends InternalTransaction" supplier="_8tIXYHcuEd-96YWU42lBhw" client="_8i2aAncuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9fDjkHcuEd-96YWU42lBhw" name="TransactionalCommandStackImpl">
                <ownedComment xmi:id="_9fDjkXcuEd-96YWU42lBhw">
                  <body>
 * The default implementation of the transactional editing domain command stack.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_9fDjkncuEd-96YWU42lBhw" general="_8gUqcHcuEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_9fMtgHcuEd-96YWU42lBhw" name="doExecute" visibility="protected">
                  <ownedComment xmi:id="_9fMtgXcuEd-96YWU42lBhw">
                    <body>
     * {@inheritDoc}
     * 
     *  @since 1.1
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9fWegHcuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9fWegXcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9fgPgHcuEd-96YWU42lBhw" name="handleRollback" visibility="protected">
                  <ownedComment xmi:id="_9fgPgXcuEd-96YWU42lBhw">
                    <body>
     * Extends the superclass implementation to first pop the failed command
     * off of the stack, if it was already appended.
     * 
     * @since 1.1
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9fgPgncuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9fpZcHcuEd-96YWU42lBhw" name="rbe" type="_0hoLAHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9fzKcHcuEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_9fzKcXcuEd-96YWU42lBhw">
                    <body>
     * Extends the inherited implementation by invoking it within the context of
     * an undo transaction (a read/write transaction with the
     * {@link #getUndoRedoOptions() undo/redo options}).
     </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9fzKcncuEd-96YWU42lBhw" name="canRedo" visibility="public">
                  <ownedComment xmi:id="_9fzKc3cuEd-96YWU42lBhw">
                    <body>
	 * Extends the inherited implementation to consider the redoability of
	 * {@link ConditionalRedoCommand}s.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9fzKdHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9f87cHcuEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_9f87cXcuEd-96YWU42lBhw">
                    <body>
	 * Extends the inherited implementation by invoking it within the context
	 * of a redo transaction (a read/write transaction with the
	 * {@link #getUndoRedoOptions() undo/redo options}).
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9f87cncuEd-96YWU42lBhw" name="createTransaction" visibility="public">
                  <ownedParameter xmi:id="_9gGFYHcuEd-96YWU42lBhw" type="_8i2aAHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_9gGFYXcuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9gP2YHcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9gP2YXcuEd-96YWU42lBhw" name="executeTriggers" visibility="public">
                  <ownedParameter xmi:id="_9gP2YncuEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_9gZAUHcuEd-96YWU42lBhw" name="triggers" type="_vowe8HcqEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9gixUHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9gZAUXcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_9gixUXcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9gixUncuEd-96YWU42lBhw" name="dispose" visibility="public"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_9mzKUHcuEd-96YWU42lBhw" name="TransactionalEditingDomainImpl" clientDependency="_9mzKVHcuEd-96YWU42lBhw _9mzKVncuEd-96YWU42lBhw _9m87UXcuEd-96YWU42lBhw">
                <ownedComment xmi:id="_9mzKUXcuEd-96YWU42lBhw">
                  <body>
 * The default implementation of the transactional editing domain. 
 * &lt;p>
 * Since 1.2, this class implements the {@link Adaptable} interface to adapt
 * to the following optional API:
 * &lt;/p>
 * &lt;ul>
 *   &lt;li>{@link TransactionalEditingDomain.DefaultOptions}&lt;/li>
 *   &lt;li>{@link TransactionalEditingDomain.Lifecycle} (since 1.3)&lt;/li>
 *   &lt;li>{@link Transaction.Option.Registry} (since 1.3)&lt;/li>
 * &lt;/ul>
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_9mzKU3cuEd-96YWU42lBhw" general="_9mzKUncuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_9m87UncuEd-96YWU42lBhw" name="id" visibility="private" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_9nGsUHcuEd-96YWU42lBhw" name="recorder" visibility="private" type="_8xddw3cuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9nP2QHcuEd-96YWU42lBhw" name="activeTransaction" visibility="private" type="_8tIXYHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9nP2QXcuEd-96YWU42lBhw" name="validator" visibility="private" type="_9XwBsHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9nixMHcuEd-96YWU42lBhw" name="validatorFactory" visibility="private" type="_9Zr7Y3cuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9nsiMHcuEd-96YWU42lBhw" name="defaultTransactionOptions" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9n2TMHcuEd-96YWU42lBhw" name="defaultTransactionOptionsRO" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9n_dIncuEd-96YWU42lBhw" name="transactionLock" visibility="private" type="_9n_dIXcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9oJOIHcuEd-96YWU42lBhw" name="writeLock" visibility="private" type="_9n_dIXcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9oS_IHcuEd-96YWU42lBhw" name="precommitListeners" visibility="private" isLeaf="true" type="_0epIcHctEd-96YWU42lBhw" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9ol6EXcuEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9ol6EHcuEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9ol6EncuEd-96YWU42lBhw" name="aggregatePrecommitListeners" visibility="private" isLeaf="true" type="_0epIcHctEd-96YWU42lBhw" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9o41AHcuEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9ovEAHcuEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9o41AXcuEd-96YWU42lBhw" name="postcommitListeners" visibility="private" isLeaf="true" type="_0epIcHctEd-96YWU42lBhw" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9pLv8HcuEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9pCmAHcuEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9pLv8XcuEd-96YWU42lBhw" name="unbatchedNotifications" visibility="private" isLeaf="true" type="_zp5RxXctEd-96YWU42lBhw" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9pfR8HcuEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9pVg8HcuEd-96YWU42lBhw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_9pfR8XcuEd-96YWU42lBhw" name="unbatchedChangeEvent" visibility="private" isLeaf="true" type="_zp5RwHctEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9pob4HcuEd-96YWU42lBhw" name="undoRedoOptions" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                <ownedAttribute xmi:id="_9p7W0XcuEd-96YWU42lBhw" name="lifecycle" visibility="private" type="_9__GYHcuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9qFH03cuEd-96YWU42lBhw" name="optionMetadata" visibility="private" type="_9qFH0ncuEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_9qO40HcuEd-96YWU42lBhw" name="disposed" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_9w79wXcuEd-96YWU42lBhw" name="ValidatorFactoryImpl" clientDependency="_9xFHsHcuEd-96YWU42lBhw">
                  <ownedComment xmi:id="_9w79wncuEd-96YWU42lBhw">
                    <body>
	 * Default implementation of the validator factory
	 * 
	 * @since 1.1
	 * 
	 * @author David Cummings (dcummin)
	 </body>
                  </ownedComment>
                  <ownedOperation xmi:id="_9xFHsXcuEd-96YWU42lBhw" name="createReadOnlyValidator" visibility="public">
                    <ownedComment xmi:id="_9xFHsncuEd-96YWU42lBhw">
                      <body>
	     * {@inheritDoc}
	     </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_9xFHs3cuEd-96YWU42lBhw" type="_9XwBsHcuEd-96YWU42lBhw" direction="return"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_9xO4sHcuEd-96YWU42lBhw" name="createReadWriteValidator" visibility="public">
                    <ownedComment xmi:id="_9xO4sXcuEd-96YWU42lBhw">
                      <body>
	     * {@inheritDoc}
	     </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_9xO4sncuEd-96YWU42lBhw" type="_9XwBsHcuEd-96YWU42lBhw" direction="return"/>
                  </ownedOperation>
                </nestedClassifier>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_9xYpsHcuEd-96YWU42lBhw" name="FactoryImpl" clientDependency="_9xhzoHcuEd-96YWU42lBhw">
                  <ownedComment xmi:id="_9xYpsXcuEd-96YWU42lBhw">
                    <body>
	 * Default implementation of a transaction editing domain factory.  This
	 * class creates {@link TransactionalEditingDomainImpl}s and provides the mapping of
	 * resource sets to editing domain instances.
	 * &lt;p>
	 * Clients that implement their own factory can plug in to the mapping
	 * of resource sets to editing domains using the static instance's
	 * {@link #mapResourceSet(TransactionalEditingDomain)} and
	 * {@link #unmapResourceSet(TransactionalEditingDomain)} methods by casting the
	 * {@link TransactionalEditingDomain.Factory#INSTANCE} to the
	 * &lt;code>TransactionalEditingDomainImpl.FactoryImpl&lt;/code> type.
	 * &lt;/p>
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                  </ownedComment>
                  <nestedClassifier xmi:type="uml:Class" xmi:id="_9yk8gXcuEd-96YWU42lBhw" name="ResourceSetDomainLink" visibility="private" clientDependency="_9yuGc3cuEd-96YWU42lBhw">
                    <ownedComment xmi:id="_9yk8gncuEd-96YWU42lBhw">
                      <body>
		 * An adapter that attaches a weak reference to the editing domain
		 * onto the resource set that it manages.
		 *
		 * @author Christian W. Damus (cdamus)
		 </body>
                    </ownedComment>
                    <generalization xmi:id="_9yuGcXcuEd-96YWU42lBhw" general="_9yuGcHcuEd-96YWU42lBhw"/>
                    <ownedAttribute xmi:id="_9y33cncuEd-96YWU42lBhw" name="domain" visibility="private" isLeaf="true" type="_9y33cXcuEd-96YWU42lBhw" isUnique="false"/>
                    <ownedOperation xmi:id="_9zBocHcuEd-96YWU42lBhw" name="isAdapterForType" visibility="public">
                      <ownedParameter xmi:id="_9zKyYHcuEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                      <ownedParameter xmi:id="_9zUjYHcuEd-96YWU42lBhw" name="type" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_9zUjYXcuEd-96YWU42lBhw" name="getDomain" isLeaf="true">
                      <ownedParameter xmi:id="_9zUjYncuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                    <ownedOperation xmi:id="_9zdtUHcuEd-96YWU42lBhw" name="getEditingDomain" visibility="public" isLeaf="true">
                      <ownedParameter xmi:id="_9zdtUXcuEd-96YWU42lBhw" type="_0zW0MHctEd-96YWU42lBhw" direction="return"/>
                    </ownedOperation>
                  </nestedClassifier>
                  <ownedOperation xmi:id="_9xhzoXcuEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                    <ownedParameter xmi:id="_9xhzoncuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_9x1VoHcuEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                    <ownedParameter xmi:id="_9x-fkHcuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_9x-fkXcuEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_9yIQkHcuEd-96YWU42lBhw" name="getEditingDomain" visibility="public">
                    <ownedParameter xmi:id="_9yIQkXcuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_9yRagHcuEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_9yRagXcuEd-96YWU42lBhw" name="mapResourceSet" visibility="public">
                    <ownedComment xmi:id="_9yRagncuEd-96YWU42lBhw">
                      <body>
		 * Adds the specified editing domain to the global reverse mapping
		 * of resource sets.
		 * 
		 * @param domain the editing domain to add to the resource set mapping
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_9ybLgHcuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_9ybLgXcuEd-96YWU42lBhw" name="unmapResourceSet" visibility="public">
                    <ownedComment xmi:id="_9ybLgncuEd-96YWU42lBhw">
                      <body>
		 * Removes the specified editing domain from the global reverse mapping
		 * of resource sets.
		 * 
		 * @param domain the editing domain to remove from the resource set mapping
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_9yk8gHcuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                </nestedClassifier>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_9zneUHcuEd-96YWU42lBhw" name="RegistryImpl" clientDependency="_9zneU3cuEd-96YWU42lBhw" isLeaf="true">
                  <ownedComment xmi:id="_9zneUXcuEd-96YWU42lBhw">
                    <body>
	 * Implementation of the global editing domain registry.
	 * &lt;p>
	 * This class is not intended to be used by clients.
	 * &lt;/p>
	 * 
	 * @author Christian W. Damus (cdamus)
	 </body>
                  </ownedComment>
                  <ownedAttribute xmi:id="_9zxPUHcuEd-96YWU42lBhw" name="domains" visibility="private" isLeaf="true" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
                  <ownedOperation xmi:id="_9z6ZQHcuEd-96YWU42lBhw" name="getEditingDomain" visibility="public">
                    <ownedParameter xmi:id="_9z6ZQXcuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_90EKQHcuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_90EKQXcuEd-96YWU42lBhw" name="add" visibility="public">
                    <ownedParameter xmi:id="_90EKQncuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                    <ownedParameter xmi:id="_90N7QHcuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_90XFMHcuEd-96YWU42lBhw" name="addImpl">
                    <ownedComment xmi:id="_90XFMXcuEd-96YWU42lBhw">
                      <body>
		 * Adds the specified domain into the registry under the given ID.  This
		 * method must only be invoked after it has been determined that this
		 * ID can be registered.
		 * 
		 * @param id the editing domain ID
		 * @param domain the domain to register
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_90XFMncuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                    <ownedParameter xmi:id="_90XFM3cuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_90g2MHcuEd-96YWU42lBhw" name="remove" visibility="public">
                    <ownedParameter xmi:id="_90g2MXcuEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_90qAIHcuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                  </ownedOperation>
                </nestedClassifier>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_9p7W0HcuEd-96YWU42lBhw" name="LifecycleImpl" visibility="protected" clientDependency="_90zxIHcuEd-96YWU42lBhw" isLeaf="true">
                  <ownedComment xmi:id="_90qAIXcuEd-96YWU42lBhw">
                    <body>
	 * Default implementation of the {@link InternalLifecycle} protocol.
	 * May be subclassed by custom editing domain implementations.
	 * 
	 * @author Christian W. Damus (cdamus)
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedAttribute xmi:id="_90zxIXcuEd-96YWU42lBhw" name="lifecycleListeners" visibility="private" isLeaf="true" type="_0_4NQHctEd-96YWU42lBhw" isUnique="false">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_91GsEHcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_909iIHcuEd-96YWU42lBhw"/>
                  </ownedAttribute>
                  <ownedOperation xmi:id="_91GsEXcuEd-96YWU42lBhw" name="addTransactionalEditingDomainListener" visibility="public">
                    <ownedParameter xmi:id="_91QdEHcuEd-96YWU42lBhw" name="l" type="_0_4NQHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_91QdEXcuEd-96YWU42lBhw" name="removeTransactionalEditingDomainListener" visibility="public">
                    <ownedParameter xmi:id="_91aOEHcuEd-96YWU42lBhw" name="l" type="_0_4NQHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_91aOEXcuEd-96YWU42lBhw" name="dispose" visibility="public"/>
                  <ownedOperation xmi:id="_91aOEncuEd-96YWU42lBhw" name="getLifecycleListeners" visibility="protected" isLeaf="true">
                    <ownedComment xmi:id="_91aOE3cuEd-96YWU42lBhw">
                      <body>
		 * Obtains a copy of my life-cycle listener list as an array, for safe
		 * iteration that allows concurrent updates to the original list.
		 * 
		 * @return my life-cycle listeners (as of the time of calling this
		 *         method)
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_91jYAHcuEd-96YWU42lBhw" type="_0_4NQHctEd-96YWU42lBhw" direction="return">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_91tJAHcuEd-96YWU42lBhw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_91jYAXcuEd-96YWU42lBhw"/>
                    </ownedParameter>
                  </ownedOperation>
                  <ownedOperation xmi:id="_91tJAXcuEd-96YWU42lBhw" name="fireLifecycleEvent" visibility="protected">
                    <ownedComment xmi:id="_91tJAncuEd-96YWU42lBhw">
                      <body>
		 * Fires the specified life-cycle event to my listeners, if any.
		 * 
		 * @param type
		 *            one of the life-cycle event
		 *            {@linkplain TransactionalEditingDomainEvent#TRANSACTION_STARTING
		 *            types}
		 * @param transaction
		 *            the transaction that is the subject of the event, or
		 *            &lt;code>null&lt;/code> if the event pertains to the editing
		 *            domain, itself
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_912S8HcuEd-96YWU42lBhw" name="type" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                    <ownedParameter xmi:id="_912S8XcuEd-96YWU42lBhw" name="transaction" type="_0l8qUHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_92AD8HcuEd-96YWU42lBhw" name="transactionClosed" visibility="public">
                    <ownedParameter xmi:id="_92AD8XcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_92J08HcuEd-96YWU42lBhw" name="transactionClosing" visibility="public">
                    <ownedParameter xmi:id="_92J08XcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_92S-4HcuEd-96YWU42lBhw" name="transactionInterrupted" visibility="public">
                    <ownedParameter xmi:id="_92S-4XcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_92S-4ncuEd-96YWU42lBhw" name="transactionStarted" visibility="public">
                    <ownedParameter xmi:id="_92cv4HcuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_92cv4XcuEd-96YWU42lBhw" name="transactionStarting" visibility="public">
                    <ownedParameter xmi:id="_92cv4ncuEd-96YWU42lBhw" name="transaction" type="_8tIXYHcuEd-96YWU42lBhw"/>
                  </ownedOperation>
                </nestedClassifier>
                <ownedOperation xmi:id="_9qYCwHcuEd-96YWU42lBhw" name="initialize" visibility="private">
                  <ownedComment xmi:id="_9qYCwXcuEd-96YWU42lBhw">
                    <body>
	 * Initializes my state.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_9qhzwHcuEd-96YWU42lBhw" name="createChangeRecorder" visibility="protected">
                  <ownedComment xmi:id="_9qhzwXcuEd-96YWU42lBhw">
                    <body>
	 * May be overridden by subclasses to create a custom change recorder
	 * implementation.  Just creates a change recorder on the specified resource
	 * set and returns it.
	 * 
	 * @param rset a resource set in which to record changes
	 * 
	 * @return the new change recorder
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9qhzwncuEd-96YWU42lBhw" type="_8xddw3cuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_9qrkwHcuEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9qrkwXcuEd-96YWU42lBhw" name="getID" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9qrkwncuEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9q0usHcuEd-96YWU42lBhw" name="setID" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9q0usXcuEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9q-fsHcuEd-96YWU42lBhw" name="getDebugID" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9q-fsXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains an ID suitable for display in debug/trace messages.
	 * 
	 * @param domain the editing domain for which to get the debug ID
	 * 
	 * @return a debugging ID
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9q-fsncuEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9rHpoHcuEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9rHpoXcuEd-96YWU42lBhw" name="addResourceSetListener" visibility="public">
                  <ownedParameter xmi:id="_9rHponcuEd-96YWU42lBhw" name="l" type="_0epIcHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9rRaoHcuEd-96YWU42lBhw" name="removeResourceSetListener" visibility="public">
                  <ownedParameter xmi:id="_9rRaoXcuEd-96YWU42lBhw" name="l" type="_0epIcHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9rbLoHcuEd-96YWU42lBhw" name="getTransactionalCommandStack" visibility="protected">
                  <ownedComment xmi:id="_9rbLoXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains my command stack as the internal interface.
	 * 
	 * @return the internal view of my command stack
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9rbLoncuEd-96YWU42lBhw" type="_8gd0YHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9rkVkHcuEd-96YWU42lBhw" name="runExclusive" visibility="public">
                  <ownedParameter xmi:id="_9rkVkXcuEd-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9rkVkncuEd-96YWU42lBhw" name="read" type="_0i9nwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9ruGkHcuEd-96YWU42lBhw" name="yield" visibility="public"/>
                <ownedOperation xmi:id="_9ruGkXcuEd-96YWU42lBhw" name="startTransaction" visibility="public">
                  <ownedParameter xmi:id="_9ruGkncuEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_9r33kHcuEd-96YWU42lBhw" name="readOnly" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_9r33kXcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9sBBgHcuEd-96YWU42lBhw" name="getDebugID" visibility="protected" isStatic="true">
                  <ownedComment xmi:id="_9sBBgXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains an ID suitable for display in debug/trace messages.
	 * 
	 * @param tx the transaction for which to get the debug ID
	 * 
	 * @return a debugging ID
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9sBBgncuEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_9sKygHcuEd-96YWU42lBhw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9sKygXcuEd-96YWU42lBhw" name="getChangeRecorder" visibility="public">
                  <ownedParameter xmi:id="_9sT8cHcuEd-96YWU42lBhw" type="_8xddw3cuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9sT8cXcuEd-96YWU42lBhw" name="getValidator" visibility="public">
                  <ownedParameter xmi:id="_9sT8cncuEd-96YWU42lBhw" type="_9XwBsHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9sdtcHcuEd-96YWU42lBhw" name="setValidator" visibility="protected">
                  <ownedParameter xmi:id="_9sdtcXcuEd-96YWU42lBhw" name="newValidator" type="_9XwBsHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9snecHcuEd-96YWU42lBhw" name="getPrecommitListeners" visibility="protected" isLeaf="true">
                  <ownedComment xmi:id="_9snecXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains a copy of my pre-commit listener list as an array, for safe
	 * iteration that allows concurrent updates to the original list.
	 * 
	 * @return my pre-commit listeners (as of the time of calling this method)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9snecncuEd-96YWU42lBhw" type="_0epIcHctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9swoYXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9swoYHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_9s6ZYHcuEd-96YWU42lBhw" name="getAggregatePrecommitListeners" visibility="protected" isLeaf="true">
                  <ownedComment xmi:id="_9s6ZYXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains a copy of my aggregate pre-commit listener list as an array, for
	 * safe iteration that allows concurrent updates to the original list.
	 * 
	 * @return my aggregate pre-commit listeners (as of the time of calling
	 *      this method)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9s6ZYncuEd-96YWU42lBhw" type="_0epIcHctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9tEKYXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9tEKYHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_9tNUUHcuEd-96YWU42lBhw" name="getPostcommitListeners" visibility="protected" isLeaf="true">
                  <ownedComment xmi:id="_9tNUUXcuEd-96YWU42lBhw">
                    <body>
	 * Obtains a copy of my post-commit listener list as an array, for safe
	 * iteration that allows concurrent updates to the original list.
	 * 
	 * @return my post-commit listeners (as of the time of calling this method)
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9tNUUncuEd-96YWU42lBhw" type="_0epIcHctEd-96YWU42lBhw" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9tXFUXcuEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9tXFUHcuEd-96YWU42lBhw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_9tgPQHcuEd-96YWU42lBhw" name="getActiveTransaction" visibility="public">
                  <ownedParameter xmi:id="_9tgPQXcuEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9tqAQHcuEd-96YWU42lBhw" name="activate" visibility="public">
                  <ownedParameter xmi:id="_9tqAQXcuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9tqAQncuEd-96YWU42lBhw" name="deactivate" visibility="public">
                  <ownedParameter xmi:id="_9uGsMHcuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9uQdMHcuEd-96YWU42lBhw" name="acquire" visibility="private">
                  <ownedComment xmi:id="_9uQdMXcuEd-96YWU42lBhw">
                    <body>
	 * Acquires the appropriate locks for the specified transaction.
	 * 
	 * @param tx a transaction to be activated or resumed from a yield
	 * 
	 * @throws InterruptedException if the current thread is interrupted while
	 *     waiting for the lock
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9uQdMncuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9uZnIHcuEd-96YWU42lBhw" name="release" visibility="private">
                  <ownedComment xmi:id="_9uZnIXcuEd-96YWU42lBhw">
                    <body>
	 * Releases the lock currently held by the specified transaction.
	 * 
	 * @param tx a transaction
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9uZnIncuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9uZnI3cuEd-96YWU42lBhw" name="precommit" visibility="public">
                  <ownedParameter xmi:id="_9ujYIHcuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9ujYIXcuEd-96YWU42lBhw" name="postcommit" visibility="protected">
                  <ownedComment xmi:id="_9ujYIncuEd-96YWU42lBhw">
                    <body>
	 * Performs post-commit processing of the specified transaction.  This
	 * consists of broadcasting the post-commit events to my resource set
	 * listeners.
	 * 
	 * @param tx the transaction that has committed
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9usiEHcuEd-96YWU42lBhw" name="tx" type="_8tIXYHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9u2TEHcuEd-96YWU42lBhw" name="broadcastUnbatched" visibility="public">
                  <ownedParameter xmi:id="_9u2TEXcuEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9u2TEncuEd-96YWU42lBhw" name="createPrivilegedRunnable" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_9vAEEHcuEd-96YWU42lBhw" type="_0i9nwHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_9vAEEXcuEd-96YWU42lBhw" name="runnable" type="_0i9nwnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9vJOAHcuEd-96YWU42lBhw" name="startPrivileged" visibility="public">
                  <ownedParameter xmi:id="_9vJOAXcuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9vS_AHcuEd-96YWU42lBhw" name="endPrivileged" visibility="public">
                  <ownedParameter xmi:id="_9vS_AXcuEd-96YWU42lBhw" name="runnable" type="_8uebMHcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9vS_AncuEd-96YWU42lBhw" name="dispose" visibility="public"/>
                <ownedOperation xmi:id="_9vS_A3cuEd-96YWU42lBhw" name="getUndoRedoOptions" visibility="public">
                  <ownedParameter xmi:id="_9vcwAHcuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9vcwAXcuEd-96YWU42lBhw" name="getAdapter" visibility="public">
                  <ownedParameter xmi:id="_9vl58HcuEd-96YWU42lBhw" type="_9vcwAncuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_9vvq8HcuEd-96YWU42lBhw" name="adapterType" type="_zsR3ZXctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9vvq8XcuEd-96YWU42lBhw" name="getDefaultTransactionOptions" visibility="public">
                  <ownedParameter xmi:id="_9vvq8ncuEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9v404HcuEd-96YWU42lBhw" name="setDefaultTransactionOptions" visibility="public">
                  <ownedParameter xmi:id="_9v404XcuEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9wCl4HcuEd-96YWU42lBhw" name="setValidatorFactory" visibility="public">
                  <ownedComment xmi:id="_9wCl4XcuEd-96YWU42lBhw">
                    <body>
	 * Sets the factory to use when creating validators for transaction
	 * validation.
	 * 
	 * @since 1.1
	 * 
	 * @param validatorFactory the factory to set
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9wCl4ncuEd-96YWU42lBhw" name="validatorFactory" type="_9Zr7Y3cuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9wMW4HcuEd-96YWU42lBhw" name="getValidatorFactory" visibility="public">
                  <ownedComment xmi:id="_9wMW4XcuEd-96YWU42lBhw">
                    <body>
	 * Obtains the factory that this transactional editing domain uses
	 * to create validators for transaction validation.
	 * &lt;p>
	 * If the validator factory has yet to be initialized, it is initialized
	 * using the default validator factory.
	 * &lt;/p>
	 * 
	 * @since 1.1
	 * 
	 * @return the requested validator factory
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9wMW4ncuEd-96YWU42lBhw" type="_9Zr7Y3cuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9wVg0HcuEd-96YWU42lBhw" name="getLifecycle" visibility="protected" isLeaf="true">
                  <ownedComment xmi:id="_9wVg0XcuEd-96YWU42lBhw">
                    <body>
	 * Obtains my lazily-created lifecycle implementation.
	 * 
	 * @return my lifecycle
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9wfR0HcuEd-96YWU42lBhw" type="_9__GYHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9wfR0XcuEd-96YWU42lBhw" name="createLifecycle" visibility="protected">
                  <ownedComment xmi:id="_9wfR0ncuEd-96YWU42lBhw">
                    <body>
	 * Creates a new lifecycle implementation.  Subclasses may override to
	 * create their own implementation.
	 * 
	 * @return a new lifecycle
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9wfR03cuEd-96YWU42lBhw" type="_9__GYHcuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9wpC0HcuEd-96YWU42lBhw" name="getOptionMetadata" visibility="protected" isLeaf="true">
                  <ownedComment xmi:id="_9wpC0XcuEd-96YWU42lBhw">
                    <body>
	 * Obtains my lazily-created transaction option metadata registry.
	 * 
	 * @return my option metadata registry
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9wpC0ncuEd-96YWU42lBhw" type="_9qFH0ncuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_9wyMwHcuEd-96YWU42lBhw" name="createOptionMetadataRegistry" visibility="protected">
                  <ownedComment xmi:id="_9wyMwXcuEd-96YWU42lBhw">
                    <body>
	 * Creates a new transaction option metadata registry.
	 * Subclasses may override to create their own implementation, although it
	 * would hardly seem interesting to do so.
	 * 
	 * @return a new option metadata registry
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_9w79wHcuEd-96YWU42lBhw" type="_9qFH0ncuEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9mzKVHcuEd-96YWU42lBhw" name="TransactionalEditingDomainImpl extends InternalTransactionalEditingDomain" supplier="_8wkF4HcuEd-96YWU42lBhw" client="_9mzKUHcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9mzKVncuEd-96YWU42lBhw" name="TransactionalEditingDomainImpl extends Adaptable" supplier="_9mzKVXcuEd-96YWU42lBhw" client="_9mzKUHcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Package" xmi:id="_9mzKV3cuEd-96YWU42lBhw" name="TransactionalEditingDomain">
                <packagedElement xmi:type="uml:Interface" xmi:id="_9m87UHcuEd-96YWU42lBhw" name="DefaultOptions"/>
                <packagedElement xmi:type="uml:Interface" xmi:id="_9xYpsncuEd-96YWU42lBhw" name="Factory"/>
                <packagedElement xmi:type="uml:Interface" xmi:id="_9zneUncuEd-96YWU42lBhw" name="Registry"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9m87UXcuEd-96YWU42lBhw" name="TransactionalEditingDomainImpl extends DefaultOptions" supplier="_9m87UHcuEd-96YWU42lBhw" client="_9mzKUHcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Package" xmi:id="_9qFH0HcuEd-96YWU42lBhw" name="Transaction">
                <packagedElement xmi:type="uml:Package" xmi:id="_9qFH0XcuEd-96YWU42lBhw" name="OptionMetadata">
                  <packagedElement xmi:type="uml:Class" xmi:id="_9qFH0ncuEd-96YWU42lBhw" name="Registry"/>
                </packagedElement>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_9vcwAncuEd-96YWU42lBhw" name="T"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9xFHsHcuEd-96YWU42lBhw" name="ValidatorFactoryImpl extends Factory" supplier="_9Zr7Y3cuEd-96YWU42lBhw" client="_9w79wXcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9xhzoHcuEd-96YWU42lBhw" name="FactoryImpl extends Factory" supplier="_9xYpsncuEd-96YWU42lBhw" client="_9xYpsHcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9yuGc3cuEd-96YWU42lBhw" name="ResourceSetDomainLink extends IEditingDomainProvider" supplier="_9yuGcncuEd-96YWU42lBhw" client="_9yk8gXcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_9zneU3cuEd-96YWU42lBhw" name="RegistryImpl extends Registry" supplier="_9zneUncuEd-96YWU42lBhw" client="_9zneUHcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_90zxIHcuEd-96YWU42lBhw" name="LifecycleImpl extends InternalLifecycle" supplier="_8rpJoHcuEd-96YWU42lBhw" client="_9p7W0HcuEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9__GYHcuEd-96YWU42lBhw" name="LifecycleImpl"/>
              <packagedElement xmi:type="uml:Class" xmi:id="__6K7IHcuEd-96YWU42lBhw" name="TriggerCommandTransaction">
                <ownedComment xmi:id="__6K7IXcuEd-96YWU42lBhw">
                  <body>
 * A transaction implementation used by the command stack to wrap the execution
 * of {@link TriggerCommand}s, to provide them the write access that they need.
 * This transaction does not propagate its change description to the parent,
 * because that is handled separately via {@link CommandChangeDescription}s.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="__6UsIHcuEd-96YWU42lBhw" general="_8i2aAHcuEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="__6UsIXcuEd-96YWU42lBhw" name="close" visibility="protected">
                  <ownedComment xmi:id="__6UsIncuEd-96YWU42lBhw">
                    <body>
	 * Extends the inherited implementation by first clearing my change
	 * description, so that I will not propagate these changes upwards.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="__6edIHcuEd-96YWU42lBhw" name="addTriggers" visibility="public">
                  <ownedComment xmi:id="__6edIXcuEd-96YWU42lBhw">
                    <body>
	 * Overrides the inherited implementation to simply propagate triggers to
	 * my parent, because it's the transaction that the outside world can see.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="__6edIncuEd-96YWU42lBhw" name="triggers" type="_8uUqM3cuEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_0wrToHctEd-96YWU42lBhw" name="TransactionChangeDescription">
              <ownedComment xmi:id="_0w-OkHctEd-96YWU42lBhw">
                <body>
 * A specialized change description that may not be able to apply itself,
 * especially in the case where it includes non-EMF changes that are not
 * reversible.
 * &lt;p>
 * When a transaction rolls back, the assumption is that all changes that it
 * performed can be undone, even any non-EMF changes that are captured in its
 * &lt;code>TransactionChangeDescription&lt;/code>.  This assumption is necessary because
 * the semantics of rollback guarantee that rollback cannot fail:  rollback
 * &lt;em>must&lt;/em> restore the system to the state it was in before the
 * transaction started.  Thus, any change description (possibly nested in a
 * composite) that cannot be applied will be ignored and a best effort made to
 * apply all other changes.
 * &lt;/p>
 * &lt;p>
 * However, the same should not hold for undo/redo of the changes performed
 * by a transaction after it has committed.  If the transaction's change
 * description is stored on some kind of &quot;command stack&quot; as an encapsulation of
 * an undoable change, then the possibility that a change description cannot
 * be applied should be respected by disabling undo/redo.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_0w-Ok3ctEd-96YWU42lBhw" general="_0w-OknctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_0w-OlHctEd-96YWU42lBhw" name="canApply">
                <ownedComment xmi:id="_0w-OlXctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I can {@link ChangeDescription#apply() apply} my changes.
	 * If I can, then it is assumed that I could
	 * {@link ChangeDescription#applyAndReverse() reverse} them also.
	 * 
	 * @return &lt;code>true&lt;/code> if my changes can be applied;
	 *    &lt;code>false&lt;/code> otherwise (i.e., they are not invertible) 
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0w-OlnctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0w-Ol3ctEd-96YWU42lBhw" name="isEmpty">
                <ownedComment xmi:id="_0w-OmHctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I have no changes.
	 * 
	 * @return &lt;code>true&lt;/code> if I have no changes (applying me would have
	 *     no effect on anything); &lt;code>false&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0xH_kHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_0y6IQHctEd-96YWU42lBhw" name="TransactionalEditingDomain">
              <ownedComment xmi:id="_0zNqQHctEd-96YWU42lBhw">
                <body>
 * An extension of the {@link EditingDomain} API that applies transactional
 * semantics to reading and writing the contents of an EMF {@link ResourceSet}.
 * &lt;p>
 * Editing domains can be created in one of two ways: dynamically, using a
 * {@link Factory} or statically by registration on the
 * &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code> extension point. The
 * latter mechanism is the preferred way to define editing domains that can be
 * shared with other applications. To create a new editing domain in code,
 * simply invoke the static factory instance:
 * &lt;/p>
 * 
 * &lt;PRE>
 * TransactionalEditingDomain domain = TransactionalEditingDomain.Factory.INSTANCE
 * 	.createEditingDomain();
 * ResourceSet rset = domain.getResourceSet();
 * // or, create our own resource set and initialize the domain with it
 * rset = new MyResourceSetImpl();
 * domain = TransactionalEditingDomain.Factory.INSTANCE.createEditingDomain(rset);
 * &lt;/PRE>
 * &lt;p>
 * To share a named editing domain with other applications, the editing domain
 * registry can be used to obtain domains by ID, creating them if necessary.
 * Editing domain IDs are configured on an extension point providing the factory
 * implementation that the registry uses to initialize them:
 * &lt;/p>
 * 
 * &lt;pre>
 *     &amp;lt;!-- In the plugin.xml --&amp;gt;
 *     &amp;lt;extension point=&amp;quot;org.eclipse.emf.transaction.editingDomains&amp;quot;&amp;gt;
 *     &amp;lt;editingDomain
 *           id=&amp;quot;com.example.MyEditingDomain&amp;quot;
 *           factory=&amp;quot;com.example.MyEditingDomainFactory&amp;quot;/&amp;gt;
 *     &amp;lt;/extension&amp;gt;
 *     // in code, access the registered editing domain by:
 *     TransactionalEditingDomain myDomain = TransactionalEditingDomain.Registry.INSTANCE.getEditingDomain(
 *             &amp;quot;com.example.MyEditingDomain&amp;quot;);
 * &lt;/pre>
 * &lt;p>
 * See the {@link org.eclipse.emf.transaction package documentation} for further
 * details of editing domain usage.
 * &lt;/p>
 * &lt;p>
 * As of the EMF Transaction 1.2 release, editing domains may optionally be
 * {@link Adaptable} to a variety of optional extension interfaces or &quot;facets.&quot;
 * It is recommended to implement the &lt;tt>Adaptable&lt;/tt> interface and support
 * adaptation to these interfaces to benefit from the services that they offer.
 * &lt;/p>
 * &lt;p>
 * As of the EMF Transaction 1.3 release, resource-set listeners may optionally
 * implement a {@linkplain ResourceSetListener.Internal private} interface to be
 * notified when they are
 * {@linkplain #addResourceSetListener(ResourceSetListener) added} to or
 * {@linkplain #removeResourceSetListener(ResourceSetListener) removed} from an
 * editing domain.
 * &lt;/p>
 * &lt;p>
 * Also since the 1.3 release, the new optional
 * {@link TransactionalEditingDomain.Lifecycle} interface provides
 * notifications, from editing domains that support this protocol, of
 * transaction and editing-domain
 * {@linkplain TransactionalEditingDomainListener lifecycle changes}.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @see TransactionalCommandStack
 * @see Transaction
 * @see ResourceSetListener
 * @see ResourceSetListener.Internal
 * @see TransactionalEditingDomain.Lifecycle
 * @see TransactionalEditingDomainListener
 </body>
              </ownedComment>
              <generalization xmi:id="_0zW0MXctEd-96YWU42lBhw" general="_0zW0MHctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_0zW0MnctEd-96YWU42lBhw" name="getID">
                <ownedComment xmi:id="_0zW0M3ctEd-96YWU42lBhw">
                  <body>
	 * Obtains my unique ID.  This is the ID under which I am registered in
	 * the {@link Registry} (if I am registered).
	 * 
	 * @return my unique identifier
	 * 
	 * @see Registry#getEditingDomain(String)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0zW0NHctEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0zglMHctEd-96YWU42lBhw" name="setID">
                <ownedComment xmi:id="_0zglMXctEd-96YWU42lBhw">
                  <body>
	 * Sets my unique ID.  If I am currently registered in the {@link Registry},
	 * then I am re-registered under this new ID.  However, if I am registered
	 * statically on the &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code>
	 * extension point, then my ID cannot be changed.
	 * 
	 * @param id my new unique identifier
	 * 
	 * @throws IllegalArgumentException if I am a statically registered domain
	 * 
	 * @see #getID()
	 * @see Registry#add(String, TransactionalEditingDomain)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0zglMnctEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0zglM3ctEd-96YWU42lBhw" name="addResourceSetListener">
                <ownedComment xmi:id="_0zglNHctEd-96YWU42lBhw">
                  <body>
	 * Adds a resource set listener to me, to receive notifications of changes
	 * to the resource set when transactions commit.  This method has no effect
	 * if the specified listeners is already attached to me.
	 * 
	 * @param l a new resource set listener
	 * 
	 * @throws IllegalArgumentException if the listener declares both that it
	 *     wants only pre-commit events and that it wants only post-commit
	 *     events (a logical contradiction)
	 *     
	 * @see ResourceSetListener#isPrecommitOnly()
	 * @see ResourceSetListener#isPostcommitOnly()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0zglNXctEd-96YWU42lBhw" name="l" type="_0epIcHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0zpvIHctEd-96YWU42lBhw" name="removeResourceSetListener">
                <ownedComment xmi:id="_0zpvIXctEd-96YWU42lBhw">
                  <body>
	 * Removes a resource set listener from me.  This method has no effect if
	 * the listener is not currently attached to me.
	 * 
	 * @param l a resource set listener to remove
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0zpvInctEd-96YWU42lBhw" name="l" type="_0epIcHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0zpvI3ctEd-96YWU42lBhw" name="runExclusive">
                <ownedComment xmi:id="_0zpvJHctEd-96YWU42lBhw">
                  <body>
	 * Runs an operation that requires exclusive access to my resource set,
	 * for reading.  The specified runnable is executed in a read-only
	 * transaction.  If the runnable implements the {@link RunnableWithResult}
	 * interface, then its result is returned after it completes.  Moreover,
	 * (and this is a very good reason to implement this extension interface),
	 * if the transaction rolls back on commit, then the &lt;code>RunnableWithResult&lt;/code>
	 * is provided with the error status indicating this condition.  Even read-only
	 * transactions can roll back when, for example, another thread concurrently
	 * modifies the model (in violation of the transaction protocol), and it is
	 * important to know when corrupted data may have been read.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that this method will block the current thread until
	 * exclusive access to the resource set can be obtained.  However, it is
	 * safe to call this method on the Eclipse UI thread because special
	 * precaution is taken to ensure that liveness is maintained (using
	 * mechanisms built into the Job Manager).
	 * &lt;/p>&lt;p>
	 * &lt;b>Note&lt;/b>: Since the 1.2 release, the
	 * {@link TransactionUtil#runExclusive(TransactionalEditingDomain, RunnableWithResult)}
	 * utility provides type-safe execution of runnables returning results and
	 * should be preferred over this API.
	 * &lt;/p>
	 * 
	 * @param read a read-only operation to execute
	 * 
	 * @return the result of the read operation if it is a
	 *    {@link RunnableWithResult} and the transaction did not roll back;
	 *    &lt;code>null&lt;/code>, otherwise
	 *    
	 * @throws InterruptedException if the current thread is interrupted while
	 *    waiting for access to the resource set
	 * 
	 * @see TransactionUtil#runExclusive(RunnableWithResult)
	 * @see Transaction#commit()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0zpvJXctEd-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_0zzgIHctEd-96YWU42lBhw" name="read" type="_0i9nwnctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0zzgIXctEd-96YWU42lBhw" name="yield">
                <ownedComment xmi:id="_0zzgInctEd-96YWU42lBhw">
                  <body>
	 * Temporarily yields access to another read-only transaction.  The
	 * &lt;code>TransactionalEditingDomain&lt;/code> supports any number of pseudo-concurrent
	 * read-only transactions.  Transactions that are expected to be
	 * long-running should yield frequently, as a task running in a progress
	 * monitor is expected to check for cancellation frequently.  However, there
	 * is a higher cost (in time) associated with yielding, so it should not
	 * be overdone.
	 * &lt;p>
	 * Only read-only transactions may yield, and only the transaction that
	 * is currently active in the editing domain may yield.  The yielding
	 * transaction may be nested, but not within a read/write transaction
	 * at any depth.
	 * &lt;/p>
	 * &lt;p>
	 * Upon yielding, some other read-only transaction that is attempting to
	 * start or to return from a yield will take control of the editing domain.
	 * Control is never yielded to a read/write transaction (not even to a
	 * read-only transaction nested in a read/write) because this would
	 * introduce dirty reads (transactions reading uncommitted changes).
	 * If there are no other read-only transactions to receive the transfer of
	 * control, then the call returns immediately.  Otherwise, control is
	 * transferred in FIFO fashion to waiting transactions.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0zzgI3ctEd-96YWU42lBhw" name="createPrivilegedRunnable">
                <ownedComment xmi:id="_0zzgJHctEd-96YWU42lBhw">
                  <body>
	 * Wraps the specified &lt;code>runnable&lt;/code> to give it access to the currently
	 * active transaction.  This is useful for two or more cooperating threads
	 * to share a transaction (read-only or read-write), executing code in
	 * the a &lt;code>runnable&lt;/code> on one thread in the context of another
	 * thread's transaction.
	 * &lt;p>
	 * For example, in an Eclipse UI application, this might be used when a
	 * long-running task in a modal context thread needs to synchronously
	 * execute some operation on the UI thread, which operation needs to read
	 * or write the editing domain. e.g.,
	 * &lt;/p>
	 * &lt;pre>
	 *     Runnable uiBoundAction = // ...
	 *     Runnable privileged = domain.createPrivilegedRunnable(uiBoundAction);
	 *     Display.syncExec(privileged);
	 * &lt;/pre>
	 * &lt;p>
	 * Note that it is &lt;em>critically important&lt;/em> that this mechanism only
	 * be used to share a transaction with another thread &lt;em>synchronously&lt;/em>.
	 * Or, more generally, during the execution of the privileged runnable, the
	 * thread that originally owned the transaction no longer does, and may not
	 * access the editing domain.  Upon completion of the privileged runnable,
	 * the transaction is returned to its original owner.
	 * &lt;/p>
	 * &lt;p>
	 * Also, the resulting runnable may only be executed while the currently
	 * active transaction remains active.  Any attempt to execute the runnable
	 * after this transaction has committed or while a nested transaction is
	 * active will result in an {@link IllegalStateException}.
	 * &lt;/p>&lt;p>
	 * &lt;b>Note&lt;/b>: Since the 1.2 release, the
	 * {@link TransactionUtil#createPrivilegedRunnable(TransactionalEditingDomain, RunnableWithResult)}
	 * utility provides type-safe privileged access for runnables returning
	 * results and should be preferred over this API.
	 * &lt;/p>
	 * 
	 * @param &lt;T> the result type of the {@link RunnableWithResult} if such
	 *    is the &lt;tt>read&lt;/tt> argument
	 * 
	 * @param runnable a runnable to execute in the context of the active
	 *     transaction, on any thread
	 *     
	 * @return the privileged runnable.  If the wrapped &lt;code>runnable&lt;/code>
	 *     is a {@link RunnableWithResult}, then the privileged runnable will
	 *     inherit its result when it completes
	 * 
	 * @throws IllegalStateException on an attempt by a thread that does not
	 *     own the active transaction to create a privileged runnable.  This
	 *     prevents &quot;theft&quot; of transactions by malicious code.  Note also
	 *     that this implies an exception if there is no active transaction at
	 *     the time of this call
	 *     
	 * @see TransactionUtil#createPrivilegedRunnable(TransactionalEditingDomain, RunnableWithResult)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0zzgJXctEd-96YWU42lBhw" type="_0i9nwHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_0zzgJnctEd-96YWU42lBhw" name="runnable" type="_0i9nwnctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0z9RIHctEd-96YWU42lBhw" name="dispose">
                <ownedComment xmi:id="_0z9RIXctEd-96YWU42lBhw">
                  <body>
	 * Disposes of this editing domain and any resources that it has allocated.
	 * Editing domains must be disposed when they are no longer in use, but
	 * only by the client that created them (in case of sharing of editing
	 * domains).
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that editing domains registered on the extension point may
	 * not be disposed.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedOperation>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_0z9RInctEd-96YWU42lBhw" name="Factory">
                <ownedComment xmi:id="_0z9RI3ctEd-96YWU42lBhw">
                  <body>
	 * Interface defining the protocol for creating transactional editing
	 * domains.  Non-shared editing domains can be created by accessing the
	 * static factory {@link #INSTANCE}.  Shared editing domains (registered
	 * on the &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code>
	 * extension point are obtained via the {@link Registry}.
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_0z9RJHctEd-96YWU42lBhw" name="INSTANCE" type="_0z9RInctEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_0z9RJXctEd-96YWU42lBhw">
                    <body>
		 * Static factory instance that can create instances of the default
		 * transactional editing domain implementation.
		 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_00GbEHctEd-96YWU42lBhw" name="createEditingDomain">
                  <ownedComment xmi:id="_00GbEXctEd-96YWU42lBhw">
                    <body>
		 * Creates an editing domain with a default resource set implementation.
		 * 
		 * @return the new editing domain
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_00GbEnctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_00jHAHctEd-96YWU42lBhw" name="createEditingDomain">
                  <ownedComment xmi:id="_00jHAXctEd-96YWU42lBhw">
                    <body>
		 * Creates a new transactional editing domain on the specified resource
		 * set.  Although it is possible to create multiple editing domains on
		 * the same resource set, this would rarely be useful.
		 * 
		 * @param rset the resource set
		 * 
		 * @return a new editing domain on the supplied resource set
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_00jHAnctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_00jHA3ctEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_00s4AHctEd-96YWU42lBhw" name="getEditingDomain">
                  <ownedComment xmi:id="_00s4AXctEd-96YWU42lBhw">
                    <body>
		 * Obtains the transactional editing domain (if any) that is currently
		 * managing the specified resource set.
		 * 
		 * @param rset a resource set
		 * 
		 * @return its editing domain, or &lt;code>null&lt;/code> if it is not managed
		 *     by any &lt;code>TransactionalEditingDomain&lt;/code>
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_00s4AnctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_00s4A3ctEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                </ownedOperation>
              </nestedClassifier>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_00s4BHctEd-96YWU42lBhw" name="Registry">
                <ownedComment xmi:id="_002B8HctEd-96YWU42lBhw">
                  <body>
	 * An ID-based registry of shareable {@link TransactionalEditingDomain} instances.
	 * Although editing domains can be registered in code, the usual means is
	 * to implement the &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code>
	 * extension point.
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_002B8XctEd-96YWU42lBhw" name="INSTANCE" type="_00s4BHctEd-96YWU42lBhw" isUnique="false">
                  <ownedComment xmi:id="_002B8nctEd-96YWU42lBhw">
                    <body>
		 * The single static registry instance.
		 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_002B83ctEd-96YWU42lBhw" name="getEditingDomain">
                  <ownedComment xmi:id="_002B9HctEd-96YWU42lBhw">
                    <body>
		 * Obtains the editing domain having the specified ID.  if the specified
		 * domain is registered on the extension point but has not yet been
		 * created, then it is first created (using the designated factory)
		 * and then returned. 
		 * 
		 * @param id the ID to request
		 * 
		 * @return the matching editing domain, or &lt;code>null&lt;/code> if it is
		 *     not found and it could not be created from the extension point
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_00_y8HctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_00_y8XctEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_01Jj8HctEd-96YWU42lBhw" name="add">
                  <ownedComment xmi:id="_01Jj8XctEd-96YWU42lBhw">
                    <body>
		 * Registers an editing domain under the specified ID.  This will displace
		 * any domain previously registered under this ID.
		 * Note that it is not permitted to replace an editing domain that
		 * was registered statically on the
		 * &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code> extension
		 * point.
		 * 
		 * @param id the domain ID to register
		 * @param domain the domain to register.  If its current
		 *    {@link TransactionalEditingDomain#getID() ID} is not the registered ID, then it
		 *    is updated to correspond
		 * 
		 * @throws IllegalArgumentException if the specified ID is already registered
		 *    statically on the extension point
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_01Jj8nctEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_01Jj83ctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_01St4HctEd-96YWU42lBhw" name="remove">
                  <ownedComment xmi:id="_01St4XctEd-96YWU42lBhw">
                    <body>
		 * Removes the editing domain matching the specified ID from the
		 * registry.  Note that it is not permitted to remove an ID that
		 * was registered statically on the
		 * &lt;code>org.eclipse.emf.transaction.editingDomains&lt;/code> extension
		 * point.
		 * 
		 * @param id the domain ID to deregister
		 * 
		 * @return the editing domain previously registered under this ID,
		 *    or &lt;code>null&lt;/code> if none was registered
		 *    
		 * @throws IllegalArgumentException if the specified ID was registered
		 *    statically on the extension point
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_01St4nctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_01St43ctEd-96YWU42lBhw" name="id" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </nestedClassifier>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_01St5HctEd-96YWU42lBhw" name="DefaultOptions">
                <ownedComment xmi:id="_01St5XctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Adapter interface provided by {@link TransactionalEditingDomain}s that
	 * support the notion of default transaction options.  This allows clients,
	 * usually when initializing an editing domain, to specify options that
	 * will be applied to any read/write {@link Transaction} for which explicit
	 * values are not provided when they are created.
	 * &lt;/p>&lt;p>
	 * There are no default-defaults:  by default, an editing domain has no
	 * default transaction options.  Default options are only applied to
	 * root-level transactions.  Nested transactions are expected to inherit
	 * them (or not) as appropriate to the implementation of the options,
	 * as usual.
	 * &lt;/p>&lt;p>
	 * Note that these are applied also to undo/redo transactions and may be
	 * overridden by the options returned by the
	 * {@link InternalTransactionalEditingDomain#getUndoRedoOptions()} method.
	 * Thus, it may be important for an editing domain to use the undo/redo
	 * options to explicitly disable options that may have defaults.
     * &lt;/p>&lt;p>
     * The {@linkplain TransactionalEditingDomainImpl default editing domain
     * implementation} provides this adapter interface.
	 * &lt;/p>
	 * 
	 * @author Christian W. Damus (cdamus)
	 * 
	 * @since 1.2
	 </body>
                </ownedComment>
                <ownedOperation xmi:id="_01ce4HctEd-96YWU42lBhw" name="getDefaultTransactionOptions">
                  <ownedComment xmi:id="_01ce4XctEd-96YWU42lBhw">
                    <body>
	     * Obtains a read-only view of the editing domain's default transaction
	     * options.
	     * 
	     * @return my read-only map of transaction options
	     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_01ce4nctEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_01ce43ctEd-96YWU42lBhw" name="setDefaultTransactionOptions">
                  <ownedComment xmi:id="_01ce5HctEd-96YWU42lBhw">
                    <body>
	     * Sets the default transaction options.  It is probably best to do this
	     * only when configuring a new editing domain, as inconsistent behaviour
	     * may result from changing the options while editing transactions are
	     * in progress.
	     * 
	     * @param options the new options.  The options are copied from the map
	     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_01mP4HctEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
              </nestedClassifier>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_01mP4XctEd-96YWU42lBhw" name="Lifecycle">
                <ownedComment xmi:id="_01mP4nctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Adapter interface provided by {@link TransactionalEditingDomain}s that
	 * support notification of life-cycle events to
	 * {@link TransactionalEditingDomainListener}s.
	 * &lt;/p>
	 * &lt;p>
	 * This interface is not intended to be implemented by clients, but by
	 * editing domain providers.
	 * &lt;/p>
	 * 
	 * @author Christian W. Damus (cdamus)
	 * 
	 * @since 1.3
	 </body>
                </ownedComment>
                <ownedOperation xmi:id="_01vZ0HctEd-96YWU42lBhw" name="addTransactionalEditingDomainListener">
                  <ownedComment xmi:id="_01vZ0XctEd-96YWU42lBhw">
                    <body>
		 * Adds a listener to be notified of editing domain and transaction
		 * life-cycle events.
		 * 
		 * @param l
		 *            a listener to add
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_01vZ0nctEd-96YWU42lBhw" name="l" type="_0_4NQHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_01vZ03ctEd-96YWU42lBhw" name="removeTransactionalEditingDomainListener">
                  <ownedComment xmi:id="_01vZ1HctEd-96YWU42lBhw">
                    <body>
		 * Removes a lif-cycle event listener from the editing domain.
		 * 
		 * @param l
		 *            a listener to remove
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_01vZ1XctEd-96YWU42lBhw" name="l" type="_0_4NQHctEd-96YWU42lBhw"/>
                </ownedOperation>
              </nestedClassifier>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_zpvgwHctEd-96YWU42lBhw" name="DemultiplexingListener" isAbstract="true">
              <ownedComment xmi:id="_zpvgwXctEd-96YWU42lBhw">
                <body>
 * A convenient superclass for post-commit listeners to process
 * {@link Notification}s one at a time.  This effectively demultiplexes the
 * list of batched notifications.
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_zpvgw3ctEd-96YWU42lBhw" general="_zpvgwnctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_zp5RwXctEd-96YWU42lBhw" name="resourceSetChanged" visibility="public">
                <ownedComment xmi:id="_zp5RwnctEd-96YWU42lBhw">
                  <body>
	 * Implements the post-commit callback by processing the &lt;code>event&lt;/code>'s
	 * notifications one by one, delegating to the {@link #handleNotification}
	 * method.
	 * 
	 * @see #handleNotification(TransactionalEditingDomain, Notification)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zp5Rw3ctEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zp5RxnctEd-96YWU42lBhw" name="handleNotification" visibility="protected" isAbstract="true">
                <ownedComment xmi:id="_zp5Rx3ctEd-96YWU42lBhw">
                  <body>
	 * Implemented by subclasses to respond to each notification in serial order.
	 * 
	 * @param domain the editing domain from which the notification originated
	 * @param notification the notification describing a change in the model
	 * 
	 * @see #resourceSetChanged(ResourceSetChangeEvent)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zqDCwHctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_zqDCwXctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zqDCwnctEd-96YWU42lBhw" name="isPostcommitOnly" visibility="public">
                <ownedComment xmi:id="_zqDCw3ctEd-96YWU42lBhw">
                  <body>
	 * I want only post-commit events, not pre-commit events.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zqMMsHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_zpvgwnctEd-96YWU42lBhw" name="ResourceSetListenerImpl" clientDependency="_0gSHMHctEd-96YWU42lBhw">
              <ownedComment xmi:id="_0gI9QHctEd-96YWU42lBhw">
                <body>
 * Default implementation of a resource-set listener, useful for extending to
 * implement only the callbacks of interest to the client.
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ResourceSetChangeEvent
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_0gSHMXctEd-96YWU42lBhw" name="filter" visibility="private" isLeaf="true" type="_zrPVkHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_0gSHMnctEd-96YWU42lBhw" name="target" visibility="private" type="_0y6IQHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedOperation xmi:id="_0gb4MHctEd-96YWU42lBhw" name="getFilter" visibility="public">
                <ownedParameter xmi:id="_0gb4MXctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0gb4MnctEd-96YWU42lBhw" name="transactionAboutToCommit" visibility="public">
                <ownedComment xmi:id="_0gb4M3ctEd-96YWU42lBhw">
                  <body>
	 * The default implementation of this method does nothing, returning
	 * no trigger command.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0glCIHctEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_0glCIXctEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0glCInctEd-96YWU42lBhw" name="resourceSetChanged" visibility="public">
                <ownedComment xmi:id="_0glCI3ctEd-96YWU42lBhw">
                  <body>
	 * The default implementation of this method does nothing.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0guzIHctEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0guzIXctEd-96YWU42lBhw" name="isAggregatePrecommitListener" visibility="public">
                <ownedComment xmi:id="_0guzInctEd-96YWU42lBhw">
                  <body>
	 * By default, assume that we want individual transaction pre-commit.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0guzI3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0guzJHctEd-96YWU42lBhw" name="isPrecommitOnly" visibility="public">
                <ownedComment xmi:id="_0guzJXctEd-96YWU42lBhw">
                  <body>
	 * By default, assume that we do not only want pre-commit events but also
	 * post-commit events.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0g4kIHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0g4kIXctEd-96YWU42lBhw" name="isPostcommitOnly" visibility="public">
                <ownedComment xmi:id="_0g4kInctEd-96YWU42lBhw">
                  <body>
	 * By default, assume that we do not only want post-commit events but also
	 * pre-commit events.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0g4kI3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0g4kJHctEd-96YWU42lBhw" name="getTarget" visibility="protected">
                <ownedComment xmi:id="_0g4kJXctEd-96YWU42lBhw">
                  <body>
	 * Queries the transactional editing domain, if any, to which I am
	 * listening. Note the assumption of the most common case in which a
	 * listener is only attached to a single domain.
	 * 
	 * @return the editing domain that I listen to, or &lt;code>null&lt;/code> if none
	 * @since 1.3
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0hBuEHctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0hBuEXctEd-96YWU42lBhw" name="setTarget" visibility="public">
                <ownedComment xmi:id="_0hBuEnctEd-96YWU42lBhw">
                  <body>
	 * {@linkplain #getTarget() Remembers} the new editing domain that I am now
	 * listening to, if it is not &lt;code>null&lt;/code>.
	 * 
	 * @since 1.3
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0hBuE3ctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0hBuFHctEd-96YWU42lBhw" name="unsetTarget" visibility="public">
                <ownedComment xmi:id="_0hBuFXctEd-96YWU42lBhw">
                  <body>
	 * If the specified domain is the one that I {@linkplain #getTarget()
	 * remembered}, then I forget it because I am no longer listening to it.
	 * 
	 * @since 1.3
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0hBuFnctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_zp5RwHctEd-96YWU42lBhw" name="ResourceSetChangeEvent">
              <ownedComment xmi:id="_0dmmoHctEd-96YWU42lBhw">
                <body>
 * Event object describing the nature of changes in a resource set to
 * {@link ResourceSetListener}s.  Note that the event object is only valid
 * during the scope of the listener call-back invocation; in particular, the
 * editing domain is free to re-use event objects and/or notification lists
 * for performance purposes.  Therefore, if it is necessary to retain the
 * event or its list of notifications beyond the scope of the call-back, this
 * information must be copied by the client.
 * &lt;p>
 * This class is not intended to be extended or instantiated by clients.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ResourceSetListener
 </body>
              </ownedComment>
              <generalization xmi:id="_0dmmoXctEd-96YWU42lBhw" general="_vsyDUncqEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_0dmmonctEd-96YWU42lBhw" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" type="_vdu6sHcqEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_0dwXoHctEd-96YWU42lBhw" name="transaction" visibility="private" isLeaf="true" type="_0l8qUHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_0dwXoXctEd-96YWU42lBhw" name="notifications" visibility="private" isLeaf="true" type="_zp5RxXctEd-96YWU42lBhw" isUnique="false">
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0d5hkXctEd-96YWU42lBhw" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_0d5hkHctEd-96YWU42lBhw"/>
              </ownedAttribute>
              <ownedOperation xmi:id="_0eDSkHctEd-96YWU42lBhw" name="getEditingDomain" visibility="public">
                <ownedComment xmi:id="_0eDSkXctEd-96YWU42lBhw">
                  <body>
	 * Obtains the editing domain whose resource set contents changed.
	 * 
	 * @return the editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0eDSknctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0eDSk3ctEd-96YWU42lBhw" name="getTransaction" visibility="public">
                <ownedComment xmi:id="_0eDSlHctEd-96YWU42lBhw">
                  <body>
	 * Obtains the transaction in which resource set changes have occurred.
	 * This is the transaction that is either about to commit or that has
	 * committed.  Of particular interest in the transaction's
	 * {@link Transaction#getStatus() status} after it has committed.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that it is not permitted to attempt to commit or roll back
	 * the transaction during the listener call-back.  Any attempt to do so will
	 * result in an &lt;code>IllegalStateException&lt;/code>.
	 * &lt;/p>
	 * 
	 * @return the transaction that is committing or committed.  This will
	 *     never be &lt;code>null&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0eMcgHctEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0eMcgXctEd-96YWU42lBhw" name="getNotifications" visibility="public">
                <ownedComment xmi:id="_0eMcgnctEd-96YWU42lBhw">
                  <body>
	 * Obtains the list of events (as {@link Notification}s), in the order in
	 * which they occurred, indicating the changes that occurred during the
	 * transaction.
	 * 
	 * @return the changes
	 * 
	 * @see Notification
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0eMcg3ctEd-96YWU42lBhw" type="_zp5RxXctEd-96YWU42lBhw" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0eWNgHctEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_0eMchHctEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_zqV9sHctEd-96YWU42lBhw" name="ExceptionHandler">
              <ownedComment xmi:id="_zqV9sXctEd-96YWU42lBhw">
                <body>
 * An interface for client objects that handle exceptions occurring in the
 * interaction with an editing domain's command stack.  This is useful, for
 * example, for UIs that want to show a dialog when a command's transaction
 * is rolled back by validation problems. 
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see RollbackException
 </body>
              </ownedComment>
              <ownedOperation xmi:id="_zqV9snctEd-96YWU42lBhw" name="handleException">
                <ownedComment xmi:id="_zqV9s3ctEd-96YWU42lBhw">
                  <body>
	 * Handles the specified exception in some way.
	 * 
	 * @param e the exception that occurred.  The {@link RollbackException}
	 *     is the most interesting exception type that is likely to occur
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zqV9tHctEd-96YWU42lBhw" name="e" type="_vm0lQ3cqEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_zrPVkHctEd-96YWU42lBhw" name="NotificationFilter" isAbstract="true">
              <ownedComment xmi:id="_zrPVkXctEd-96YWU42lBhw">
                <body>
 * A filter that determines which {@link Notification}s will be passed to
 * {@link ResourceSetListener}s.  Filters can be combined using simple
 * boolean operations.
 * &lt;p>
 * The default filter for listeners that do not otherwise declare one is
 * {@link #NOT_TOUCH}.
 * &lt;/p>
 * &lt;p>
 * &lt;b>Note&lt;/b> that {@link ResourceSetListener}s never receive
 * {@link Notification#REMOVING_ADAPTER} notifications because these are
 * intended only to inform an adapter that it is being removed; they are
 * not broadcast to all adapters of an object.  Besides which, resource set
 * listeners are not adapters.
 * &lt;/p>
 * &lt;p>
 * Since the EMF Transaction 1.3 release, clients can implement arbitrary
 * filter criteria by specializing the {@link NotificationFilter.Custom} class.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ResourceSetListener
 * @see Notification
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_zrPVknctEd-96YWU42lBhw" name="ANY" visibility="public" isLeaf="true" isStatic="true" type="_zrPVkHctEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_zrYfgHctEd-96YWU42lBhw">
                  <body> As its name implies, this filter matches any notification. </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_zrYfgXctEd-96YWU42lBhw" name="NOT_TOUCH" visibility="public" isLeaf="true" isStatic="true" type="_zrPVkHctEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_zriQgHctEd-96YWU42lBhw">
                  <body>
	 * Matches only notifications that are not &quot;touches.&quot;
	 * 
	 * @see Notification#isTouch()
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_zriQgXctEd-96YWU42lBhw" name="READ" visibility="public" isLeaf="true" isStatic="true" type="_zrPVkHctEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_zriQgnctEd-96YWU42lBhw">
                  <body>
	 * Matches any notification that can occur during the normal course of
	 * a read-only transaction.  These include:
	 * &lt;ul>
	 *   &lt;li>proxy resolution&lt;/li>
	 *   &lt;li>any change to the {@link ResourceSet#getResources() resources}
	 *       list of a resource set&lt;/li>
	 *   &lt;li>any change to the &lt;code>isLoaded&lt;/code>, &lt;code>isModified&lt;/code>,
	 *       &lt;code>URI&lt;/code>, &lt;code>errors&lt;/code>, &lt;code>warnings&lt;/code>, and
	 *       &lt;code>resourceSet&lt;/code> features of a resource&lt;/li>
	 *   &lt;li>any change to the {@link Resource#getContents() contents} of
	 *       a resource while it is loading or unloading&lt;/li>
	 * &lt;/ul>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_zrsBgHctEd-96YWU42lBhw" name="RESOURCE_LOADED" visibility="public" isLeaf="true" isStatic="true" type="_zrPVkHctEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_zrsBgXctEd-96YWU42lBhw">
                  <body>
	 * A filter matching &quot;resource loaded&quot; events.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_zrsBgnctEd-96YWU42lBhw" name="RESOURCE_UNLOADED" visibility="public" isLeaf="true" isStatic="true" type="_zrPVkHctEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_zr1LcHctEd-96YWU42lBhw">
                  <body>
	 * A filter matching &quot;resource unloaded&quot; events.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_zteKMHctEd-96YWU42lBhw" name="Custom" isAbstract="true">
                <ownedComment xmi:id="_zteKMXctEd-96YWU42lBhw">
                  <body>
	 * A custom notification filter, implementing user-defined
	 * {@linkplain NotificationFilter#matches(Notification) selection criteria}.
	 * Custom notification filters are distinguished from the stock
	 * implementations created by the factory methods of the
	 * {@link NotificationFilter} class to ensure that the base class remains
	 * abstract.
	 * 
	 * @author Christian W. Damus (cdamus)
	 * 
	 * @since 1.3
	 </body>
                </ownedComment>
                <generalization xmi:id="_zteKMnctEd-96YWU42lBhw" general="_zrPVkHctEd-96YWU42lBhw"/>
              </nestedClassifier>
              <ownedOperation xmi:id="_zr1LcXctEd-96YWU42lBhw" name="createResourceContentTypeFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zr1LcnctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matches any notification from a resource of the
	 * specified content type.  Because the determination of a resource's
	 * content type is costly, it is cached on the resource via an adapter and
	 * is cleared on any change to the resource's contents or other properties.
	 * 
	 * @param contentType the content type identifier to match
	 * 
	 * @return the filter
	 * 
	 * @throws IllegalArgumentException if the specified content type is not
	 *     defined
	 * 
	 * @see IContentType
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zr1Lc3ctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zr1LdHctEd-96YWU42lBhw" name="contentType" type="_QJNf73OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zr-8cHctEd-96YWU42lBhw" name="createNotifierFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zr-8cXctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching any notification from the specified notifier.
	 * 
	 * @param notifier a notifier (usually an {@link EObject}, {@link Resource},
	 *     or {@link ResourceSet}
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zr-8cnctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zr-8c3ctEd-96YWU42lBhw" name="notifier" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zr-8dHctEd-96YWU42lBhw" name="createEventTypeFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zr-8dXctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching any notification of the specified type.
	 * 
	 * @param eventType the notification type (as defined by the
	 *    {@link Notification} interface)
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zsIGYHctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zsIGYXctEd-96YWU42lBhw" name="eventType" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zsR3YXctEd-96YWU42lBhw" name="createFeatureFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zsR3YnctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching any notification from the specified feature.
	 * 
	 * @param feature a structural feature meta-object
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zsR3Y3ctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zsR3ZHctEd-96YWU42lBhw" name="feature" type="_zsR3YHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zsboYHctEd-96YWU42lBhw" name="createFeatureFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zsboYXctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching any notification from the specified feature.
	 * This variant is useful for notifiers that are not modeled via Ecore.
	 * 
	 * @param ownerType the notifier type as a Java class or interface
	 * @param featureId the feature's numeric ID
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zsboYnctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zsboY3ctEd-96YWU42lBhw" name="ownerType" type="_zsR3ZXctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_zsboZHctEd-96YWU42lBhw" name="featureId" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zskyUXctEd-96YWU42lBhw" name="createFeatureFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zskyUnctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching any notification from the specified feature.
	 * This variant is useful for notifiers that are not modeled as
	 * {@link EClass}es.  For example, this supports the features of the
	 * {@link Resource} data type.
	 * 
	 * @param ownerType the notifier type as an Ecore classifier
	 * @param featureId the feature's numeric ID
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zskyU3ctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zskyVHctEd-96YWU42lBhw" name="ownerType" type="_zskyUHctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_zsujUHctEd-96YWU42lBhw" name="featureId" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zsujUXctEd-96YWU42lBhw" name="createNotifierTypeFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zsujUnctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching notifications from any instance of the
	 * specified type.  This variant is useful for notifiers that are not
	 * modeled via Ecore.
	 * 
	 * @param type the notifier type as a Java class or interface
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zsujU3ctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zsujVHctEd-96YWU42lBhw" name="type" type="_zsR3ZXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_zs4UUHctEd-96YWU42lBhw" name="createNotifierTypeFilter" visibility="public" isStatic="true">
                <ownedComment xmi:id="_zs4UUXctEd-96YWU42lBhw">
                  <body>
	 * Creates a filter matching notifications from any instance of the
	 * specified type.  This variant is useful for notifiers that are
	 * modeled via Ecore.
	 * 
	 * @param type the notifier type as an Ecore classifier
	 * 
	 * @return the filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_zs4UUnctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_zs4UU3ctEd-96YWU42lBhw" name="type" type="_zskyUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ztBeQHctEd-96YWU42lBhw" name="and" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_ztBeQXctEd-96YWU42lBhw">
                  <body>
	 * Creates a new filter combining me with another as a boolean conjunction.
	 * The &quot;and&quot; operation short-circuits; the &lt;code>other&lt;/code> filter is not
	 * consulted when I (the first filter) do not match.
	 * 
	 * @param other another filter (must not be &lt;code>null&lt;/code>)
	 * 
	 * @return a new &quot;and&quot; filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_ztBeQnctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_ztBeQ3ctEd-96YWU42lBhw" name="other" type="_zrPVkHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ztLPQHctEd-96YWU42lBhw" name="or" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_ztLPQXctEd-96YWU42lBhw">
                  <body>
	 * Creates a new filter combining me with another as a boolean disjunction.
	 * The &quot;or&quot; operation short-circuits; the &lt;code>other&lt;/code> filter is not
	 * consulted when I (the first filter) match.
	 * 
	 * @param other another filter (must not be &lt;code>null&lt;/code>)
	 * 
	 * @return a new &quot;or&quot; filter
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_ztLPQnctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_ztLPQ3ctEd-96YWU42lBhw" name="other" type="_zrPVkHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ztLPRHctEd-96YWU42lBhw" name="negated" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_ztLPRXctEd-96YWU42lBhw">
                  <body>
	 * Creates a new filter that is the boolean negation of me.
	 * 
	 * @return the opposite of me
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_ztUZMHctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ztUZMXctEd-96YWU42lBhw" name="matches" visibility="public" isAbstract="true">
                <ownedComment xmi:id="_ztUZMnctEd-96YWU42lBhw">
                  <body>
	 * Determines whether a notification matches my filtering criteria.
	 * Notifications that match are passed to the listener for which I am
	 * filtering.
	 * 
	 * @param notification a notification
	 * 
	 * @return &lt;code>true&lt;/code> if the notification should be passed to my
	 *     listener; &lt;code>false&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_ztUZM3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_ztUZNHctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_0WTEwHctEd-96YWU42lBhw" name="ReadFilter">
              <ownedComment xmi:id="_0WTEwXctEd-96YWU42lBhw">
                <body>
 * Implementation of the filter that matches notifications from changes that are
 * permitted during read-only transactions.  These are only &quot;concrete&quot; changes
 * (implementation details), not &quot;abstract&quot; (semantically significant) model
 * changes.
 * &lt;p>
 * See the documentation on the {@link NotificationFilter#READ} constant for
 * details of how notifications are determined to be &quot;read compatible.&quot;
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see NotificationFilter#READ
 </body>
              </ownedComment>
              <generalization xmi:id="_0WTEwnctEd-96YWU42lBhw" general="_zrPVkHctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_0WTEw3ctEd-96YWU42lBhw" name="matches" visibility="public">
                <ownedParameter xmi:id="_0WTExHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_0Wc1wHctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0Wc1wXctEd-96YWU42lBhw" name="checkResource" visibility="private">
                <ownedComment xmi:id="_0Wc1wnctEd-96YWU42lBhw">
                  <body>
	 * Determines whether the specified change to a resource is permitted during
	 * a read-only transaction.
	 * 
	 * @param notification indication of a change in a resource
	 * 
	 * @return whether the notification is &quot;read compatible&quot;
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0Wc1w3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_0WmmwHctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0Wmmw3ctEd-96YWU42lBhw" name="isLoadingOrUnloading" visibility="private">
                <ownedComment xmi:id="_0WmmxHctEd-96YWU42lBhw">
                  <body>
	 * Checks whether a resource is currently in the process of loading or
	 * unloading.
	 * 
	 * @param res a resource
	 * @return &lt;code>true&lt;/code> if the resource is currently loading or
	 *    unloading; &lt;code>false&lt;/code>, otherwise (fully loaded or unloaded)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0WvwsHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_0WvwsXctEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_0X8DgHctEd-96YWU42lBhw" name="RecordingCommand" clientDependency="_0YF0g3ctEd-96YWU42lBhw" isAbstract="true">
              <ownedComment xmi:id="_0X8DgXctEd-96YWU42lBhw">
                <body>
 * A partial {@link org.eclipse.emf.common.command.Command} implementation that
 * records the changes made by a subclass's direct manipulation of objects via
 * the metamodel's API.  This simplifies the programming model for complex
 * commands (not requiring composition of set/add/remove commands) while
 * still providing automatic undo/redo support.
 * &lt;p>
 * Subclasses are simply required to implement the {@link #doExecute()} method
 * to make the desired changes to the model.  Note that, because changes are
 * recorded for automatic undo/redo, the concrete command must not make any
 * changes that cannot be recorded by EMF (unless it does not matter that they
 * will not be undone).
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_0YF0gHctEd-96YWU42lBhw" general="_vgkMQHcqEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_0YF0hHctEd-96YWU42lBhw" name="domain" visibility="private" isLeaf="true" type="_0y6IQHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_0YO-cHctEd-96YWU42lBhw" name="transaction" visibility="private" type="_0l8qUHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_0YO-cXctEd-96YWU42lBhw" name="change" visibility="private" type="_0wrToHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedOperation xmi:id="_0YO-cnctEd-96YWU42lBhw" name="prepare" visibility="protected">
                <ownedComment xmi:id="_0YO-c3ctEd-96YWU42lBhw">
                  <body>
	 * Subclasses should override this if they have more preparation to do.
	 * By default, the result is just &lt;code>true&lt;/code>.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0YYvcHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0YYvcXctEd-96YWU42lBhw" name="execute" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_0YYvcnctEd-96YWU42lBhw">
                  <body>
	 * Implements the execution with automatic recording of undo information.
	 * Delegates the actual model changes to the subclass's implementation of
	 * the {@link #doExecute()} method.
	 * 
	 * @see #doExecute()
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0YYvc3ctEd-96YWU42lBhw" name="preExecute" visibility="protected">
                <ownedComment xmi:id="_0YYvdHctEd-96YWU42lBhw">
                  <body>
	 * Will be called prior to {@link RecordingCommand#doExecute()}.
	 * @since 1.4
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0YigcHctEd-96YWU42lBhw" name="postExecute" visibility="protected">
                <ownedComment xmi:id="_0YigcXctEd-96YWU42lBhw">
                  <body>
	 * Will be called after {@link RecordingCommand#doExecute()}.
	 * @since 1.4
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0YigcnctEd-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_0Yigc3ctEd-96YWU42lBhw">
                  <body>
	 * I can be undone if I successfully recorded the changes that I executed.
	 * Subclasses would not normally need to override this method.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0YrqYHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0YrqYXctEd-96YWU42lBhw" name="canRedo" visibility="public">
                <ownedComment xmi:id="_0YrqYnctEd-96YWU42lBhw">
                  <body>
	 * I can be redone if I successfully recorded the changes that I executed.
	 * Subclasses would not normally need to override this method.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0YrqY3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0YrqZHctEd-96YWU42lBhw" name="canApplyChange" visibility="private">
                <ownedParameter xmi:id="_0YrqZXctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0Y1bYHctEd-96YWU42lBhw" name="undo" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_0Y1bYXctEd-96YWU42lBhw">
                  <body>
	 * Undoes the changes that I recorded.
	 * Subclasses would not normally need to override this method.
	 * 
	 * @throws IllegalStateException if I am not {@linkplain #canUndo() undoable}
	 * 
	 * @see #canUndo()
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0Y1bYnctEd-96YWU42lBhw" name="redo" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_0Y1bY3ctEd-96YWU42lBhw">
                  <body>
	 * Redoes the changes that I recorded.
	 * Subclasses would not normally need to override this method.
	 * 
	 * @throws IllegalStateException if I am not {@linkplain #canRedo() redoable}
	 * 
	 * @see #canRedo()
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0Y1bZHctEd-96YWU42lBhw" name="doExecute" visibility="protected" isAbstract="true">
                <ownedComment xmi:id="_0Y1bZXctEd-96YWU42lBhw">
                  <body>
	 * Implemented by subclasses to perform the necessary changes in the model.
	 * These changes are applied by direct manipulation of the model objects,
	 * &lt;em>not&lt;/em> by executing commands.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_0Y1bZnctEd-96YWU42lBhw" name="chain" visibility="public">
                <ownedParameter xmi:id="_0Y_MYHctEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_0Y_MYXctEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0ZIWUHctEd-96YWU42lBhw" name="getActiveTransaction" visibility="private">
                <ownedParameter xmi:id="_0ZIWUXctEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0ZIWUnctEd-96YWU42lBhw" name="isNestedCommand" visibility="private">
                <ownedComment xmi:id="_0ZIWU3ctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I am a nested command, not executing as the root command
	 * of the active transaction.
	 * 
	 * @return whether I am not the root command being executed in a transaction
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0ZIWVHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0ZIWVXctEd-96YWU42lBhw" name="isTriggerCommand" visibility="private">
                <ownedComment xmi:id="_0ZIWVnctEd-96YWU42lBhw">
                  <body>
     * Queries whether I am executing in the context of a trigger transaction.
     * That is to say, whether I am a trigger command.
     * 
     * @return whether the active transaction is a trigger transaction
     </body>
                </ownedComment>
                <ownedParameter xmi:id="_0ZIWV3ctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0ZSHUHctEd-96YWU42lBhw" name="isUndoable" visibility="private">
                <ownedComment xmi:id="_0ZSHUXctEd-96YWU42lBhw">
                  <body>
     * Queries whether I am executing in the context of a transaction that is
     * intended to be undoable.
     * 
     * @return whether the active transaction is recording undo information
     </body>
                </ownedComment>
                <ownedParameter xmi:id="_0ZSHUnctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0ZSHU3ctEd-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_0ZSHVHctEd-96YWU42lBhw">
                  <body>
     * Extends the inherited implementation by disposing my change description,
     * if any.
     </body>
                </ownedComment>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_0YF0gXctEd-96YWU42lBhw" name="util">
              <packagedElement xmi:type="uml:Interface" xmi:id="_0YF0gnctEd-96YWU42lBhw" name="ConditionalRedoCommand">
                <ownedComment xmi:id="_3FTAcXmEEd-Gxb67rYBBnw">
                  <body>
 * A specialization of the EMF {@link Command} API that accounts for conditional
 * redoable-ness.  This interface adds a {@link #canRedo()} operation in
 * conjunction with the {@link Command#canUndo()}.
 * &lt;p>
 * This interface is intended to be implemented by clients.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_3FcxcHmEEd-Gxb67rYBBnw" general="_vowe8HcqEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_3FvsYHmEEd-Gxb67rYBBnw" name="canRedo">
                  <ownedComment xmi:id="_3FvsYXmEEd-Gxb67rYBBnw">
                    <body>
	   * Queries whether I can be redone.  The result of calling this
	   * operation is undefined until I have been {@link Command#undo() undone}.
	   * Note that it is acceptable for a conditionally redoable command not
	   * to be redoable if it has successfully been undone, or even after
	   * having been successfully redone at least once before.
	   * 
	   * @return &lt;code>true&lt;/code> if I can be redone; &lt;code>false&lt;/code>,
	   *    otherwise
	   </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_3GCnUHmEEd-Gxb67rYBBnw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_3GViQHmEEd-Gxb67rYBBnw" name="Compound" clientDependency="_3GpEQHmEEd-Gxb67rYBBnw">
                  <ownedComment xmi:id="_3GViQXmEEd-Gxb67rYBBnw">
                    <body>
	   * A conditionally redoable compound command.
	   *
	   * @author Christian W. Damus (cdamus)
	   </body>
                  </ownedComment>
                  <generalization xmi:id="_3GfTQHmEEd-Gxb67rYBBnw" general="_vwW7wHcqEd-96YWU42lBhw"/>
                  <ownedOperation xmi:id="_3GpEQXmEEd-Gxb67rYBBnw" name="canRedo" visibility="public">
                    <ownedComment xmi:id="_3GpEQnmEEd-Gxb67rYBBnw">
                      <body>
		 * I can redo if none of my composed commands cannot redo.
		 * 
		 * @return &lt;code>false&lt;/code> if any command that is a
		 *     {@link ConditionalRedoCommand} cannot redo;
		 *     &lt;code>true&lt;/code>, otherwise
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_3GyOMHmEEd-Gxb67rYBBnw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_3G7_MHmEEd-Gxb67rYBBnw" name="chain" visibility="public">
                    <ownedComment xmi:id="_3G7_MXmEEd-Gxb67rYBBnw">
                      <body>
		 * I am self-chaining.
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_3Hh1EHmEEd-Gxb67rYBBnw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_3HrmEHmEEd-Gxb67rYBBnw" name="c" type="_vowe8HcqEd-96YWU42lBhw"/>
                  </ownedOperation>
                </nestedClassifier>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_8uUqM3cuEd-96YWU42lBhw" name="TriggerCommand"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9HW1QHcuEd-96YWU42lBhw" name="ValidateEditSupport"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9QJk4XcuEd-96YWU42lBhw" name="CompositeChangeDescription"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9QwB0HcuEd-96YWU42lBhw" name="CommandChangeDescription"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_9mzKVXcuEd-96YWU42lBhw" name="Adaptable"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_3GpEQHmEEd-Gxb67rYBBnw" name="Compound extends ConditionalRedoCommand" supplier="_0YF0gnctEd-96YWU42lBhw" client="_3GViQHmEEd-Gxb67rYBBnw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_0YF0g3ctEd-96YWU42lBhw" name="RecordingCommand extends ConditionalRedoCommand" supplier="_0YF0gnctEd-96YWU42lBhw" client="_0X8DgHctEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_0a7GEHctEd-96YWU42lBhw" name="ResourceContentTypeFilter">
              <ownedComment xmi:id="_0a7GEXctEd-96YWU42lBhw">
                <body>
 * Implementation of the filter that matches on resource content type.
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_0a7GEnctEd-96YWU42lBhw" general="_zrPVkHctEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_0bEQBXctEd-96YWU42lBhw" name="contentType" visibility="private" isLeaf="true" type="_0bEQBHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedOperation xmi:id="_0bOBAHctEd-96YWU42lBhw" name="matches" visibility="public">
                <ownedParameter xmi:id="_0bOBAXctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_0bOBAnctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0bOBA3ctEd-96YWU42lBhw" name="getContentTypes" visibility="private">
                <ownedComment xmi:id="_0bOBBHctEd-96YWU42lBhw">
                  <body>
	 * Gets the cached content types of the resource that either is
	 * the notifier of the specified notification or that contains the
	 * notifier.
	 * 
	 * @param notification a notification from a resource or its
	 *     contents
	 * 
	 * @return the resource's content types
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0bOBBXctEd-96YWU42lBhw" type="_0bEQBHctEd-96YWU42lBhw" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0bXyAXctEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_0bXyAHctEd-96YWU42lBhw"/>
                </ownedParameter>
                <ownedParameter xmi:id="_0bXyAnctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0bXyA3ctEd-96YWU42lBhw" name="getContentTypes" visibility="private">
                <ownedComment xmi:id="_0bXyBHctEd-96YWU42lBhw">
                  <body>
	 * Gets the cached content types of a resource. If the cache misses.
	 * then we compute the content types and cache them.
	 * 
	 * @param res a resource
	 * 
	 * @return its cached content types
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0bXyBXctEd-96YWU42lBhw" type="_0bEQBHctEd-96YWU42lBhw" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0bg78XctEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_0bg78HctEd-96YWU42lBhw"/>
                </ownedParameter>
                <ownedParameter xmi:id="_0bg78nctEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0bg783ctEd-96YWU42lBhw" name="computeContentTypes" visibility="private">
                <ownedComment xmi:id="_0bg79HctEd-96YWU42lBhw">
                  <body>
	 * Computes a resource's content types from its content (if
	 * available on disk) and its file name.
	 * 
	 * @param res a resource
	 * 
	 * @return its content types
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0bqs8HctEd-96YWU42lBhw" type="_0bEQBHctEd-96YWU42lBhw" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0bqs8nctEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_0bqs8XctEd-96YWU42lBhw"/>
                </ownedParameter>
                <ownedParameter xmi:id="_0bqs83ctEd-96YWU42lBhw" name="res" type="_0WmmwnctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_0epIcHctEd-96YWU42lBhw" name="ResourceSetListener">
              <ownedComment xmi:id="_0epIcXctEd-96YWU42lBhw">
                <body>
 * Listener interface for batched notification of changes to a resource set.
 * Unlike EMF {@link org.eclipse.emf.common.notify.Adapter}s, resource-set
 * listeners receive notifications at the close of a transaction and, in the
 * case of the {@link #resourceSetChanged post-commit} call-back, only in
 * the case that the transaction committed (did not roll back).
 * &lt;p>
 * This interface is intended to be implemented by clients.
 * For convenience, clients can extend the {@link ResourceSetListenerImpl}
 * class if they need no other superclass.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see ResourceSetListenerImpl
 * @see ResourceSetChangeEvent
 * @see NotificationFilter
 * @see TransactionalEditingDomain#addResourceSetListener(ResourceSetListener)
 </body>
              </ownedComment>
              <generalization xmi:id="_0ey5cXctEd-96YWU42lBhw" general="_0ey5cHctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_0ey5cnctEd-96YWU42lBhw" name="getFilter">
                <ownedComment xmi:id="_0ey5c3ctEd-96YWU42lBhw">
                  <body>
	 * Provides a filter to select which notifications should be sent to this
	 * listener.  If none is provided, the default is the
	 * {@link NotificationFilter#NOT_TOUCH} filter.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that, if a listener's filter does not match any of the
	 * notifications that were received during a transaction, then it is not
	 * invoked at all.  Thus, the notification lists received in the
	 * {@link ResourceSetChangeEvent}s will never be empty.
	 * &lt;/p>
	 * &lt;p>
	 * &lt;b>Note&lt;/b> also that a listener's filter must not change over time, or
	 * unpredictable behaviour will occur.  In particular, the editing domain
	 * is free to obtain the filter from the listener only once when the
	 * listener is added and never request it thereafter.  Also, it is not
	 * expected the the same filter object's condition can change over time.
	 * &lt;/p>
	 * 
	 * @return the filter used to select notifications, or &lt;code>null&lt;/code> to
	 *     obtain the default
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0ey5dHctEd-96YWU42lBhw" type="_zrPVkHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0ey5dXctEd-96YWU42lBhw" name="transactionAboutToCommit">
                <ownedComment xmi:id="_0ey5dnctEd-96YWU42lBhw">
                  <body>
	 * Informs the listener that the execution of a command (which may be
	 * implicit) is about to complete.  More precisely, that a read/write
	 * transaction is about to commit.
	 * &lt;p>
	 * Listeners implement this method in order to provide &quot;trigger commands&quot;,
	 * akin to database triggers in RDBMSes.  To follow-up changes that
	 * occurred in the model, to proactively maintain model integrity, the
	 * listener can return a command that makes additional changes.
	 * &lt;/p>
	 * &lt;p>
	 * Trigger commands are executed after all listeners have been invoked,
	 * in the same transaction context as the original events (and therefore
	 * validated together with them).  Moreover, because these triggers perform
	 * model changes, they cause another round of invocation of these very same
	 * resource set listeners.
	 * &lt;/p>
	 * &lt;p>
	 * The command returned by a trigger, if any, should be careful to implement
	 * its {@link Command#canExecute()} method appropriately.  In particular,
	 * it is important to check that the conditions observed by the listener
	 * still apply, as other trigger commands may be executed before it that can
	 * make inconsistent changes.
	 * &lt;/p>
	 * &lt;p>
	 * Finally, a pre-commit listener has the opportunity to force the current
	 * transaction to roll back instead of completing the commit.  This helps
	 * in the implementation of certain kinds of live validation checks that
	 * cannot be implemented using the EMF validation framework.
	 * &lt;/p>
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that the listener is invoked in a read-only transaction
	 * context.  It is safe to read the model, but direct changes are not
	 * permitted (return a command instead).
	 * &lt;/p>
	 * 
	 * @param event the event object describing the changes that occurred in
	 *    the resource set
	 *    
	 * @return an optional command to perform additional changes.  Can be
	 *    &lt;code>null&lt;/code> if no changes are required
	 *    
	 * @throws RollbackException to force a roll-back of the current transaction
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0ey5d3ctEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_0ey5eHctEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0e8qcHctEd-96YWU42lBhw" name="resourceSetChanged">
                <ownedComment xmi:id="_0e8qcXctEd-96YWU42lBhw">
                  <body>
	 * Informs the listener that changes have been committed to the model.
	 * Unlike the {@link #transactionAboutToCommit(ResourceSetChangeEvent)}
	 * call-back, this method has no opportunity to make subsequent changes via
	 * triggers or to roll back the transaction.  It has already committed.
	 * This has the advantage, however, of guaranteeing that it is safe to
	 * update the user interface or other dependent components or systems
	 * because the changes are committed.  This call-back is not invoked if
	 * the transaction rolls back, as all of its pending changes are reverted.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that the listener is invoked in a read-only transaction
	 * context.  It is safe to read the model, but changes are not permitted.
	 * &lt;/p>
	 * 
	 * @param event the event object describing the changes that occurred in
	 *    the resource set
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0e8qcnctEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0e8qc3ctEd-96YWU42lBhw" name="isAggregatePrecommitListener">
                <ownedComment xmi:id="_0e8qdHctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I should be invoked only for pre-commit of the root
	 * transaction, with all of the notifications from that transaction and any
	 * nested transactions.  Otherwise, I will be invoked for each transaction
	 * individually and only with its own notifications.
	 * 
	 * @return &lt;code>true&lt;/code> if I should be invoked only for pre-commit of
	 *     the root transaction; &lt;code>false&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0e8qdXctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0fF0YHctEd-96YWU42lBhw" name="isPrecommitOnly">
                <ownedComment xmi:id="_0fF0YXctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I am interested only in the pre-commit
	 * ({@link #transactionAboutToCommit(ResourceSetChangeEvent)}) call-back.
	 * This helps the editing domain to optimize the distribution of events.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that this method is queried only once when the listener is
	 * added to the editing domain, so the result should not change over time.
	 * &lt;/p>
	 * 
	 * @return &lt;code>true&lt;/code> if I only am interested in pre-commit events;
	 *     &lt;code>false&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0fF0YnctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0fF0Y3ctEd-96YWU42lBhw" name="isPostcommitOnly">
                <ownedComment xmi:id="_0fF0ZHctEd-96YWU42lBhw">
                  <body>
	 * Queries whether I am interested only in the post-commit
	 * ({@link #resourceSetChanged(ResourceSetChangeEvent)}) call-back.
	 * This helps the editing domain to optimize the distribution of events.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that this method is queried only once when the listener is
	 * added to the editing domain, so the result should not change over time.
	 * &lt;/p>
	 * 
	 * @return &lt;code>true&lt;/code> if I only am interested in post-commit events;
	 *     &lt;code>false&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0fF0ZXctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_0fPlYHctEd-96YWU42lBhw" name="Internal">
                <ownedComment xmi:id="_0fPlYXctEd-96YWU42lBhw">
                  <body>
	 * An interface for communication of internal life-cycle events to the
	 * listener.  These call-backs do not have anything to do with the state
	 * of the resource set, but rather inform the listeners of changes in its
	 * own state.  This interface is optional; listeners should implement it
	 * only if they need the additional notifications.
	 * 
	 * @author Christian W. Damus (cdamus)
	 * 
	 * @since 1.3
	 </body>
                </ownedComment>
                <generalization xmi:id="_0fPlYnctEd-96YWU42lBhw" general="_0epIcHctEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_0fPlY3ctEd-96YWU42lBhw" name="setTarget">
                  <ownedComment xmi:id="_0fPlZHctEd-96YWU42lBhw">
                    <body>
		 * Informs me that I have been attached to the specified editing domain.
		 * This is particularly useful for listeners that are statically
		 * registered, as it effectively signals the creation of the editing
		 * domain.
		 * 
		 * @param domain
		 *            an editing domain to which I have been attached. Note that
		 *            nothing precludes the addition of a listener to more than
		 *            one editing domain
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0fPlZXctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0fPlZnctEd-96YWU42lBhw" name="unsetTarget">
                  <ownedComment xmi:id="_0fPlZ3ctEd-96YWU42lBhw">
                    <body>
		 * Informs me that I have been detached from the specified editing
		 * domain. This is a good opportunity for me, perhaps, to clean up any
		 * cached data that pertains to this domain.
		 * 
		 * @param domain
		 *            an editing domain from which I have been detached. Note
		 *            that I may very will still be attached to other domains
		 *            than this
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0fYvUHctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                </ownedOperation>
              </nestedClassifier>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_0gSHMHctEd-96YWU42lBhw" name="ResourceSetListenerImpl extends Internal" supplier="_0fPlYHctEd-96YWU42lBhw" client="_zpvgwnctEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_0hoLAHctEd-96YWU42lBhw" name="RollbackException">
              <ownedComment xmi:id="_0hoLAXctEd-96YWU42lBhw">
                <body>
 * Exception indicating that a transaction was automatically rolled back on
 * attempting to commit.  The usual cause of this exception is either a
 * validation failure or some run-time exception during the commit phase.
 * The {@link #getStatus() status} object provides details suitable for display
 * in a JFace error dialog or the like.
 * &lt;p>
 * This class is intended to be instantiated by clients, particularly in the
 * {@link ResourceSetListener#transactionAboutToCommit(ResourceSetChangeEvent)}
 * method.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @see Transaction#commit()
 * @see TransactionalCommandStack#execute(org.eclipse.emf.common.command.Command, java.util.Map)
 * @see ResourceSetListener#transactionAboutToCommit(ResourceSetChangeEvent)
 * @see ExceptionHandler
 </body>
              </ownedComment>
              <generalization xmi:id="_0hoLAnctEd-96YWU42lBhw" general="_vm0lQ3cqEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_0hoLA3ctEd-96YWU42lBhw" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" type="_vdu6sHcqEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_0h7F8HctEd-96YWU42lBhw" name="status" visibility="private" isLeaf="true" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_0h7F8XctEd-96YWU42lBhw" name="getStatus" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_0h7F8nctEd-96YWU42lBhw">
                  <body>
	 * Obtains the status describing the cause of the transaction rollback.
	 * Its severity should be {@link IStatus#ERROR} or greater, otherwise the
	 * transaction should not have rolled back.
	 * 
	 * @return the status
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0iOA4HctEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_0i9nwHctEd-96YWU42lBhw" name="RunnableWithResult">
              <ownedComment xmi:id="_0i9nwXctEd-96YWU42lBhw">
                <body>
 * Extends the core Java {@link Runnable} interface with the ability to return
 * a result.  Useful for returning results of read operations from the
 * {@link TransactionalEditingDomain#runExclusive(Runnable)} method.
 * &lt;p>
 * Also, because read transactions can roll back on commit if, for example, some
 * other thread performs a concurrent write that corrupts the data being read,
 * this interface also provides a means to set a status to indicate success
 * or failure of the transaction.
 * &lt;/p>
 * 
 * @param &lt;T> the result type of the runnable
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @see TransactionalEditingDomain#runExclusive(Runnable)
 </body>
              </ownedComment>
              <generalization xmi:id="_0i9nw3ctEd-96YWU42lBhw" general="_0i9nwnctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_0i9nxHctEd-96YWU42lBhw" name="getResult">
                <ownedComment xmi:id="_0i9nxXctEd-96YWU42lBhw">
                  <body>
	 * Returns a result computed by my {@link Runnable#run()} method.
	 * 
	 * @return my result, or &lt;code>null&lt;/code> if none
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0i9nx3ctEd-96YWU42lBhw" type="_0i9nxnctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0jHYwHctEd-96YWU42lBhw" name="setStatus">
                <ownedComment xmi:id="_0jHYwXctEd-96YWU42lBhw">
                  <body>
	 * Sets the commit status after completion of the {@link Runnable#run()} method.
	 *
	 * @param status an OK status if commit succeeds, or an error status
	 *     if it fails (in which case the transaction rolled back and the status
	 *     provides details in human-readable form)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0jHYwnctEd-96YWU42lBhw" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0jHYw3ctEd-96YWU42lBhw" name="getStatus">
                <ownedComment xmi:id="_0jHYxHctEd-96YWU42lBhw">
                  <body>
	 * Queries my commit status.  My status is only available after I have
	 * finished running and after the editing domain has attempted to commit
	 * my transaction.
	 * 
	 * @return the status of my commit (as set by the {@link #setStatus(IStatus)} method)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0jHYxXctEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_0jHYxnctEd-96YWU42lBhw" name="Impl" clientDependency="_0jRJwHctEd-96YWU42lBhw" isAbstract="true">
                <ownedComment xmi:id="_0jHYx3ctEd-96YWU42lBhw">
                  <body>
	 * A convenient partial implementation of the {@link RunnableWithResult}
	 * interface that implements a settable {@link #setResult(Object) result}
	 * field and commit status.
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_0jRJwXctEd-96YWU42lBhw" name="result" visibility="private" type="_0i9nxnctEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_0jaTsHctEd-96YWU42lBhw" name="status" visibility="private" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedOperation xmi:id="_0jaTsXctEd-96YWU42lBhw" name="setResult" visibility="protected" isLeaf="true">
                  <ownedComment xmi:id="_0jaTsnctEd-96YWU42lBhw">
                    <body>
		 * Sets my result.
		 * 
		 * @param result my result
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_0jkEsHctEd-96YWU42lBhw" name="result" type="_0i9nxnctEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0jkEsXctEd-96YWU42lBhw" name="getStatus" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_0jt1sHctEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0jt1sXctEd-96YWU42lBhw" name="getResult" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_0jt1snctEd-96YWU42lBhw" type="_0i9nxnctEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_0jt1s3ctEd-96YWU42lBhw" name="setStatus" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_0j2_oHctEd-96YWU42lBhw" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </nestedClassifier>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_0i9nxnctEd-96YWU42lBhw" name="T"/>
            <packagedElement xmi:type="uml:Realization" xmi:id="_0jRJwHctEd-96YWU42lBhw" name="Impl extends RunnableWithResult" supplier="_0i9nwHctEd-96YWU42lBhw" client="_0jHYxnctEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Interface" xmi:id="_0xkrgHctEd-96YWU42lBhw" name="TransactionalCommandStack">
              <ownedComment xmi:id="_0xkrgXctEd-96YWU42lBhw">
                <body>
 * Extension of the basic {@link CommandStack} API providing additional control
 * over (and feed-back from) the transactions used to execute commands.
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_0xkrgnctEd-96YWU42lBhw" general="_vmE-YncqEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_0xkrg3ctEd-96YWU42lBhw" name="execute">
                <ownedComment xmi:id="_0xkrhHctEd-96YWU42lBhw">
                  <body>
	 * Executes the specified command in a read/write transaction.
	 * This method is preferred over the inherited
	 * {@link CommandStack#execute(Command)} method because it provides
	 * feed-back when a command fails to complete.  The implementation of this
	 * latter method simply suppresses (but logs) any checked exception that
	 * occurs.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that this method will block the caller until a read/write
	 * transaction can be started (if other transactions are currently active).
	 * &lt;/p>
	 * 
	 * @param command the command to execute
	 * @param options the options to apply to the command's transaction, or
	 *    &lt;code>null&lt;/code> to select the defaults
	 *    
	 * @throws InterruptedException if the current thread is interrupted while
	 *    waiting to start a read/write transaction for the command execution
	 * @throws RollbackException if the changes performed by the command are
	 *    rolled back by validation of the transaction
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0xkrhXctEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_0xkrhnctEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0xt1cHctEd-96YWU42lBhw" name="setExceptionHandler">
                <ownedComment xmi:id="_0xt1cXctEd-96YWU42lBhw">
                  <body>
	 * Sets an exception handler.  This object will be notified when exceptions
	 * occur, but is not really expected to be able to do anything about them.
	 * Its intended purpose is to support an user feed-back mechanism
	 * appropriate to the environment.
	 * 
	 * @param handler the exception handler to set
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0xt1cnctEd-96YWU42lBhw" name="handler" type="_zqV9sHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0xt1c3ctEd-96YWU42lBhw" name="getExceptionHandler">
                <ownedComment xmi:id="_0xt1dHctEd-96YWU42lBhw">
                  <body>
	 * Obtains my exception handler.
	 * 
	 * @return my exception handler, or &lt;code>null&lt;/code> if none
	 * 
	 * @see #setExceptionHandler(ExceptionHandler)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0xt1dXctEd-96YWU42lBhw" type="_zqV9sHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_0_4NQHctEd-96YWU42lBhw" name="TransactionalEditingDomainListener">
              <ownedComment xmi:id="_0_4NQXctEd-96YWU42lBhw">
                <body>
 * &lt;p>
 * A listener interface providing notifications of changes to a transactional
 * editing domain. This differs from the {@link ResourceSetListener} which
 * notifies of changes to the resource-set managed by the editing domain. The
 * events that occur in a transactional editing domain are:
 * &lt;/p>
 * &lt;ul>
 * &lt;li>pre-notification of the
 * {@linkplain #transactionStarting(TransactionalEditingDomainEvent) starting}
 * of a top-level transaction&lt;/li>
 * &lt;li>{@linkplain #transactionStarted(TransactionalEditingDomainEvent)
 * successful start} of a top-level transaction&lt;/li>
 * &lt;li>{@linkplain #transactionInterrupted(TransactionalEditingDomainEvent)
 * interrupted start} of a top-level transaction (thus a non-start)&lt;/li>
 * &lt;li>pre-notification of the
 * {@linkplain #transactionClosing(TransactionalEditingDomainEvent) closing} of
 * a top-level transaction&lt;/li>
 * &lt;li>{@linkplain #transactionClosed(TransactionalEditingDomainEvent)
 * successful or failed close} of a top-level transaction&lt;/li>
 * &lt;li>{@linkplain #editingDomainDisposing(TransactionalEditingDomainEvent)
 * disposal} of the editing domain&lt;/li>
 * &lt;/ul>
 * &lt;p>
 * The {@link TransactionalEditingDomainListenerImpl} class provides convenient
 * empty implementations of the listener methods, suitable for subclassing to
 * selectively implement these call-backs.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @since 1.3
 * 
 * @see TransactionalEditingDomain.Lifecycle
 * @see TransactionalEditingDomainListenerImpl
 * 
 </body>
              </ownedComment>
              <generalization xmi:id="_1ABXMHctEd-96YWU42lBhw" general="_0ey5cHctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_1ABXMXctEd-96YWU42lBhw" name="transactionStarting">
                <ownedComment xmi:id="_1ABXMnctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Signals that a transaction has requested activation, but is not yet
	 * started. Note that any number of transactions may be in this state
	 * simultaneously, on different threads, but obviously only one will
	 * actually start.
	 * &lt;/p>
	 * &lt;p>
	 * This event is not sent for nested transactions, nor for a transaction's
	 * resumption from the {@linkplain TransactionalEditingDomain#yield()
	 * yielded} state.
	 * &lt;/p>
	 * 
	 * @param event
	 *            indicates the transaction that is about to start
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1ABXM3ctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1ALIMHctEd-96YWU42lBhw" name="transactionInterrupted">
                <ownedComment xmi:id="_1ALIMXctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Signals that a transaction that has requested activation was interrupted
	 * before it could start. Thus, this indicates a failed start.
	 * &lt;/p>
	 * &lt;p>
	 * This event is not sent for nested transactions.
	 * &lt;/p>
	 * 
	 * @param event
	 *            indicates the transaction that was interrupted
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1ALIMnctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1ALIM3ctEd-96YWU42lBhw" name="transactionStarted">
                <ownedComment xmi:id="_1ALINHctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Signals that a transaction has been activated.
	 * &lt;/p>
	 * &lt;p>
	 * This event is not sent for nested transactions, nor for a transaction's
	 * resumption from the {@linkplain TransactionalEditingDomain#yield()
	 * yielded} state.
	 * &lt;/p>
	 * 
	 * @param event
	 *            indicates the transaction that has started
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1ALINXctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1ALINnctEd-96YWU42lBhw" name="transactionClosing">
                <ownedComment xmi:id="_1ALIN3ctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Signals that a transaction has finished its work and is about to close.
	 * This may be the beginning of the normal commit sequence of trigger firing
	 * followed by validation (subsequently rolling back, if necessary), or an
	 * explicit roll-back requested by the transaction, itself.
	 * &lt;/p>
	 * &lt;p>
	 * This event is not sent for nested transactions, nor for a transaction's
	 * entry into the {@linkplain TransactionalEditingDomain#yield() yielded}
	 * state.
	 * &lt;/p>
	 * 
	 * @param event
	 *            indicates the transaction that is about to close
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1AU5MHctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1AU5MXctEd-96YWU42lBhw" name="transactionClosed">
                <ownedComment xmi:id="_1AU5MnctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Signals that a transaction has closed, either with a successful commit or
	 * with a roll-back. The {@linkplain Transaction#getStatus() status} of the
	 * transaction will indicate which has occurred; an
	 * {@linkplain IStatus#ERROR} indicates roll-back. This event is sent after
	 * all post-commit notifications have gone out to
	 * {@link ResourceSetListener}s.
	 * &lt;/p>
	 * &lt;p>
	 * This event is not sent for nested transactions.
	 * &lt;/p>
	 * 
	 * @param event
	 *            indicates the transaction that has closed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1AU5M3ctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1AU5NHctEd-96YWU42lBhw" name="editingDomainDisposing">
                <ownedComment xmi:id="_1AU5NXctEd-96YWU42lBhw">
                  <body>
	 * &lt;p>
	 * Signals that the transactional editing domain to which the lister is
	 * attached is to be disposed. Disposal result, among other things, in the
	 * removal of the listener from it.
	 * &lt;/p>
	 * 
	 * @param event
	 *            indicates the editing domain that is being disposed. The event
	 *            has no
	 *            {@linkplain TransactionalEditingDomainEvent#getTransaction()
	 *            transaction}
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1AeDIHctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_09MFoHctEd-96YWU42lBhw" name="TransactionalEditingDomainEvent">
              <ownedComment xmi:id="_09MFoXctEd-96YWU42lBhw">
                <body>
 * An event object indicating a change in the state of a
 * {@link TransactionalEditingDomain}, usually in some
 * {@linkplain transaction #getTransaction()} life-cycle event.
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @since 1.3
 </body>
              </ownedComment>
              <generalization xmi:id="_09MFonctEd-96YWU42lBhw" general="_vsyDUncqEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_09V2oHctEd-96YWU42lBhw" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" type="_vdu6sHcqEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_09V2oXctEd-96YWU42lBhw" name="TRANSACTION_STARTING" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_09fnoHctEd-96YWU42lBhw">
                  <body>
	 * Event {@linkplain #getEventType() type} indicating the
	 * {@linkplain TransactionalEditingDomainListener#transactionStarting(TransactionalEditingDomainEvent)
	 * transaction starting}.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_09oxkHctEd-96YWU42lBhw" name="TRANSACTION_INTERRUPTED" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_09oxkXctEd-96YWU42lBhw">
                  <body>
	 * Event {@linkplain #getEventType() type} indicating the
	 * {@linkplain TransactionalEditingDomainListener#transactionInterrupted(TransactionalEditingDomainEvent)
	 * transaction interrupted}.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_09yikHctEd-96YWU42lBhw" name="TRANSACTION_STARTED" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_09yikXctEd-96YWU42lBhw">
                  <body>
	 * Event {@linkplain #getEventType() type} indicating the
	 * {@linkplain TransactionalEditingDomainListener#transactionStartied(TransactionalEditingDomainEvent)
	 * transaction started}.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_098TkHctEd-96YWU42lBhw" name="TRANSACTION_CLOSING" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_098TkXctEd-96YWU42lBhw">
                  <body>
	 * Event {@linkplain #getEventType() type} indicating the
	 * {@linkplain TransactionalEditingDomainListener#transactionClosing(TransactionalEditingDomainEvent)
	 * transaction closing}.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0-FdgHctEd-96YWU42lBhw" name="TRANSACTION_CLOSED" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0-POgHctEd-96YWU42lBhw">
                  <body>
	 * Event {@linkplain #getEventType() type} indicating the
	 * {@linkplain TransactionalEditingDomainListener#transactionClosed(TransactionalEditingDomainEvent)
	 * transaction closed}.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0-POgXctEd-96YWU42lBhw" name="EDITING_DOMAIN_DISPOSING" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_0-YYcHctEd-96YWU42lBhw">
                  <body>
	 * Event {@linkplain #getEventType() type} indicating the
	 * {@linkplain TransactionalEditingDomainListener#editingDomainDisposing(TransactionalEditingDomainEvent)
	 * editing domain disposing}.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_0-iJcHctEd-96YWU42lBhw" name="type" visibility="private" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_0-iJcXctEd-96YWU42lBhw" name="transaction" visibility="private" type="_0l8qUHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedOperation xmi:id="_0-r6cHctEd-96YWU42lBhw" name="getSource" visibility="public">
                <ownedParameter xmi:id="_0-r6cXctEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0-r6cnctEd-96YWU42lBhw" name="getEventType" visibility="public">
                <ownedComment xmi:id="_0-r6c3ctEd-96YWU42lBhw">
                  <body>
	 * Queries the kind of transactional editing event that I signal to
	 * {@link TransactionalEditingDomainListener}s. Each different event type
	 * corresponds to a call-back operation of that interface.
	 * 
	 * @return my type
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0-1EYHctEd-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_0-1EYXctEd-96YWU42lBhw" name="getTransaction" visibility="public">
                <ownedComment xmi:id="_0-1EYnctEd-96YWU42lBhw">
                  <body>
	 * Queries the transaction for which the event signals a change, or
	 * &lt;code>null&lt;/code> if the event pertains to the editing domain, itself.
	 * 
	 * @return the subject transaction, or &lt;code>null&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_0--1YHctEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_1A6vEHctEd-96YWU42lBhw" name="TransactionalEditingDomainListenerImpl" clientDependency="_1A6vEnctEd-96YWU42lBhw">
              <ownedComment xmi:id="_1A6vEXctEd-96YWU42lBhw">
                <body>
 * A default implementation of the {@link TransactionalEditingDomainListener}
 * interface that does nothing in response to those call-backs, but which is
 * useful for subclassing to handle just the interesting events.
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @since 1.3
 </body>
              </ownedComment>
              <ownedOperation xmi:id="_1A6vE3ctEd-96YWU42lBhw" name="editingDomainDisposing" visibility="public">
                <ownedParameter xmi:id="_1A6vFHctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1A6vFXctEd-96YWU42lBhw" name="transactionClosed" visibility="public">
                <ownedParameter xmi:id="_1BEgEHctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1BEgEXctEd-96YWU42lBhw" name="transactionClosing" visibility="public">
                <ownedParameter xmi:id="_1BEgEnctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1BEgE3ctEd-96YWU42lBhw" name="transactionInterrupted" visibility="public">
                <ownedParameter xmi:id="_1BNqAHctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1BNqAXctEd-96YWU42lBhw" name="transactionStarted" visibility="public">
                <ownedParameter xmi:id="_1BNqAnctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1BXbAHctEd-96YWU42lBhw" name="transactionStarting" visibility="public">
                <ownedParameter xmi:id="_1BXbAXctEd-96YWU42lBhw" name="event" type="_09MFoHctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_1A6vEnctEd-96YWU42lBhw" name="TransactionalEditingDomainListenerImpl extends TransactionalEditingDomainListener" supplier="_0_4NQHctEd-96YWU42lBhw" client="_1A6vEHctEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_1CQy4HctEd-96YWU42lBhw" name="TriggerListener" isAbstract="true">
              <ownedComment xmi:id="_1CZ80HctEd-96YWU42lBhw">
                <body>
 * A convenient superclass for listeners that implement &quot;triggers&quot; to process
 * {@link Notification}s one at a time, generating a command for each that will
 * make dependent updates to the model.
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_1CZ80XctEd-96YWU42lBhw" general="_zpvgwnctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_1CZ80nctEd-96YWU42lBhw" name="transactionAboutToCommit" visibility="public">
                <ownedComment xmi:id="_1CZ803ctEd-96YWU42lBhw">
                  <body>
	 * Implements the trigger callback by processing the &lt;code>event&lt;/code>'s
	 * notifications one by one, delegating to the {@link #trigger} method for each to
	 * generate a command.  The commands created by the subclass are chained in
	 * the order that they are received from the subclass.
	 * 
	 * @return a composite of the commands returned by the subclass
	 *     implementation of the {@link #trigger} method
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1CZ81HctEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_1Cjt0HctEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1Cjt0XctEd-96YWU42lBhw" name="trigger" visibility="protected" isAbstract="true">
                <ownedComment xmi:id="_1Cjt0nctEd-96YWU42lBhw">
                  <body>
	 * Implemented by subclasses to provide a trigger command for a single
	 * change in the model.
	 * 
	 * @param domain the editing domain
	 * @param notification the notification describing a change in the model
	 * 
	 * @return the command, or &lt;code>null&lt;/code> if none is required for this
	 *     particular notification
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1Cjt03ctEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_1Cte0HctEd-96YWU42lBhw" name="domain" type="_0y6IQHctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_1Cte0XctEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1Cte0nctEd-96YWU42lBhw" name="isPrecommitOnly" visibility="public">
                <ownedComment xmi:id="_1Cte03ctEd-96YWU42lBhw">
                  <body>
	 * I want only ppre-commit events, not post-commit events.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_1C2owHctEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_8rpJoncuEd-96YWU42lBhw" name="TransactionalEditingDomain">
              <packagedElement xmi:type="uml:Interface" xmi:id="_8ry6oHcuEd-96YWU42lBhw" name="Lifecycle"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_9n_dIHcuEd-96YWU42lBhw" name="internal">
              <packagedElement xmi:type="uml:Interface" xmi:id="_9n_dIXcuEd-96YWU42lBhw" name="ITransactionLock"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_5f8Uc3PSEd-NtftfyF3YZw" name="workspace">
            <packagedElement xmi:type="uml:Class" xmi:id="_hwLTgnPSEd-NtftfyF3YZw" name="CompositeEMFOperation">
              <ownedComment xmi:id="_UX15MHcvEd-96YWU42lBhw">
                <body>
 * An implementation of a composite undoable operation for composition of
 * operations which may include {@link AbstractEMFOperation}s.  The composite
 * ensures that all of the nested operations are executed in a single
 * transaction context.  The composite can combine EMF and non-EMF operations
 * freely, and even include nested &lt;code>CompositeEMFOperation&lt;/code>s.
 * &lt;p>
 * Although a &lt;code>CompositeEMFOperation&lt;/code> provides a single root
 * transaction context for all of its children, these children open nested
 * transactions of their own, by default.  This can be disabled by turning off
 * the {@link #isTransactionNestingEnabled() transactionNestingEnabled} property.
 * This is a hint that child operations should just execute in the transaction
 * that is already open, unless they require a nested transaction.  In
 * consequence, child operations would not be able to depend on changes being
 * {@linkplain ResourceSetListener#transactionAboutToCommit triggered} by
 * previous operations, as triggers will be deferred to the end of the composite
 * (when it commits).
 * &lt;/p>
 * &lt;p>
 * Note that this kind of a composite is different from the
 * {@link IOperationHistory}'s notion of a {@link TriggeredOperations}, because
 * the children of a composite are not &quot;triggered&quot; by any primary operation.
 * Rather, it is assumed that the children are explicitly composed by a client.
 * The undo contexts of the composite are a union of the undo contexts of its
 * children.
 * &lt;/p>
 * &lt;p>
 * &lt;b>Note:&lt;/b>  This class cannot be used with the
 * {@link IOperationHistory#openOperation(ICompositeOperation, int)} API
 * because it does not implement the &lt;code>ICompositeOperation&lt;/code> interface.
 * This prevents the possibility of open-ended transactions on the operation
 * history that any listener can contribute additional changes to, on the
 * same editing domain or a different editing domain.  The transaction API
 * provides a tightly-regulated triggered change mechanism via the
 * {@link ResourceSetListener} interface.
 * &lt;/p>
 * &lt;p>
 * This class is intended to be instantiated by clients and supports a limited
 * form of subclassing.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_UX15MXcvEd-96YWU42lBhw" general="_5f8UdHPSEd-NtftfyF3YZw"/>
              <ownedAttribute xmi:id="_UX15MncvEd-96YWU42lBhw" name="children" visibility="private" isLeaf="true" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false">
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UX_DIXcvEd-96YWU42lBhw" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_UX_DIHcvEd-96YWU42lBhw"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_UYI0IHcvEd-96YWU42lBhw" name="transactionNestingEnabled" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_UdM6UHcvEd-96YWU42lBhw" name="ChildIterator" visibility="private" clientDependency="_UdM6UncvEd-96YWU42lBhw">
                <ownedComment xmi:id="_UdM6UXcvEd-96YWU42lBhw">
                  <body>
	 * Custom iterator implementation that maintains my undo contexts
	 * correctly when elements are removed.
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_UdWrUHcvEd-96YWU42lBhw" name="last" visibility="protected" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_Udf1QHcvEd-96YWU42lBhw" name="iter" visibility="protected" isLeaf="true" type="_QJqLznOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedOperation xmi:id="_UdpmQHcvEd-96YWU42lBhw" name="remove" visibility="public"/>
                <ownedOperation xmi:id="_UdpmQXcvEd-96YWU42lBhw" name="next" visibility="public">
                  <ownedParameter xmi:id="_UdzXQHcvEd-96YWU42lBhw" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_UdzXQXcvEd-96YWU42lBhw" name="hasNext" visibility="public">
                  <ownedParameter xmi:id="_UdzXQncvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </nestedClassifier>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_Ud8hMHcvEd-96YWU42lBhw" name="ChildListIterator" visibility="private" clientDependency="_UeGSMHcvEd-96YWU42lBhw">
                <ownedComment xmi:id="_Ud8hMXcvEd-96YWU42lBhw">
                  <body>
	 * Custom list-iterator implementation that maintains my undo contexts
	 * correctly, as well as uniqueness of the list contents.
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                </ownedComment>
                <generalization xmi:id="_Ud8hMncvEd-96YWU42lBhw" general="_UdM6UHcvEd-96YWU42lBhw"/>
                <ownedOperation xmi:id="_UeGSMXcvEd-96YWU42lBhw" name="add" visibility="public">
                  <ownedParameter xmi:id="_UeGSMncvEd-96YWU42lBhw" name="o" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_UePcIHcvEd-96YWU42lBhw" name="set" visibility="public">
                  <ownedParameter xmi:id="_UeZNIHcvEd-96YWU42lBhw" name="o" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Uei-IHcvEd-96YWU42lBhw" name="previousIndex" visibility="public">
                  <ownedParameter xmi:id="_Uei-IXcvEd-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Uei-IncvEd-96YWU42lBhw" name="nextIndex" visibility="public">
                  <ownedParameter xmi:id="_UesIEHcvEd-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_UesIEXcvEd-96YWU42lBhw" name="previous" visibility="public">
                  <ownedParameter xmi:id="_UesIEncvEd-96YWU42lBhw" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Ue15EHcvEd-96YWU42lBhw" name="hasPrevious" visibility="public">
                  <ownedParameter xmi:id="_Ue15EXcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </nestedClassifier>
              <ownedOperation xmi:id="_UYR-EHcvEd-96YWU42lBhw" name="doExecute" visibility="protected" isLeaf="true">
                <ownedComment xmi:id="_UYR-EXcvEd-96YWU42lBhw">
                  <body>
	 * Implements the execution logic by sequential execution of my children.
	 * Non-EMF operations are captured in the transaction's recorded changes
	 * so that they may be correctly rolled back (in sequence) in the event
	 * of rollback, undo, or redo.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UYbvEHcvEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_UYbvEXcvEd-96YWU42lBhw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_UYlgEHcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UYlgEXcvEd-96YWU42lBhw" name="createNonEMFTransaction" visibility="private">
                <ownedComment xmi:id="_UYlgEncvEd-96YWU42lBhw">
                  <body>
	 * Creates a transaction for recording non-EMF changes, using the specified
	 * options.
	 * 
	 * @param operation the non-EMF changes to capture in this transaction
	 * @param info the adaptable object provided to the operation when it is
	 *     executed
	 * @param options the transaction options
	 * 
	 * @return the newly started transaction
	 * 
	 * @throws InterruptedException if the current thread was interrupted while
	 *     waiting for the transaction to start
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UYuqAHcvEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_UYuqAXcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_UY4bAHcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_UY4bAXcvEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UZCMAHcvEd-96YWU42lBhw" name="didCommit" visibility="protected">
                <ownedParameter xmi:id="_UZLV8HcvEd-96YWU42lBhw" name="transaction" type="_0l8qUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UZLV8XcvEd-96YWU42lBhw" name="canExecute" visibility="public">
                <ownedComment xmi:id="_UZLV8ncvEd-96YWU42lBhw">
                  <body>
	 * I can execute if all of my children can execute.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UZVG8HcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UZVG8XcvEd-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_UZVG8ncvEd-96YWU42lBhw">
                  <body>
	 * I can undo if my transaction successfully completed with changes recorded
	 * and my children can all be undone.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UZeQ4HcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UZeQ4XcvEd-96YWU42lBhw" name="doUndo" visibility="protected" isLeaf="true">
                <ownedComment xmi:id="_UZeQ4ncvEd-96YWU42lBhw">
                  <body>
	 * I undo by asking my children to undo, in reverse order.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UZoB4HcvEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_UZoB4XcvEd-96YWU42lBhw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_UZxy4HcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UZxy4XcvEd-96YWU42lBhw" name="canRedo" visibility="public">
                <ownedComment xmi:id="_UZxy4ncvEd-96YWU42lBhw">
                  <body>
	 * I can redo if my transaction successfully completed with changes recorded
	 * and my children can all be redone.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UZ680HcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UZ680XcvEd-96YWU42lBhw" name="doRedo" visibility="protected" isLeaf="true">
                <ownedComment xmi:id="_UZ680ncvEd-96YWU42lBhw">
                  <body>
	 * I undo by asking my children to redo, in forward order.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UaEt0HcvEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_UaOe0HcvEd-96YWU42lBhw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_UaOe0XcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UaXowHcvEd-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_UaXowXcvEd-96YWU42lBhw">
                  <body>
	 * Removes all of my children and disposes them.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_UaXowncvEd-96YWU42lBhw" name="getChildren" visibility="protected">
                <ownedComment xmi:id="_UaXow3cvEd-96YWU42lBhw">
                  <body>
	 * Obtains my nested operations.  Note that the return result is mutable and is
	 * identical to my child-operation storage, so subclasses should be careful
	 * of adding or removing contents.  This should ordinarily be done only via
	 * the {@link #add(IUndoableOperation)} and {@link #remove(IUndoableOperation)}
	 * methods because these maintain the undo contexts (or, equivalently, using
	 * the iterators).
	 * 
	 * @return my list of children
	 * 
	 * @see #add(IUndoableOperation)
	 * @see #remove(IUndoableOperation)
	 * @see #iterator()
	 * @see #listIterator(int)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UahZwHcvEd-96YWU42lBhw" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_UaqjsHcvEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_UahZwXcvEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_UaqjsXcvEd-96YWU42lBhw" name="add" visibility="public">
                <ownedComment xmi:id="_UaqjsncvEd-96YWU42lBhw">
                  <body>
	 * Adds a child operation to me.  This should only be done before I am
	 * executed.  Has no effect if I already contain this operation as a child.
	 * 
	 * @param operation a new child operation
	 * 
	 * @throws IllegalStateException if I have already been successfully
	 *     executed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_Ua0UsHcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_Ua0UsXcvEd-96YWU42lBhw" name="assertNotExecuted" visibility="protected" isLeaf="true">
                <ownedComment xmi:id="_Ua0UsncvEd-96YWU42lBhw">
                  <body>
	 * Asserts that I have not yet been executed.  Changes to my children are
	 * not permitted after I have been executed.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_Ua-FsHcvEd-96YWU42lBhw" name="didAdd" visibility="private">
                <ownedComment xmi:id="_Ua-FsXcvEd-96YWU42lBhw">
                  <body>
	 * Updates my undo contexts for the addition of a new child operation.
	 * 
	 * @param operation a new child operation
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UbHPoHcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UbHPoXcvEd-96YWU42lBhw" name="remove" visibility="public">
                <ownedComment xmi:id="_UbHPoncvEd-96YWU42lBhw">
                  <body>
	 * Removes a child operation from me.  This should only be done before I am
	 * executed.  Has no effect if I do not contain this operation as a child.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that, unlike the {@link ICompositeOperation} interface (which
	 * I do not implement), I do not dispose an operation when it is removed
	 * from me.  This would not be correct, as I did not create that operation.
	 * &lt;/p>
	 * 
	 * @param operation a child operation to remove
	 * 
	 * @throws IllegalStateException if I have already been successfully
	 *     executed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UbRAoHcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UbRAoXcvEd-96YWU42lBhw" name="didRemove" visibility="private">
                <ownedComment xmi:id="_UbRAoncvEd-96YWU42lBhw">
                  <body>
	 * Updates my undo contexts for the removal of a child operation.
	 * 
	 * @param operation an erstwhile child operation
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UbaxoHcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UbaxoXcvEd-96YWU42lBhw" name="anyChildHasContext" visibility="private">
                <ownedComment xmi:id="_UbaxoncvEd-96YWU42lBhw">
                  <body>
	 * Queries whether any of my children has the specified context.
	 * 
	 * @param ctx a context
	 * 
	 * @return &lt;code>false&lt;/code> if none of my children has the specified
	 *     context; &lt;code>true&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_Ubj7kHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_UbtskHcvEd-96YWU42lBhw" name="ctx" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UbtskXcvEd-96YWU42lBhw" name="setReuseParentTransaction" visibility="public">
                <ownedComment xmi:id="_UbtskncvEd-96YWU42lBhw">
                  <body>
	 * Extends the inherited method to toggle my
	 * {@link #setTransactionNestingDisabled(boolean) transaction nesting}
	 * state accordingly.
	 * 
	 * @since 1.3
	 * 
	 * @see #isTransactionNestingEnabled()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_Ub22gHcvEd-96YWU42lBhw" name="reuseParentTransaction" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_Ub22gXcvEd-96YWU42lBhw" name="isTransactionNestingEnabled" visibility="public">
                <ownedComment xmi:id="_Ub22gncvEd-96YWU42lBhw">
                  <body>
	 * Queries whether nesting of transactions is enabled, meaning that all
	 * child operations (recursively) execute in their own (nested) transactions.
	 * Nested transactions are enabled by default.
	 * 
	 * @return &lt;code>false&lt;/code> if child operations execute in a single (flat)
	 *    transaction where possible; &lt;code>false&lt;/code>, otherwise
	 *    
	 * @see #setTransactionNestingEnabled(boolean)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_Ub22g3cvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UcAngHcvEd-96YWU42lBhw" name="setTransactionNestingEnabled" visibility="public">
                <ownedComment xmi:id="_UcAngXcvEd-96YWU42lBhw">
                  <body>
	 * Sets whether nesting of transactions is enabled.  Turning this off can
	 * improve performance considerably by avoiding the book-keeping overhead
	 * of large numbers of small transactions, where a composite operation is
	 * a large nested structure.  This property is propagated to child
	 * composite operations (recursively).
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that this is really only a hint:  there are exceptions where
	 * child operation will still create nested transactions.  These are:
	 * &lt;ul>
	 *   &lt;li>when the child is not an {@link AbstractEMFOperation}.  Non-EMF
	 *       operations are given special transactions that capture their changes
	 *       as change descriptions in the parent transaction&lt;/li>
	 *   &lt;li>when the child has different
	 *       {@link AbstractEMFOperation#getOptions() transaction options} than
	 *       the parent composite operation&lt;/li>
	 * &lt;/ul>
	 * &lt;/p>
	 *  
	 * @param enable whether to force all child operations to create nested
	 *     transactions
	 *     
	 * @throws IllegalStateException if I have already been
	 *     {@link #execute(IProgressMonitor, IAdaptable) executed}, after which
	 *     time transaction nesting cannot be changed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UcKYgHcvEd-96YWU42lBhw" name="enable" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UcKYgXcvEd-96YWU42lBhw" name="size" visibility="public">
                <ownedComment xmi:id="_UcKYgncvEd-96YWU42lBhw">
                  <body>
	 * Queries the number of child operations that I contain.
	 * 
	 * @return my size
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UcKYg3cvEd-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UcTicHcvEd-96YWU42lBhw" name="iterator" visibility="public">
                <ownedComment xmi:id="_UcTicXcvEd-96YWU42lBhw">
                  <body>
	 * Obtains an iterator to traverse my child operations.
	 * Removing children via this iterator correctly maintains my undo contexts.
	 * 
	 * @return an iterator of my children
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UcdTcHcvEd-96YWU42lBhw" type="_QJqLynOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UcdTcXcvEd-96YWU42lBhw" name="listIterator" visibility="public">
                <ownedComment xmi:id="_UcdTcncvEd-96YWU42lBhw">
                  <body>
	 * Obtains an iterator to traverse my child operations in either direction.
	 * Adding and removing children via this iterator correctly maintains my
	 * undo contexts.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that, unlike list iterators generally, this implementation
	 * does not permit the addition of an operation that I already contain
	 * (the composite does not permit duplicates).  Moreover, only
	 * {@link IUndoableOperation}s may be added, otherwise
	 * &lt;code>ClassCastException&lt;/code>s will result.
	 * &lt;/p>
	 * 
	 * @return an iterator of my children
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UcnEcHcvEd-96YWU42lBhw" type="_QJqLznOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_Uc5_YHcvEd-96YWU42lBhw" name="listIterator" visibility="public">
                <ownedComment xmi:id="_Uc5_YXcvEd-96YWU42lBhw">
                  <body>
	 * Obtains an iterator to traverse my child operations in either direction,
	 * starting from the specified &lt;code>index&lt;/code>.
	 * Adding and removing children via this iterator correctly maintains my
	 * undo contexts.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that, unlike list iterators generally, this implementation
	 * does not permit the addition of an operation that I already contain
	 * (the composite does not permit duplicates).  Moreover, only
	 * {@link IUndoableOperation}s may be added, otherwise
	 * &lt;code>ClassCastException&lt;/code>s will result.
	 * &lt;/p>
	 * 
	 * @param index the index in my children at which to start iterating
	 * 
	 * @return an iterator of my children
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UdDJUHcvEd-96YWU42lBhw" type="_QJqLznOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_UdDJUXcvEd-96YWU42lBhw" name="index" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_5f8UdHPSEd-NtftfyF3YZw" name="AbstractEMFOperation" isAbstract="true">
              <ownedComment xmi:id="_5f8UdXPSEd-NtftfyF3YZw">
                <body>
 * An abstract superclass for {@link IUndoableOperation}s that modify EMF
 * models.  The EMF operation provides a read/write transaction context for the
 * subclass implementation of the execution logic, with undo/redo support &quot;for
 * free&quot; (via recording of undo information).
 * &lt;p>
 * The assumption is that an EMF operation will perform only changes to EMF
 * models that can be recorded.  If concomitant changes to non-EMF models are
 * also required, then they should be combined with the EMF operation via a
 * {@link CompositeEMFOperation}, unless ordering of EMF and non-EMF changes
 * is unimportant.  In such cases, it is sufficient to extend the
 * {@link #doUndo(IProgressMonitor, IAdaptable)} and
 * {@link #doRedo(IProgressMonitor, IAdaptable)} methods.
 * &lt;/p>
 * &lt;p>
 * This class is meant to be extended by clients.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 * 
 * @see CompositeEMFOperation
 </body>
              </ownedComment>
              <generalization xmi:id="_5f8UdnPSEd-NtftfyF3YZw" general="_7-bbAnPQEd-NtftfyF3YZw"/>
              <ownedAttribute xmi:id="_5gGFcnPSEd-NtftfyF3YZw" name="domain" visibility="private" isLeaf="true" type="_8wkF4HcuEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_5gGFdHPSEd-NtftfyF3YZw" name="txOptions" visibility="private" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false"/>
              <ownedAttribute xmi:id="_5gGFdXPSEd-NtftfyF3YZw" name="canSetOptions" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_5gP2cHPSEd-NtftfyF3YZw" name="transaction" visibility="private" type="_0l8qUHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_5gP2cnPSEd-NtftfyF3YZw" name="change" visibility="private" type="_0wrToHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_5gP2c3PSEd-NtftfyF3YZw" name="reuseParentTransaction" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_5gP2dHPSEd-NtftfyF3YZw" name="shouldDisposeChange" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_5gZAYHPSEd-NtftfyF3YZw" name="execute" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_5gZAYXPSEd-NtftfyF3YZw">
                  <body>
	 * Implements the execution by delegating to the
	 * {@link #doExecute(IProgressMonitor, IAdaptable)} method within a
	 * read/write transaction.
	 * 
	 * @see #doExecute(IProgressMonitor, IAdaptable)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5gZAYnPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5gZAY3PSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_5gZAZHPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5gZAZXPSEd-NtftfyF3YZw" name="optionsDiffer" visibility="private">
                <ownedComment xmi:id="_5gZAZnPSEd-NtftfyF3YZw">
                  <body>
	 * Queries whether the specified options differ from the currently active
     * transaction, if there is one.
	 * 
     * @param options the options to compare against the active transaction
	 * @return &lt;code>false&lt;/code> if either there is an active transaction and it
	 *     has the same options as specified; &lt;code>true&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5gixYHPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5gixYXPSEd-NtftfyF3YZw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5gixYnPSEd-NtftfyF3YZw" name="inheritedOptions" visibility="private">
                <ownedComment xmi:id="_5gixY3PSEd-NtftfyF3YZw">
                  <body>
     * Obtains the options of the currently active transaction, or an empty map
     * if there is no active transaction.
     * 
     * @return options currently in effect that would be inherited by a new
     *     transaction that I might create
     </body>
                </ownedComment>
                <ownedParameter xmi:id="_5gixZHPSEd-NtftfyF3YZw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5gixZXPSEd-NtftfyF3YZw" name="aggregateStatuses" visibility="protected">
                <ownedComment xmi:id="_5gixZnPSEd-NtftfyF3YZw">
                  <body>
	 * Creates a suitable aggregate from these statuses.  If there are no
	 * statuses to aggregate, then an OK status is returned.  If there is a
	 * single status to aggregate, then it is returned.  Otherwise, a
	 * multi-status is returned with the provided statuses as children.
	 * 
	 * @param statuses the statuses to aggregate.  May have zero, one, or more
	 *    elements (all must be {@link IStatus}es)
	 * 
	 * @return the multi-status
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5gixZ3PSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5gixaHPSEd-NtftfyF3YZw" name="statuses" type="_QJNf43OxEd-nKvj-XTCBkg">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_5gr7UXPSEd-NtftfyF3YZw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_5gr7UHPSEd-NtftfyF3YZw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_5gr7UnPSEd-NtftfyF3YZw" name="getChange" visibility="protected" isLeaf="true">
                <ownedComment xmi:id="_5gr7U3PSEd-NtftfyF3YZw">
                  <body>
	 * Obtains the change description that I recorded during execution of my
	 * transaction.
	 * 
	 * @return my change description, if I executed successfully;
	 *     &lt;code>null&lt;/code>, otherwise
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5gr7VHPSEd-NtftfyF3YZw" type="_0wrToHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5gr7VXPSEd-NtftfyF3YZw" name="didCommit" visibility="protected">
                <ownedComment xmi:id="_5gr7VnPSEd-NtftfyF3YZw">
                  <body>
	 * &lt;p>
	 * Hook for subclasses to learn that the specified &lt;code>transaction&lt;/code>
	 * has been successfully committed and, if necessary, to extract information
	 * from it.
	 * &lt;/p>
	 * &lt;p>
	 * Note: subclasses should call this super implementation to get some default
	 *  behaviours.
	 * &lt;/p>
	 * @param transaction a transaction that has committed, which has recorded
	 *     our changes
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5gr7V3PSEd-NtftfyF3YZw" name="transaction" type="_0l8qUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5gr7W3PSEd-NtftfyF3YZw" name="gatherUndoContextsFromTrigger" visibility="private">
                <ownedParameter xmi:id="_5g1sUHPSEd-NtftfyF3YZw" name="trigger" type="_vowe8HcqEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5g1sUXPSEd-NtftfyF3YZw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_5g1sUnPSEd-NtftfyF3YZw">
                  <body>
	 * Queries whether I can be undone.  I can generally be undone if I was
	 * successfully executed.  Subclasses would not usually need to override
	 * this method.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5g1sU3PSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5g1sVHPSEd-NtftfyF3YZw" name="undo" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_5g1sVXPSEd-NtftfyF3YZw">
                  <body>
	 * Undoes me by inverting my recorded changes in a transaction.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5g1sVnPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5g1sV3PSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_5g1sWHPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5g1sWXPSEd-NtftfyF3YZw" name="didUndo" visibility="protected">
                <ownedComment xmi:id="_5g1sWnPSEd-NtftfyF3YZw">
                  <body>
	 * Hook for subclasses to learn that the specified &lt;code>transaction&lt;/code>
	 * has been successfully undone and, if necessary, to extract information
	 * from it.
	 * 
	 * @param tx a transaction that has been undone.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5g1sW3PSEd-NtftfyF3YZw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5g_dUHPSEd-NtftfyF3YZw" name="canRedo" visibility="public">
                <ownedComment xmi:id="_5g_dUXPSEd-NtftfyF3YZw">
                  <body>
	 * Queries whether I can be redone.  I can generally be redone if I was
	 * successfully executed.  Subclasses would not usually need to override
	 * this method.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5g_dUnPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5g_dU3PSEd-NtftfyF3YZw" name="redo" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_5g_dVHPSEd-NtftfyF3YZw">
                  <body>
	 * Redoes me by replaying my recorded changes in a transaction.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5g_dVXPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5g_dVnPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_5g_dV3PSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5g_dWHPSEd-NtftfyF3YZw" name="didRedo" visibility="protected">
                <ownedComment xmi:id="_5g_dWXPSEd-NtftfyF3YZw">
                  <body>
	 * Hook for subclasses to learn that the specified &lt;code>transaction&lt;/code>
	 * has been successfully redone and, if necessary, to extract information
	 * from it.
	 * 
	 * @param tx a transaction that has been redone.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5g_dWnPSEd-NtftfyF3YZw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hInQHPSEd-NtftfyF3YZw" name="getEditingDomain" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_5hInQXPSEd-NtftfyF3YZw">
                  <body>
	 * Obtains my editing domain.
	 * 
	 * @return my editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hInQ3PSEd-NtftfyF3YZw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hInRHPSEd-NtftfyF3YZw" name="getOptions" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_5hInRXPSEd-NtftfyF3YZw">
                  <body>
	 * Obtains the transaction options that I use to create my transaction.
	 * 
	 * @return my options, or an empty map if none
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hInRnPSEd-NtftfyF3YZw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hInR3PSEd-NtftfyF3YZw" name="setOptions" visibility="public">
                <ownedComment xmi:id="_5hInSHPSEd-NtftfyF3YZw">
                  <body>
	 * &lt;p>
	 * Replaces my options with a new set. This may only be done prior to my
	 * initial execution.
	 * &lt;/p>
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that subclasses may override this method, but if they do so,
	 * then they must call the superclass implementation in order actually to
	 * effect any change to the operation's options. Thus, subclasses may
	 * override to disable this capability or to intercept the &lt;tt>options&lt;/tt>
	 * argument and transform its values as required.
	 * &lt;/p>
	 * 
	 * @param options
	 *            my new options
	 * 
	 * @throws IllegalStateException
	 *             if I have {@linkplain #canSetOptions() already been executed}
	 * 
	 * @since 1.3
	 * 
	 * @see #canSetOptions()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hInSXPSEd-NtftfyF3YZw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hSYQHPSEd-NtftfyF3YZw" name="canSetOptions" visibility="public">
                <ownedComment xmi:id="_5hSYQXPSEd-NtftfyF3YZw">
                  <body>
	 * Queries whether my options can be changed. That is, whether I have not
	 * yet been executed.
	 * 
	 * @return whether my options may be changed
	 * 
	 * @since 1.3
	 * 
	 * @see #setOptions(Map)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hSYQnPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hSYQ3PSEd-NtftfyF3YZw" name="internalSetOptions" visibility="private">
                <ownedParameter xmi:id="_5hSYRHPSEd-NtftfyF3YZw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hcJQHPSEd-NtftfyF3YZw" name="createTransaction">
                <ownedComment xmi:id="_5hcJQXPSEd-NtftfyF3YZw">
                  <body>
	 * Creates a transaction, using the specified options, for me to execute
	 * in.
	 * 
	 * @param options the transaction options
	 * 
	 * @return the newly started transaction
	 * 
	 * @throws InterruptedException if the current thread was interrupted while
	 *     waiting for the transaction to start
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hcJQnPSEd-NtftfyF3YZw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_5hcJQ3PSEd-NtftfyF3YZw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hcJRHPSEd-NtftfyF3YZw" name="rollback">
                <ownedComment xmi:id="_5hcJRXPSEd-NtftfyF3YZw">
                  <body>
	 * Ensures that the specified transaction is rolled back, first rolling
	 * back a nested transaction (if any).
	 * 
	 * @param tx a transaction to roll back
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hcJRnPSEd-NtftfyF3YZw" name="tx" type="_0l8qUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hcJR3PSEd-NtftfyF3YZw" name="getTransaction">
                <ownedComment xmi:id="_5hcJSHPSEd-NtftfyF3YZw">
                  <body>
	 * Obtains the transaction in which I execute(d).
	 * 
	 * @return my transaction
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hcJSXPSEd-NtftfyF3YZw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hcJSnPSEd-NtftfyF3YZw" name="doExecute" visibility="protected" isAbstract="true">
                <ownedComment xmi:id="_5hcJS3PSEd-NtftfyF3YZw">
                  <body>
	 * Implemented by subclasses to perform the model changes.  These changes
	 * are applied by manipulation of the EMF metamodel's API, &lt;em>not&lt;/em>
	 * by executing commands on the editing domain's command stack.
	 * 
	 * @param monitor the progress monitor provided by the operation history.
     *     Will never be &lt;code>null&lt;/code> because the
     *     {@link #execute(IProgressMonitor, IAdaptable)} method would substitute
     *     a {@link NullProgressMonitor} in that case
	 * @param info the adaptable provided by the operation history
	 * 
	 * @return the status of the execution
	 * 
	 * @throws ExecutionException if, for some reason, I fail to complete
	 *     the operation
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hcJTHPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5hlTMHPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_5hlTMXPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hlTMnPSEd-NtftfyF3YZw" name="doUndo" visibility="protected">
                <ownedComment xmi:id="_5hlTM3PSEd-NtftfyF3YZw">
                  <body>
	 * Implements the undo behaviour by inverting my recorded changes.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that subclasses overriding this method &lt;em>must&lt;/em> invoke
	 * the super implementation as well.
	 * &lt;/p>
	 * 
	 * @param monitor the progress monitor provided by the operation history
     *     Will never be &lt;code>null&lt;/code> because the
     *     {@link #undo(IProgressMonitor, IAdaptable)} method would substitute
     *     a {@link NullProgressMonitor} in that case
	 * @param info the adaptable provided by the operation history
	 * 
	 * @return the status of the undo operation
	 * 
	 * @throws ExecutionException on failure to undo
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hlTNHPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5hlTNXPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_5hlTNnPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hlTN3PSEd-NtftfyF3YZw" name="doRedo" visibility="protected">
                <ownedComment xmi:id="_5hlTOHPSEd-NtftfyF3YZw">
                  <body>
	 * Implements the redo behaviour by replaying my recorded changes.
	 * &lt;p>
	 * &lt;b>Note&lt;/b> that subclasses overriding this method &lt;em>must&lt;/em> invoke
	 * the super implementation as well.
	 * &lt;/p>
	 * 
	 * @param monitor the progress monitor provided by the operation history
     *     Will never be &lt;code>null&lt;/code> because the
     *     {@link #redo(IProgressMonitor, IAdaptable)} method would substitute
     *     a {@link NullProgressMonitor} in that case
	 * @param info the adaptable provided by the operation history
	 * 
	 * @return the status of the redo operation
	 * 
	 * @throws ExecutionException on failure to redo
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hvEMHPSEd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_5hvEMXPSEd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_5hvEMnPSEd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hvEM3PSEd-NtftfyF3YZw" name="dispose" visibility="public">
                <ownedComment xmi:id="_5hvENHPSEd-NtftfyF3YZw">
                  <body>
	 * Forgets my transaction and its change description.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_5hvENXPSEd-NtftfyF3YZw" name="disposeChange">
                <ownedComment xmi:id="_5hvENnPSEd-NtftfyF3YZw">
                  <body>
     * Disposes my change description.
     * 
     * @param force whether to force disposal of the change
     </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hvEN3PSEd-NtftfyF3YZw" name="force" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5hvEOHPSEd-NtftfyF3YZw" name="isReuseParentTransaction" visibility="public">
                <ownedComment xmi:id="_5hvEOXPSEd-NtftfyF3YZw">
                  <body>
	 * Queries whether I reuse an existing read/write transaction when possible.
	 * It is not possible when either there is not any active transaction at the
	 * time of my execution or when the active transaction has different options
	 * from my options.
	 * 
	 * @return whether I reuse existing transactions
	 * 
	 * @since 1.3
	 * 
	 * @see #setReuseParentTransaction(boolean)
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5hvEOnPSEd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_5h4OIHPSEd-NtftfyF3YZw" name="setReuseParentTransaction" visibility="public">
                <ownedComment xmi:id="_5h4OIXPSEd-NtftfyF3YZw">
                  <body>
	 * Sets whether I reuse an existing read/write transaction when possible. It
	 * is not possible when either there is not any active transaction at the
	 * time of my execution or when the active transaction has different options
	 * from my options. This can be useful for performance of large nested
	 * operation structures, to eliminate the overhead of creating large numbers
	 * of small transactions with all of the data that they record.
	 * 
	 * @param reuseParentTransaction
	 *            whether to reuse parent transactions
	 * 
	 * @since 1.3
	 * 
	 * @see #isReuseParentTransaction()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_5h4OInPSEd-NtftfyF3YZw" name="reuseParentTransaction" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_UQ_DQHcvEd-96YWU42lBhw" name="AbstractResourceUndoContextPolicy" clientDependency="_UQ_DQ3cvEd-96YWU42lBhw" isAbstract="true">
              <ownedComment xmi:id="_UQ_DQXcvEd-96YWU42lBhw">
                <body>
 * &lt;p>
 * The default implementation of the resource undo-context policy, suitable for
 * clients to extend/override as required. The default policy is to consider any
 * resource as affected by an operation if either
 * &lt;/p>
 * &lt;ol>
 * &lt;li>A non-touch {@link Notification} is received from a contained object or
 * from the resource, itself, or&lt;/li>
 * &lt;li>A notification matching (1) is received from a uni-directional
 * {@link EReference} (i.e., one having no opposite) has an old value or a new
 * value in the resource
 * &lt;/ol>
 * &lt;p>
 * In the first case, above, a subclass can choose to include only changes to a
 * resource's contents-list and URI as being significant (other resource
 * properties not affecting the serialization of the resource).
 * &lt;/p>
 * &lt;p>
 * The second case, above, is intended for applications that use
 * {@link ResourceUndoContext}s to manage the Undo menus of their editors. It is
 * a pessimistic assumption that the referenced resource may either have derived
 * attributes whose values influenced precursor or successor operations, or that
 * such operations are influenced by the references incoming to the resource.
 * Thus, the concern is not so much with the dirty state of the resource as it
 * is with the integrity of the undo history for the associated editor and the
 * dependencies between successive operations. Subclasses can disable this case
 * by overriding the {@link #pessimisticCrossReferences()} method.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 * @since 1.3
 * 
 * @see #pessimisticCrossReferences()
 * @see #considerAllResourceChanges()
 </body>
              </ownedComment>
              <ownedOperation xmi:id="_URINMHcvEd-96YWU42lBhw" name="getContextResources" visibility="public">
                <ownedParameter xmi:id="_URINMncvEd-96YWU42lBhw" type="_URINMXcvEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_URR-MHcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_URR-MXcvEd-96YWU42lBhw" name="notifications" type="_QJNf43OxEd-nKvj-XTCBkg">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_URbvMXcvEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_URbvMHcvEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_URk5IHcvEd-96YWU42lBhw" name="isAbstractChange" visibility="protected">
                <ownedComment xmi:id="_URk5IXcvEd-96YWU42lBhw">
                  <body>
	 * Queries whether the specified &lt;tt>notification&lt;/tt> signals an abstract
	 * change to a resource, which would potentially put that resource into the
	 * operation context. Subclasses may override or extend as needed.
	 * 
	 * @param notification
	 *            a notification of some concrete change in the resource set
	 * @return whether this change is an abstract change to some resource, for
	 *         the purpose of tracking undo context
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_URuqIHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_UR4bIHcvEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UR4bIXcvEd-96YWU42lBhw" name="pessimisticCrossReferences" visibility="protected">
                <ownedComment xmi:id="_UR4bIncvEd-96YWU42lBhw">
                  <body>
	 * May be overridden by subclasses to disable pessimistic handling of
	 * cross-resource references. The default implementation returns
	 * &lt;code>true&lt;/code> always.
	 * 
	 * @return whether to consider changes to directed cross-resource references
	 *         as affecting the referenced resource
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_USBlEHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_USBlEXcvEd-96YWU42lBhw" name="considerAllResourceChanges" visibility="protected">
                <ownedComment xmi:id="_USBlEncvEd-96YWU42lBhw">
                  <body>
	 * May be overridden by subclasses to consider changes to any feature of a
	 * resource, not just its contents-list or URI, as affecting it.
	 * 
	 * @return &lt;code>true&lt;/code> if all changes to a resource are considered as
	 *         affecting it for the purposes of undo context; &lt;code>false&lt;/code>
	 *         if only the contents-list and URI are
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_USLWEHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_USLWEXcvEd-96YWU42lBhw" name="resourceChange" visibility="protected">
                <ownedComment xmi:id="_USLWEncvEd-96YWU42lBhw">
                  <body>
	 * Adds to the collection of &lt;tt>resources&lt;/tt> any that are affected by the
	 * specified &lt;tt>notification&lt;/tt> from a &lt;tt>resource&lt;/tt>.
	 * 
	 * @param resources
	 *            collects the affected resources
	 * @param resource
	 *            a resource that sent a notification
	 * @param notification
	 *            the notification sent by the resource
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_USUgAHcvEd-96YWU42lBhw" name="resources" type="_URINMXcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_USoCAHcvEd-96YWU42lBhw" name="resource" type="_0WmmwnctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_USoCAXcvEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_USxL8HcvEd-96YWU42lBhw" name="objectChange" visibility="protected">
                <ownedComment xmi:id="_USxL8XcvEd-96YWU42lBhw">
                  <body>
	 * Adds to the collection of &lt;tt>resources&lt;/tt> any that are affected by the
	 * specified &lt;tt>notification&lt;/tt> from an &lt;tt>object&lt;/tt>.
	 * 
	 * @param resources
	 *            collects the affected resources
	 * @param object
	 *            a object that sent a notification
	 * @param notification
	 *            the notification sent by the object
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_USxL8ncvEd-96YWU42lBhw" name="resources" type="_URINMXcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_US688HcvEd-96YWU42lBhw" name="object" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                <ownedParameter xmi:id="_US688XcvEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UTEt8HcvEd-96YWU42lBhw" name="resourceSetChange" visibility="protected">
                <ownedComment xmi:id="_UTEt8XcvEd-96YWU42lBhw">
                  <body>
	 * Adds to the collection of &lt;tt>resources&lt;/tt> any that are affected by the
	 * specified &lt;tt>notification&lt;/tt> from a &lt;tt>resourceSet&lt;/tt>.
	 * 
	 * @param resources
	 *            collects the affected resources
	 * @param resourceSet
	 *            a resource set that sent a notification
	 * @param notification
	 *            the notification sent by the resource set
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UTEt8ncvEd-96YWU42lBhw" name="resources" type="_URINMXcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_UTN34HcvEd-96YWU42lBhw" name="resourceSet" type="_00QMEHctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_UTXo4HcvEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_UTXo4XcvEd-96YWU42lBhw" name="crossResourceReference" visibility="protected">
                <ownedComment xmi:id="_UTXo4ncvEd-96YWU42lBhw">
                  <body>
	 * Handles notifications that can potentially represent cross-resource
	 * references. Helper to the
	 * {@link #objectChange(Set, EObject, Notification)} method.
	 * 
	 * @param resources
	 *            collects the affected resources
	 * @param owner
	 *            the owner of the reference that changed
	 * @param notification
	 *            a potential cross-resource reference change notification
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_UTXo43cvEd-96YWU42lBhw" name="resources" type="_URINMXcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_UTgy0HcvEd-96YWU42lBhw" name="owner" type="_huPZ2HPSEd-NtftfyF3YZw"/>
                <ownedParameter xmi:id="_UTqj0HcvEd-96YWU42lBhw" name="notification" type="_zp5RxXctEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_UQ_DQncvEd-96YWU42lBhw" name="IResourceUndoContextPolicy">
              <ownedComment xmi:id="_VDzAQHcvEd-96YWU42lBhw">
                <body>
 * &lt;p>
 * A rule determining the resources for which an {@link IUndoableOperation}
 * should be tagged with {@link ResourceUndoContext}s. In general, these are the
 * resources that
 * &lt;/p>
 * &lt;ul>
 * &lt;li>are modified by the operation, such that they are become dirty, and/or&lt;/li>
 * &lt;li>whose editors should show the operation in their Undo menu&lt;/li>
 * &lt;/ul>
 * &lt;p>
 * Clients may implement this interface, but it is recommended to extend the
 * {@link AbstractResourceUndoContextPolicy} class whenever possible.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 * @since 1.3
 * 
 * @see AbstractResourceUndoContextPolicy
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_VDzAQXcvEd-96YWU42lBhw" name="DEFAULT" type="_UQ_DQncvEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_VD8xQHcvEd-96YWU42lBhw">
                  <body>
	 * The default undo-context policy used by editing domains for which none is
	 * assigned by the client application.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedOperation xmi:id="_VD8xQXcvEd-96YWU42lBhw" name="getContextResources">
                <ownedComment xmi:id="_VEF7MHcvEd-96YWU42lBhw">
                  <body>
	 * Determines the resources in the undo context of the specified
	 * &lt;tt>operation&lt;/tt>, during which execution the changes indicated by the
	 * given &lt;tt>notifications&lt;/tt> occurred. This operation may be called
	 * several times for the same operation, but always with different
	 * notifications.
	 * 
	 * @param operation
	 *            the operation. It may or may not have finished executing. Must
	 *            not be &lt;code>null&lt;/code>
	 * @param notifications
	 *            a list of notifications of changes caused by the operation
	 *            during its execution, in the order in which they occurred.
	 *            This may be an empty list, but never &lt;code>null&lt;/code>
	 * 
	 * @return the resources that are the undo context of this operation, or an
	 *         empty list if none. Never ruterns &lt;code>null&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VEF7MXcvEd-96YWU42lBhw" type="_URINMXcvEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VEF7MncvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_VEPsMHcvEd-96YWU42lBhw" name="notifications" type="_QJNf43OxEd-nKvj-XTCBkg">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VEY2IHcvEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_VEPsMXcvEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_UQ_DQ3cvEd-96YWU42lBhw" name="AbstractResourceUndoContextPolicy extends IResourceUndoContextPolicy" supplier="_UQ_DQncvEd-96YWU42lBhw" client="_UQ_DQHcvEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Realization" xmi:id="_UdM6UncvEd-96YWU42lBhw" name="ChildIterator extends Iterator" supplier="_QJqLynOxEd-nKvj-XTCBkg" client="_UdM6UHcvEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Realization" xmi:id="_UeGSMHcvEd-96YWU42lBhw" name="ChildListIterator extends ListIterator" supplier="_QJqLznOxEd-nKvj-XTCBkg" client="_Ud8hMHcvEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_U5z90HcvEd-96YWU42lBhw" name="EMFCommandOperation">
              <ownedComment xmi:id="_U5z90XcvEd-96YWU42lBhw">
                <body>
 * An operation that wraps an EMF {@link Command} to execute it in a read/write
 * transaction on an {@link IOperationHistory}.  This class may be created
 * explicitly by a client of the operation history, or it may be used implicitly
 * by executing a command on the {@link TransactionalCommandStack}.
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_U59u0HcvEd-96YWU42lBhw" general="_5f8UdHPSEd-NtftfyF3YZw"/>
              <ownedAttribute xmi:id="_U59u0XcvEd-96YWU42lBhw" name="command" visibility="private" isLeaf="true" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_U6QpwHcvEd-96YWU42lBhw" name="triggerCommand" visibility="private" type="_vowe8HcqEd-96YWU42lBhw" isUnique="false"/>
              <ownedOperation xmi:id="_U6aawHcvEd-96YWU42lBhw" name="getCommand" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_U6aawXcvEd-96YWU42lBhw">
                  <body>
	 * Obtains the command that I wrap.
	 * 
	 * @return my command
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U6aawncvEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U6jksHcvEd-96YWU42lBhw" name="canExecute" visibility="public">
                <ownedComment xmi:id="_U6jksXcvEd-96YWU42lBhw">
                  <body>
	 * I can execute if my command can execute.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U6jksncvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U6tVsHcvEd-96YWU42lBhw" name="doExecute" visibility="protected">
                <ownedComment xmi:id="_U6tVsXcvEd-96YWU42lBhw">
                  <body>
	 * Executes me by executing my command.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U6tVsncvEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_U62foHcvEd-96YWU42lBhw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_U7AQoHcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U7AQoXcvEd-96YWU42lBhw" name="didCommit" visibility="protected">
                <ownedParameter xmi:id="_U7AQoncvEd-96YWU42lBhw" name="transaction" type="_0l8qUHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U7KBoHcvEd-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_U7KBoXcvEd-96YWU42lBhw">
                  <body>
	 * I can undo if my command or (if any) trigger command can undo.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U7TLkHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U7TLkXcvEd-96YWU42lBhw" name="doUndo" visibility="protected">
                <ownedComment xmi:id="_U7TLkncvEd-96YWU42lBhw">
                  <body>
	 * Undoes me by undoing my trigger command (if any) and my command.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U7c8kHcvEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_U7c8kXcvEd-96YWU42lBhw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_U7mtkHcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U7v3gHcvEd-96YWU42lBhw" name="canRedo" visibility="public">
                <ownedComment xmi:id="_U7v3gXcvEd-96YWU42lBhw">
                  <body>
	 * I can redo if either my wrapped command is a {@link ConditionalRedoCommand}
	 * that can undo, or it is not a conditionally redoable command.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U7v3gncvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U8CycHcvEd-96YWU42lBhw" name="canRedo" visibility="private">
                <ownedParameter xmi:id="_U8MjcHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_U8MjcXcvEd-96YWU42lBhw" name="cmd" type="_vowe8HcqEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U8WUcHcvEd-96YWU42lBhw" name="doRedo" visibility="protected">
                <ownedComment xmi:id="_U8WUcXcvEd-96YWU42lBhw">
                  <body>
	 * Redoes me by redoing my command and my trigger command (if any).
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U8WUcncvEd-96YWU42lBhw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_U8feYHcvEd-96YWU42lBhw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_U88KUHcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U9F7UHcvEd-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_U9F7UXcvEd-96YWU42lBhw">
                  <body>
     * Extends the inherited implementation to additionally dispose my command
     * and my trigger command (if any).
     </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_U9F7UncvEd-96YWU42lBhw" name="createTransaction">
                <ownedComment xmi:id="_U9F7U3cvEd-96YWU42lBhw">
                  <body>
	 * Creates a different kind of transaction that knows about this operation.
	 * 
	 * @see EMFOperationTransaction
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U9PFQHcvEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_U9PFQXcvEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_U9Y2QHcvEd-96YWU42lBhw" name="improveLabel" visibility="protected">
                <ownedComment xmi:id="_U9Y2QXcvEd-96YWU42lBhw">
                  <body>
	 * Computes a more user-friendly label for the operation than the label
	 * created by default for EMF's feature-changing commands.
	 * 
	 * @param cmd a command
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_U9Y2QncvEd-96YWU42lBhw" name="cmd" type="_vowe8HcqEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_U_nq4HcvEd-96YWU42lBhw" name="EMFOperationCommand" clientDependency="_U_nq4ncvEd-96YWU42lBhw">
              <ownedComment xmi:id="_U_nq4XcvEd-96YWU42lBhw">
                <body>
 * An implementation of the EMF {@link Command} API that wraps an
 * {@link IUndoableOperation}.  It is particularly useful for returning triggers
 * from a {@link ResourceSetListener} that perform non-EMF changes.  An
 * &lt;code>EMFOperationCommand&lt;/code>, when executed, automatically inserts itself
 * into the change description of the active transaction to support the
 * inclusion of these non-EMF changes in:
 * &lt;ul>
 *     &lt;li>transaction rollback (in case of validation failure, etc.)&lt;/li>
 *     &lt;li>undo/redo of {@link RecordingCommand}s&lt;/li>
 * &lt;/ul>
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_U_nq43cvEd-96YWU42lBhw" name="domain" visibility="private" isLeaf="true" type="_0y6IQHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_U_xb4HcvEd-96YWU42lBhw" name="operation" visibility="private" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_U_7M4HcvEd-96YWU42lBhw" name="adaptable" visibility="private" type="_9y33cXcuEd-96YWU42lBhw" isUnique="false"/>
              <ownedOperation xmi:id="_VAEW0HcvEd-96YWU42lBhw" name="canExecute" visibility="public">
                <ownedComment xmi:id="_VAEW0XcvEd-96YWU42lBhw">
                  <body>
	 * I can execute if my wrapped operation can execute.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VAOH0HcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VAOH0XcvEd-96YWU42lBhw" name="execute" visibility="public">
                <ownedComment xmi:id="_VAOH0ncvEd-96YWU42lBhw">
                  <body>
	 * Executes my wrapped operation and inserts it into the active
	 * transaction's change description for rollback and undo/redo support.
	 * 
	 * @throws IllegalStateException if I am being executed outside of a
	 *     read/write transaction context
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_VAX40HcvEd-96YWU42lBhw" name="createNonEMFTransaction" visibility="private">
                <ownedComment xmi:id="_VAX40XcvEd-96YWU42lBhw">
                  <body>
	 * Creates a transaction for recording non-EMF changes, using the specified
	 * options.
	 * 
	 * @param operation the non-EMF changes to capture in this transaction
	 * @param info the adaptable object provided to the operation when it is
	 *     executed
	 * @param options the transaction options
	 * 
	 * @return the newly started transaction
	 * 
	 * @throws InterruptedException if the current thread was interrupted while
	 *     waiting for the transaction to start
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VAX40ncvEd-96YWU42lBhw" type="_0l8qUHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VAhCwHcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_VAhCwXcvEd-96YWU42lBhw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_VAqzwHcvEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VAz9sHcvEd-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_VAz9sXcvEd-96YWU42lBhw">
                  <body>
	 * I can undo if my wrapped operation can undo.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VAz9sncvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VA9usHcvEd-96YWU42lBhw" name="undo" visibility="public">
                <ownedComment xmi:id="_VA9usXcvEd-96YWU42lBhw">
                  <body>
	 * I undo my wrapped operation.  If an adaptable was initially provided to
	 * me and it is still available, then it is passed along to the operation. 
	 * 
	 * @throws IllegalStateException if I am being undone outside of a
	 *     read/write transaction context
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_VA9usncvEd-96YWU42lBhw" name="canRedo" visibility="public">
                <ownedComment xmi:id="_VA9us3cvEd-96YWU42lBhw">
                  <body>
	 * I can redo if my wrapped operation can redo.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VBHfsHcvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VBQpoHcvEd-96YWU42lBhw" name="redo" visibility="public">
                <ownedComment xmi:id="_VBQpoXcvEd-96YWU42lBhw">
                  <body>
	 * I redo my wrapped operation.  If an adaptable was initially provided to
	 * me and it is still available, then it is passed along to the operation. 
	 * 
	 * @throws IllegalStateException if I am being redone outside of a
	 *     read/write transaction context
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_VBQponcvEd-96YWU42lBhw" name="getResult" visibility="public">
                <ownedParameter xmi:id="_VBQpo3cvEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VBkLoHcvEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_VBaaoHcvEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_VBkLoXcvEd-96YWU42lBhw" name="getAffectedObjects" visibility="public">
                <ownedComment xmi:id="_VBtVkHcvEd-96YWU42lBhw">
                  <body>
	 * Obtains the affected objects from my wrapped operation, if it is an
	 * {@link IAdvancedUndoableOperation}. 
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VBtVkXcvEd-96YWU42lBhw" type="_vhKCKncqEd-96YWU42lBhw" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VB3GkXcvEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_VB3GkHcvEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_VCAQgHcvEd-96YWU42lBhw" name="getLabel" visibility="public">
                <ownedComment xmi:id="_VCAQgXcvEd-96YWU42lBhw">
                  <body>
	 * My label is my wrapped operation's label. 
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VCAQgncvEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VCKBgHcvEd-96YWU42lBhw" name="getDescription" visibility="public">
                <ownedComment xmi:id="_VCKBgXcvEd-96YWU42lBhw">
                  <body>
	 * My description is my wrapped operation's label. 
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VCKBgncvEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VCTygHcvEd-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_VCTygXcvEd-96YWU42lBhw">
                  <body>
	 * Forgets my operation and the adaptable with which I was initialized,
	 * if any. 
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_VCc8cHcvEd-96YWU42lBhw" name="chain" visibility="public">
                <ownedParameter xmi:id="_VCc8cXcvEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VCmtcHcvEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VCmtcXcvEd-96YWU42lBhw" name="getAdaptable" visibility="private">
                <ownedComment xmi:id="_VCmtcncvEd-96YWU42lBhw">
                  <body>
	 * Obtains my adaptable, if I was initialized with one and it is still
	 * available.
	 * 
	 * @return my adaptable, or &lt;code>null&lt;/code> if not available
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VCwecHcvEd-96YWU42lBhw" type="_fXmVm3OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VCwecXcvEd-96YWU42lBhw" name="getTransaction" visibility="private">
                <ownedComment xmi:id="_VCwecncvEd-96YWU42lBhw">
                  <body>
	 * Obtains the currently active read/write transaction in my editing domain
	 * that is owned by the current thread.
	 * 
	 * @return the active transaction, or &lt;code>null&lt;/code> if there is no
	 *    active transaction or the current thread does not own it or it is
	 *    read-only
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VC5oYHcvEd-96YWU42lBhw" type="_8tIXYHcuEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VC5oYXcvEd-96YWU42lBhw" name="getOperation">
                <ownedComment xmi:id="_VC5oYncvEd-96YWU42lBhw">
                  <body>
	 * Obtains the undoable operation that this command is wrapping.
	 * 
	 * @return An undoable operation.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VDDZYHcvEd-96YWU42lBhw" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_U_nq4ncvEd-96YWU42lBhw" name="EMFOperationCommand extends ConditionalRedoCommand" supplier="_0YF0gnctEd-96YWU42lBhw" client="_U_nq4HcvEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_VH0koHcvEd-96YWU42lBhw" name="ResourceUndoContext" clientDependency="_VH9ukHcvEd-96YWU42lBhw" isLeaf="true">
              <ownedComment xmi:id="_VH0koXcvEd-96YWU42lBhw">
                <body>
 * An {@link IUndoContext} that tags an EMF operation with a resource affected by it.
 * Two resource contexts match if and only if they reference the same {@link Resource}
 * instance.  An operation may have any number of distinct resource contexts.
 * &lt;p>
 * The determination of which resource is affected by any atomic EMF change is
 * obvious, except for the case of cross-resource reference changes.  When a
 * cross-resource reference is added or removed, then both the referencing and
 * referenced resources are considered to be affected, even if the reference is
 * unidirectional.  The assumption is that even without the back-reference, there
 * is an implicit dependency in that direction.
 * &lt;/p>
 *
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_VH9ukXcvEd-96YWU42lBhw" name="editingDomain" visibility="private" isLeaf="true" type="_0y6IQHctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_VIRQkHcvEd-96YWU42lBhw" name="resource" visibility="private" isLeaf="true" type="_0WmmwnctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_VIaagHcvEd-96YWU42lBhw" name="label" visibility="private" isLeaf="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_VIt8gHcvEd-96YWU42lBhw" name="getLabel" visibility="public">
                <ownedParameter xmi:id="_VIt8gXcvEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VI3GcHcvEd-96YWU42lBhw" name="matches" visibility="public">
                <ownedComment xmi:id="_VI3GcXcvEd-96YWU42lBhw">
                  <body>
	 * I match another &lt;code>context&lt;/code> if it is a
	 * &lt;code>ResourceUndoContext&lt;/code> representing the same resource as I.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VI3GcncvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_VJA3cHcvEd-96YWU42lBhw" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VJKBYHcvEd-96YWU42lBhw" name="equals" visibility="public">
                <ownedComment xmi:id="_VJKBYXcvEd-96YWU42lBhw">
                  <body>
	 * I am equal to other &lt;code>ResourceUndoContexts&lt;/code> on the same
	 * resource as mine.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VJKBYncvEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_VJTyYHcvEd-96YWU42lBhw" name="o" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VJTyYXcvEd-96YWU42lBhw" name="hashCode" visibility="public">
                <ownedParameter xmi:id="_VJTyYncvEd-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VJdjYHcvEd-96YWU42lBhw" name="getResource" visibility="public">
                <ownedComment xmi:id="_VJdjYXcvEd-96YWU42lBhw">
                  <body>
	 * Obtains the resource that I represent.
	 * 
	 * @return my resource
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VJmtUHcvEd-96YWU42lBhw" type="_0WmmwnctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VJmtUXcvEd-96YWU42lBhw" name="getEditingDomain" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_VJmtUncvEd-96YWU42lBhw">
                  <body>
	 * Obtains the editing domain that manages my resource.
	 * 
	 * @return my editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VJweUHcvEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VJ6PUHcvEd-96YWU42lBhw" name="getAffectedResources" visibility="public" isStatic="true">
                <ownedComment xmi:id="_VJ6PUXcvEd-96YWU42lBhw">
                  <body>
	 * Analyzes a list of notifications to extract the set of {@link Resource}s
	 * affected by the changes.
	 * 
	 * @param notifications
	 *            a list of {@link Notification}s indicating changes in a
	 *            resource set
	 * 
	 * @return the resources affected by the specified notifications. The
	 *         resulting set should be treated as unmodifiable
	 * 
	 * @deprecated Since the 1.3 release, use the
	 *             {@link IResourceUndoContextPolicy#getContextResources(IUndoableOperation, List)}
	 *             method of the editing domain's resource undo-context policy,
	 *             instead
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VKDZQHcvEd-96YWU42lBhw" type="_URINMXcvEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VKDZQXcvEd-96YWU42lBhw" name="notifications" type="_QJNf43OxEd-nKvj-XTCBkg">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_VKNKQXcvEd-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_VKNKQHcvEd-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_VKWUMHcvEd-96YWU42lBhw" name="getAffectedResources" visibility="public" isStatic="true">
                <ownedComment xmi:id="_VKWUMXcvEd-96YWU42lBhw">
                  <body>
	 * Extracts the set of EMF {@link Resource}s affected by the specified
	 * operation, from the &lt;code>ResourceUndoContext&lt;/code>s attached to it.
	 * 
	 * @param operation an undoable operation
	 * 
	 * @return the {@link Resource}s that it affects, or an empty set if none.
	 *     The resulting set should be treated as unmodifiable
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VKgFMHcvEd-96YWU42lBhw" type="_URINMXcvEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VKgFMXcvEd-96YWU42lBhw" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VKp2MHcvEd-96YWU42lBhw" name="toString" visibility="public">
                <ownedParameter xmi:id="_VKp2MXcvEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_VH9ukHcvEd-96YWU42lBhw" name="ResourceUndoContext extends IUndoContext" supplier="_fXdLoXOxEd-nKvj-XTCBkg" client="_VH0koHcvEd-96YWU42lBhw"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_VL_S8HcvEd-96YWU42lBhw" name="WorkspaceEditingDomainFactory">
              <ownedComment xmi:id="_VL_S8XcvEd-96YWU42lBhw">
                <body>
 * &lt;p>
 * Factory for creating transactional editing domains that delegate command
 * execution, undo, and redo to an {@link IOperationHistory}.
 * &lt;/p>
 * &lt;p>
 * Since the 1.3 release, the determination of how {@link ResourceUndoContext}s
 * are attached to undoable operations is
 * {@linkplain #getResourceUndoContextPolicy() customizable} using the new
 * {@link IResourceUndoContextPolicy} API.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 </body>
              </ownedComment>
              <generalization xmi:id="_VMJD8XcvEd-96YWU42lBhw" general="_VMJD8HcvEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_VMS08HcvEd-96YWU42lBhw" name="INSTANCE" visibility="public" isLeaf="true" isStatic="true" type="_VL_S8HcvEd-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_VMS08XcvEd-96YWU42lBhw">
                  <body>
	 * The single shared instance of the workbench editing domain factory.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedOperation xmi:id="_VMb-4HcvEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                <ownedComment xmi:id="_VMb-4XcvEd-96YWU42lBhw">
                  <body>
	 * Creates a new editing domain using a default resource set implementation
	 * and the Workbench's shared operation history.
	 * 
	 * @return the new editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VMlv4HcvEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VM4q0HcvEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                <ownedComment xmi:id="_VM4q0XcvEd-96YWU42lBhw">
                  <body>
	 * Creates a new editing domain using the given resource set
	 * and the Workbench's shared operation history.
	 * 
	 * @param rset the resource set on which to create the editing domain
	 * 
	 * @return the new editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VNCb0HcvEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VNLlwHcvEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VNLlwXcvEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                <ownedComment xmi:id="_VNLlwncvEd-96YWU42lBhw">
                  <body>
	 * Creates a new editing domain on a default resource set implementation and
	 * the specified operation history.
	 * 
	 * @param history the operation history to which I delegate the command stack
	 * 
	 * @return the new editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VNVWwHcvEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VNfHwHcvEd-96YWU42lBhw" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VNyCsHcvEd-96YWU42lBhw" name="createEditingDomain" visibility="public">
                <ownedComment xmi:id="_VNyCsXcvEd-96YWU42lBhw">
                  <body>
	 * Creates a new editing domain on the given resource set and
	 * the specified operation history.
	 * 
	 * @param rset the resource set to use
	 * @param history the operation history to which I delegate the command stack
	 * 
	 * @return the new editing domain
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VN7MoHcvEd-96YWU42lBhw" type="_0y6IQHctEd-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_VN7MoXcvEd-96YWU42lBhw" name="rset" type="_00QMEHctEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_VOE9oHcvEd-96YWU42lBhw" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_VOE9oXcvEd-96YWU42lBhw" name="getResourceUndoContextPolicy" visibility="protected">
                <ownedComment xmi:id="_VOE9oncvEd-96YWU42lBhw">
                  <body>
	 * Obtains a resource undo-context policy to apply to the editing domain, to
	 * determine how to attach {@link ResourceUndoContext}s to operations in the
	 * associated history.  May be overridden by clients to supply a non-default
	 * implementation.
	 * 
	 * @return the resource undo-context policy
	 * 
	 * @since 1.3
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_VOOuoHcvEd-96YWU42lBhw" type="_UQ_DQncvEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_VL_S8ncvEd-96YWU42lBhw" name="TransactionalEditingDomainImpl">
              <packagedElement xmi:type="uml:Class" xmi:id="_VMJD8HcvEd-96YWU42lBhw" name="FactoryImpl"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_Ob5CsHcwEd-96YWU42lBhw" name="impl">
              <packagedElement xmi:type="uml:Class" xmi:id="_OcCMoHcwEd-96YWU42lBhw" name="EMFOperationTransaction">
                <ownedComment xmi:id="_OcCMoXcwEd-96YWU42lBhw">
                  <body>
 * A specialized transaction implementation that knows the
 * {@link EMFCommandOperation} that it supports.  It is used to communicate
 * trigger information back to the command operation to support undo/redo.
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_OcCMoncwEd-96YWU42lBhw" general="_8i2aAHcuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_OcL9oHcwEd-96YWU42lBhw" name="operation" visibility="private" type="_U5z90HcvEd-96YWU42lBhw" isUnique="false"/>
                <ownedOperation xmi:id="_OcVuoHcwEd-96YWU42lBhw" name="getOperation" visibility="public">
                  <ownedComment xmi:id="_OcVuoXcwEd-96YWU42lBhw">
                    <body>
	 * Obtains the operation that wraps my command.
	 * 
	 * @return my operation
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_Oce4kHcwEd-96YWU42lBhw" type="_U5z90HcvEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Oce4kXcwEd-96YWU42lBhw" name="setOperation" visibility="public">
                  <ownedComment xmi:id="_Oce4kncwEd-96YWU42lBhw">
                    <body>
	 * Sets the operation that wraps my command.
	 * 
	 * @param operation my operation
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OcopkHcwEd-96YWU42lBhw" name="operation" type="_U5z90HcvEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_Oc7kgHcwEd-96YWU42lBhw" name="NonEMFTransaction">
                <ownedComment xmi:id="_OdFVgHcwEd-96YWU42lBhw">
                  <body>
 * A transaction encapsulating non-EMF changes (as represented by an
 * unoable operation).
 *
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_OdFVgXcwEd-96YWU42lBhw" general="_8i2aAncuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_OdFVgncwEd-96YWU42lBhw" name="operation" visibility="private" isLeaf="true" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_OdYQcHcwEd-96YWU42lBhw" name="info" visibility="private" type="_fXmVm3OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedOperation xmi:id="_OdiBcHcwEd-96YWU42lBhw" name="customizeOptions" visibility="private" isStatic="true">
                  <ownedComment xmi:id="_OdiBcXcwEd-96YWU42lBhw">
                    <body>
	 * Customizes the provided options for this transaction.
	 * 
	 * @param options The options provided by the call to the constructor that
	 *  should be customized.
	 *  
	 * @return A new map of options that should be passed to the superclass to
	 *  become our official set of options.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OdrLYHcwEd-96YWU42lBhw" type="_5gGFc3PSEd-NtftfyF3YZw" direction="return"/>
                  <ownedParameter xmi:id="_Od08YHcwEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Od08YXcwEd-96YWU42lBhw" name="commit" visibility="public">
                  <ownedComment xmi:id="_Od08YncwEd-96YWU42lBhw">
                    <body>
	 * Appends my non-EMF change and commits.
	 </body>
                  </ownedComment>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_Oggc8HcwEd-96YWU42lBhw" name="WorkspaceCommandStackImpl" clientDependency="_OgqN83cwEd-96YWU42lBhw">
                <ownedComment xmi:id="_OgqN8HcwEd-96YWU42lBhw">
                  <body>
 * Implementation of a transactional command stack that delegates
 * execution of commands to an {@link IOperationHistory}.
 * &lt;p>
 * This is the command stack implementation used by editing domains created by
 * the {@link WorkspaceEditingDomainFactory}.
 * &lt;/p>
 * 
 * @author Christian W. Damus (cdamus)
 </body>
                </ownedComment>
                <generalization xmi:id="_OgqN8XcwEd-96YWU42lBhw" general="_8gUqcHcuEd-96YWU42lBhw"/>
                <ownedAttribute xmi:id="_OgzX4HcwEd-96YWU42lBhw" name="history" visibility="private" isLeaf="true" type="_VGoR0HcvEd-96YWU42lBhw" isUnique="false" association="_RUB8IHfuEd-C3vabgS4Hag"/>
                <ownedAttribute xmi:id="_OhG54XcwEd-96YWU42lBhw" name="domainListener" visibility="private" type="_OriBMHcwEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_OhQD0HcwEd-96YWU42lBhw" name="undoContextPolicy" visibility="private" type="_UQ_DQncvEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_OhZ00HcwEd-96YWU42lBhw" name="currentOperation" visibility="private" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_Ohjl0HcwEd-96YWU42lBhw" name="historyAffectedResources" visibility="private" type="_URINMXcvEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_OhsvwHcwEd-96YWU42lBhw" name="defaultContext" visibility="private" isLeaf="true" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_Oh_qsHcwEd-96YWU42lBhw" name="savedContext" visibility="private" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_OiJbsHcwEd-96YWU42lBhw" name="mostRecentOperation" visibility="private" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false"/>
                <nestedClassifier xmi:type="uml:Class" xmi:id="_OhG54HcwEd-96YWU42lBhw" name="DomainListener" visibility="private" clientDependency="_Omw18HcwEd-96YWU42lBhw">
                  <ownedComment xmi:id="_OmnsAHcwEd-96YWU42lBhw">
                    <body>
	 * A listener on the editing domain and operation history that tracks
	 * which resources are changed by an operation and attaches the appropriate
	 * {@link ResourceUndoContext} to it when it completes.
	 *
	 * @author Christian W. Damus (cdamus)
	 </body>
                  </ownedComment>
                  <generalization xmi:id="_OmnsAXcwEd-96YWU42lBhw" general="_zpvgwnctEd-96YWU42lBhw"/>
                  <ownedOperation xmi:id="_Omw18ncwEd-96YWU42lBhw" name="historyNotification" visibility="public">
                    <ownedParameter xmi:id="_Om6m8HcwEd-96YWU42lBhw" name="event" type="_Omw18XcwEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_Om6m8XcwEd-96YWU42lBhw" name="resourceSetChanged" visibility="public">
                    <ownedParameter xmi:id="_OnEX8HcwEd-96YWU42lBhw" name="event" type="_zp5RwHctEd-96YWU42lBhw"/>
                  </ownedOperation>
                  <ownedOperation xmi:id="_OnEX8XcwEd-96YWU42lBhw" name="getUnloadedResources" visibility="private">
                    <ownedComment xmi:id="_OnEX8ncwEd-96YWU42lBhw">
                      <body>
		 * Finds resources that have sent unload notifications.
		 * 
		 * @param notifications notifications received from a transaction
		 * @return a set of resources that the notifications indicate have been
		 *     unloaded, or &lt;code>null&lt;/code> if none
		 </body>
                    </ownedComment>
                    <ownedParameter xmi:id="_OnNh4HcwEd-96YWU42lBhw" type="_URINMXcvEd-96YWU42lBhw" direction="return"/>
                    <ownedParameter xmi:id="_OnNh4XcwEd-96YWU42lBhw" name="notifications" type="_zp5RxXctEd-96YWU42lBhw">
                      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OnhD4HcwEd-96YWU42lBhw" value="*"/>
                      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OnXS4HcwEd-96YWU42lBhw"/>
                    </ownedParameter>
                  </ownedOperation>
                  <ownedOperation xmi:id="_OnhD4XcwEd-96YWU42lBhw" name="isPostcommitOnly" visibility="public">
                    <ownedParameter xmi:id="_OnhD4ncwEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  </ownedOperation>
                </nestedClassifier>
                <ownedOperation xmi:id="_OiTMsHcwEd-96YWU42lBhw" name="setEditingDomain" visibility="public">
                  <ownedComment xmi:id="_OiTMsXcwEd-96YWU42lBhw">
                    <body>
     * Extends the superclass implementation to add/remove listeners on the
     * editing domain.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OicWoHcwEd-96YWU42lBhw" name="domain" type="_8wkF4HcuEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OicWoXcwEd-96YWU42lBhw" name="getOperationHistory" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_OimHoHcwEd-96YWU42lBhw" type="_VGoR0HcvEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OimHoXcwEd-96YWU42lBhw" name="getDefaultUndoContext" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_Oiv4oHcwEd-96YWU42lBhw" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Oi5CkHcwEd-96YWU42lBhw" name="getDefaultUndoContextLabel" visibility="protected">
                  <ownedComment xmi:id="_Oi5CkXcwEd-96YWU42lBhw">
                    <body>
	 * Obtains the label to display for the default undo context that I apply
	 * to operations executed through me as {@link Command}s.  Subclasses may
	 * override to customize the label.
	 * 
	 * @return my default undo context label
	 * 
	 * @since 1.2
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_Oi5CkncwEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OjCzkHcwEd-96YWU42lBhw" name="getSavedContext" visibility="private" isLeaf="true">
                  <ownedParameter xmi:id="_OjL9gHcwEd-96YWU42lBhw" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OjL9gXcwEd-96YWU42lBhw" name="getSavepointUndoContextLabel" visibility="protected">
                  <ownedComment xmi:id="_OjL9gncwEd-96YWU42lBhw">
                    <body>
     * Obtains the label to display for the save-point undo context that I apply
     * to the last operation in my {@linkplain #getDefaultUndoContext() default undo context}
     * that was executed at the time save was performed (as indicated by invocation
     * of the {@link #saveIsDone()} method).  Subclasses may override to customize the label.
     * 
     * @return my save-point undo context label
     * 
     * @since 1.2
     </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OjVugHcwEd-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OjVugXcwEd-96YWU42lBhw" name="doExecute" visibility="protected">
                  <ownedComment xmi:id="_OjVugncwEd-96YWU42lBhw">
                    <body>
     * {@inheritDoc}
     * 
     *  @since 1.1
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OjffgHcwEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_OjffgXcwEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OjopcHcwEd-96YWU42lBhw" name="canUndo" visibility="public">
                  <ownedComment xmi:id="_OjopcXcwEd-96YWU42lBhw">
                    <body>
	 * Queries whether we can undo my default undo context in my operation history.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OjyacHcwEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OjyacXcwEd-96YWU42lBhw" name="undo" visibility="public">
                  <ownedComment xmi:id="_OjyacncwEd-96YWU42lBhw">
                    <body>
	 * Undoes my default undo context in my operation history.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_Oj8LcHcwEd-96YWU42lBhw" name="canRedo" visibility="public">
                  <ownedComment xmi:id="_Oj8LcXcwEd-96YWU42lBhw">
                    <body>
	 * Queries whether we can redo my default undo context in my operation history.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_Oj8LcncwEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OkFVYHcwEd-96YWU42lBhw" name="redo" visibility="public">
                  <ownedComment xmi:id="_OkFVYXcwEd-96YWU42lBhw">
                    <body>
	 * Redoes my default undo context in my operation history.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_OkPGYHcwEd-96YWU42lBhw" name="flush" visibility="public">
                  <ownedComment xmi:id="_OkPGYXcwEd-96YWU42lBhw">
                    <body>
	 * Disposes my default undo context in my operation history.
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_OkPGYncwEd-96YWU42lBhw" name="getMostRecentCommand" visibility="public">
                  <ownedComment xmi:id="_OkPGY3cwEd-96YWU42lBhw">
                    <body>
	 * Gets the command from the most recently executed, done, or redone
	 * operation.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OkiBUHcwEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OkiBUXcwEd-96YWU42lBhw" name="getUndoCommand" visibility="public">
                  <ownedComment xmi:id="_OkiBUncwEd-96YWU42lBhw">
                    <body>
	 * Gets the command from the top of the undo history, if any.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OkryUHcwEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OkryUXcwEd-96YWU42lBhw" name="getRedoCommand" visibility="public">
                  <ownedComment xmi:id="_OkryUncwEd-96YWU42lBhw">
                    <body>
	 * Gets the command from the top of the redo history, if any.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_Ok08QHcwEd-96YWU42lBhw" type="_vowe8HcqEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Ok-tQHcwEd-96YWU42lBhw" name="createTransaction" visibility="public">
                  <ownedParameter xmi:id="_Ok-tQXcwEd-96YWU42lBhw" type="_8i2aAHcuEd-96YWU42lBhw" direction="return"/>
                  <ownedParameter xmi:id="_Ok-tQncwEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_OlbZMHcwEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OlkjIHcwEd-96YWU42lBhw" name="executeTriggers" visibility="public">
                  <ownedParameter xmi:id="_OlkjIXcwEd-96YWU42lBhw" name="command" type="_vowe8HcqEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_OluUIHcwEd-96YWU42lBhw" name="triggers" type="_vowe8HcqEd-96YWU42lBhw">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OmBPEHcwEd-96YWU42lBhw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Ol4FIHcwEd-96YWU42lBhw"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_OmBPEXcwEd-96YWU42lBhw" name="options" type="_5gGFc3PSEd-NtftfyF3YZw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OmLAEHcwEd-96YWU42lBhw" name="dispose" visibility="public"/>
                <ownedOperation xmi:id="_OmLAEXcwEd-96YWU42lBhw" name="getResourceUndoContextPolicy" visibility="public">
                  <ownedComment xmi:id="_OmLAEncwEd-96YWU42lBhw">
                    <body>
	 * Obtains my resource undo-context policy.
	 * 
	 * @return my resource undo-context policy
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_OmUxEHcwEd-96YWU42lBhw" type="_UQ_DQncvEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OmUxEXcwEd-96YWU42lBhw" name="setResourceUndoContextPolicy" visibility="public">
                  <ownedComment xmi:id="_OmUxEncwEd-96YWU42lBhw">
                    <body>
	 * Sets my resource undo-context policy.
	 * 
	 * @param policy
	 *            my new policy, or &lt;code>null&lt;/code> to restore the default
	 * 
	 * @since 1.3
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_Omd7AHcwEd-96YWU42lBhw" name="policy" type="_UQ_DQncvEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OnqN0HcwEd-96YWU42lBhw" name="isSaveNeeded" visibility="public">
                  <ownedParameter xmi:id="_OnqN0XcwEd-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Onz-0HcwEd-96YWU42lBhw" name="saveIsDone" visibility="public"/>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_OgqN83cwEd-96YWU42lBhw" name="WorkspaceCommandStackImpl extends IWorkspaceCommandStack" supplier="_OgqN8ncwEd-96YWU42lBhw" client="_Oggc8HcwEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_Omw18HcwEd-96YWU42lBhw" name="DomainListener extends IOperationHistoryListener" supplier="_OmnsAncwEd-96YWU42lBhw" client="_OhG54HcwEd-96YWU42lBhw"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_OriBMHcwEd-96YWU42lBhw" name="DomainListener"/>
              <packagedElement xmi:type="uml:Association" xmi:id="_RUB8IHfuEd-C3vabgS4Hag" name="WorkspaceCommandStackImpl_workspacecommandstackimpl_history" memberEnd="_RUB8IXfuEd-C3vabgS4Hag _OgzX4HcwEd-96YWU42lBhw">
                <ownedEnd xmi:id="_RUB8IXfuEd-C3vabgS4Hag" name="workspacecommandstackimpl" type="_Oggc8HcwEd-96YWU42lBhw" isUnique="false" association="_RUB8IHfuEd-C3vabgS4Hag">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RUB8InfuEd-C3vabgS4Hag" value="1"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RUB8I3fuEd-C3vabgS4Hag"/>
                </ownedEnd>
              </packagedElement>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_OgqN8ncwEd-96YWU42lBhw" name="IWorkspaceCommandStack">
              <ownedComment xmi:id="_xQXHMHcwEd-96YWU42lBhw">
                <body>
 * A specialized transactional command stack that delegates the execution of
 * commands to an {@link IOperationHistory}.  This command stack supports
 * {@link CommandStack#execute(org.eclipse.emf.common.command.Command) execution}
 * of {@link Command}s, but supports the following APIs only in terms of the
 * default undo context of the command stack:
 * &lt;ul>
 *   &lt;li>{@link CommandStack#execute(Command)}&lt;/li>
 *   &lt;li>{@link CommandStack#undo()}&lt;/li>
 *   &lt;li>{@link CommandStack#redo()}&lt;/li>
 *   &lt;li>{@link CommandStack#flush()}&lt;/li>
 *   &lt;li>{@link CommandStack#getMostRecentCommand()}&lt;/li>
 *   &lt;li>{@link CommandStack#getUndoCommand()}&lt;/li>
 *   &lt;li>{@link CommandStack#getRedoCommand()}&lt;/li>
 * &lt;/ul>
 * All of the above operations map to the effective linear stack of operations
 * in the history that wrap commands and have the default undo context.  Thus,
 * they will only be consistent with the default command stack semantics if
 * all commands executed on this command stack's operation history use its
 * default undo context (which is guaranteed if all commands are executed via
 * this stack).
 * 
 * @author Christian W. Damus (cdamus)
 * 
 * @see #getDefaultUndoContext()
 </body>
              </ownedComment>
              <generalization xmi:id="_xQXHMXcwEd-96YWU42lBhw" general="_0xkrgHctEd-96YWU42lBhw"/>
              <ownedOperation xmi:id="_xQgRIHcwEd-96YWU42lBhw" name="getOperationHistory">
                <ownedComment xmi:id="_xQgRIXcwEd-96YWU42lBhw">
                  <body>
	 * Obtains the operation history to which I delegate command execution.
	 * 
	 * @return my operation history
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_xQgRIncwEd-96YWU42lBhw" type="_VGoR0HcvEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_xQqCIHcwEd-96YWU42lBhw" name="getDefaultUndoContext">
                <ownedComment xmi:id="_xQqCIXcwEd-96YWU42lBhw">
                  <body>
	 * Obtains the default undo context to add to the undoable operations that
	 * I execute on my operation history to wrap {@link Command}s.  Moreover,
	 * undo, redo, and flush are context-specific operations
	 * in the operation history, so my undo/redo/flush commands use this context
	 * in delegating to the history.  Likewise, the determination of the
	 * most recent command and undo/redo commands depends on this context.
	 *  
	 * @return the default undo context for undo/redo/flush invocations
	 * 
	 * @see TransactionalCommandStack#execute(Command, java.util.Map)
	 * @see CommandStack#undo()
	 * @see CommandStack#redo()
	 * @see CommandStack#flush()
	 * @see CommandStack#getMostRecentCommand()
	 * @see CommandStack#getUndoCommand()
	 * @see CommandStack#getRedoCommand()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_xQqCIncwEd-96YWU42lBhw" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_0zNqQXctEd-96YWU42lBhw" name="edit">
            <packagedElement xmi:type="uml:Package" xmi:id="_0zNqQnctEd-96YWU42lBhw" name="domain">
              <packagedElement xmi:type="uml:Interface" xmi:id="_0zW0MHctEd-96YWU42lBhw" name="EditingDomain"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_9mzKUncuEd-96YWU42lBhw" name="AdapterFactoryEditingDomain"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_9yuGcncuEd-96YWU42lBhw" name="IEditingDomainProvider"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_846JkHcuEd-96YWU42lBhw" name="validation">
            <packagedElement xmi:type="uml:Package" xmi:id="_846JkXcuEd-96YWU42lBhw" name="service">
              <packagedElement xmi:type="uml:Interface" xmi:id="_846JkncuEd-96YWU42lBhw" name="IValidator"/>
            </packagedElement>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_vLsvgHcqEd-96YWU42lBhw" name="generated"/>
  <packagedElement xmi:type="uml:Model" xmi:id="_0a7GE3ctEd-96YWU42lBhw" name="core">
    <packagedElement xmi:type="uml:Package" xmi:id="_0a7GFHctEd-96YWU42lBhw" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_0bEQAHctEd-96YWU42lBhw" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_0bEQAXctEd-96YWU42lBhw" name="core">
          <packagedElement xmi:type="uml:Package" xmi:id="_QJNf1nOxEd-nKvj-XTCBkg" name="commands">
            <packagedElement xmi:type="uml:Package" xmi:id="_QJNf13OxEd-nKvj-XTCBkg" name="operations">
              <packagedElement xmi:type="uml:Interface" xmi:id="_QJNf2HOxEd-nKvj-XTCBkg" name="IUndoableOperation">
                <ownedComment xmi:id="_fXdLoHOxEd-nKvj-XTCBkg">
                  <body>
 * &lt;p>
 * IUndoableOperation defines an operation that can be executed, undone, and
 * redone. Operations typically have fully defined parameters. That is, they are
 * usually created after the user has been queried for any input needed to
 * define the operation.
 * &lt;/p>
 * &lt;p>
 * Operations determine their ability to execute, undo, or redo according to the
 * current state of the application. They do not make decisions about their
 * validity based on where they occur in the operation history. That is left to
 * the particular operation history.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_fXdLonOxEd-nKvj-XTCBkg" name="addContext">
                  <ownedComment xmi:id="_fXdLo3OxEd-nKvj-XTCBkg">
                    <body>
	 * &lt;p>
	 * Add the specified context to the operation. If a context equal to the
	 * specified context is already present, do not add it again. Note that
	 * determining whether a context is already present is based on equality,
	 * not whether the context matches ({@link IUndoContext#matches(IUndoContext)})
	 * another context.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context to be added
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXdLpHOxEd-nKvj-XTCBkg" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXdLpXOxEd-nKvj-XTCBkg" name="canExecute">
                  <ownedComment xmi:id="_fXdLpnOxEd-nKvj-XTCBkg">
                    <body>
	 * &lt;p>
	 * Returns whether the operation can be executed in its current state.
	 * &lt;/p>
	 * 
	 * &lt;p>
	 * Note: The computation for this method must be fast, as it is called
	 * frequently. If necessary, this method can be optimistic in its
	 * computation (returning true) and later perform more time-consuming
	 * computations during the actual execution of the operation, returning the
	 * appropriate status if the operation cannot actually execute at that time.
	 * &lt;/p>
	 * 
	 * @return &lt;code>true&lt;/code> if the operation can be executed;
	 *         &lt;code>false&lt;/code> otherwise.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVkHOxEd-nKvj-XTCBkg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVlHOxEd-nKvj-XTCBkg" name="canUndo">
                  <ownedComment xmi:id="_fXmVlXOxEd-nKvj-XTCBkg">
                    <body>
	 * &lt;p>
	 * Returns whether the operation can be undone in its current state.
	 * &lt;/p>
	 * 
	 * &lt;p>
	 * Note: The computation for this method must be fast, as it is called
	 * frequently. If necessary, this method can be optimistic in its
	 * computation (returning true) and later perform more time-consuming
	 * computations during the actual undo of the operation, returning the
	 * appropriate status if the operation cannot actually be undone at that
	 * time.
	 * &lt;/p>
	 * 
	 * @return &lt;code>true&lt;/code> if the operation can be undone;
	 *         &lt;code>false&lt;/code> otherwise.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVlnOxEd-nKvj-XTCBkg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVl3OxEd-nKvj-XTCBkg" name="dispose">
                  <ownedComment xmi:id="_fXmVmHOxEd-nKvj-XTCBkg">
                    <body>
	 * Dispose of the operation. This method is used when the operation is no
	 * longer kept in the history. Implementers of this method typically
	 * unregister any listeners.
	 * 
	 </body>
                  </ownedComment>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVnHOxEd-nKvj-XTCBkg" name="execute">
                  <ownedComment xmi:id="_fXmVnXOxEd-nKvj-XTCBkg">
                    <body>
	 * Execute the operation. This method should only be called the first time
	 * that an operation is executed.
	 * 
	 * @param monitor
	 *            the progress monitor (or &lt;code>null&lt;/code>) to use for
	 *            reporting progress to the user.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus of the execution. The status severity should be set
	 *         to &lt;code>OK&lt;/code> if the operation was successful, and
	 *         &lt;code>ERROR&lt;/code> if it was not. Any other status is assumed
	 *         to represent an incompletion of the execution.
	 * @throws ExecutionException
	 *             if an exception occurred during execution.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVn3OxEd-nKvj-XTCBkg" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_fXmVoHOxEd-nKvj-XTCBkg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_fXmVoXOxEd-nKvj-XTCBkg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVonOxEd-nKvj-XTCBkg" name="getContexts">
                  <ownedComment xmi:id="_fXmVo3OxEd-nKvj-XTCBkg">
                    <body>
	 * &lt;p>
	 * Returns the array of contexts that have been assigned to the operation.
	 * &lt;/p>
	 * &lt;p>
	 * This method may be called by the operation history from inside a
	 * synchronized block. To avoid deadlock conditions, implementers of this
	 * method must avoid dispatching and waiting on threads that modify the
	 * operation history during this method.
	 * &lt;/p>
	 * 
	 * @return the array of contexts
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVpHOxEd-nKvj-XTCBkg" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_fXmVpnOxEd-nKvj-XTCBkg" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_fXmVpXOxEd-nKvj-XTCBkg"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVp3OxEd-nKvj-XTCBkg" name="getLabel">
                  <ownedComment xmi:id="_fXmVqHOxEd-nKvj-XTCBkg">
                    <body>
	 * Return the label that should be used to show the name of the operation to
	 * the user. This label is typically combined with the command strings shown
	 * to the user in &quot;Undo&quot; and &quot;Redo&quot; user interfaces.  
	 * 
	 * @return the String label.  Should never be &lt;code>null&lt;/code>.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVqXOxEd-nKvj-XTCBkg" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVqnOxEd-nKvj-XTCBkg" name="hasContext">
                  <ownedComment xmi:id="_fXmVq3OxEd-nKvj-XTCBkg">
                    <body>
	 * &lt;p>
	 * Returns whether the operation has a matching context for the specified
	 * context.
	 * &lt;/p>
	 * &lt;p>
	 * This method may be called by the operation history from inside a
	 * synchronized block. To avoid deadlock conditions, implementers of this
	 * method must avoid dispatching and waiting on threads that modify the
	 * operation history during this method.
	 * &lt;/p>
	 * 
	 * @see IUndoContext#matches(IUndoContext)
	 * 
	 * @param context
	 *            the context in question
	 * @return &lt;code>true&lt;/code> if the context is present, &lt;code>false&lt;/code>
	 *         if it is not.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVrHOxEd-nKvj-XTCBkg" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_fXmVrXOxEd-nKvj-XTCBkg" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVrnOxEd-nKvj-XTCBkg" name="redo">
                  <ownedComment xmi:id="_fXmVr3OxEd-nKvj-XTCBkg">
                    <body>
	 * Redo the operation. This method should only be called after an operation
	 * has been undone.
	 * 
	 * @param monitor
	 *            the progress monitor (or &lt;code>null&lt;/code>) to use for
	 *            reporting progress to the user.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * @return the IStatus of the redo. The status severity should be set to
	 *         &lt;code>OK&lt;/code> if the redo was successful, and
	 *         &lt;code>ERROR&lt;/code> if it was not. Any other status is assumed
	 *         to represent an incompletion of the redo.
	 * @throws ExecutionException
	 *             if an exception occurred during redo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXmVsHOxEd-nKvj-XTCBkg" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_fXmVsXOxEd-nKvj-XTCBkg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_fXmVsnOxEd-nKvj-XTCBkg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXmVs3OxEd-nKvj-XTCBkg" name="removeContext">
                  <ownedComment xmi:id="_fXwGkHOxEd-nKvj-XTCBkg">
                    <body>
	 * Remove the specified context from the operation. This method has no
	 * effect if the context is not equal to another context in the context
	 * list. Note that determining whether a context is present when removing it
	 * is based on equality, not whether the context matches ({@link
	 * IUndoContext#matches(IUndoContext)}) another context.
	 * 
	 * @param context
	 *            the context to be removed
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXwGkXOxEd-nKvj-XTCBkg" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_fXwGknOxEd-nKvj-XTCBkg" name="undo">
                  <ownedComment xmi:id="_fXwGk3OxEd-nKvj-XTCBkg">
                    <body>
	 * Undo the operation. This method should only be called after an operation
	 * has been executed.
	 * 
	 * @param monitor
	 *            the progress monitor (or &lt;code>null&lt;/code>) to use for
	 *            reporting progress to the user.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * @return the IStatus of the undo. The status severity should be set to
	 *         &lt;code>OK&lt;/code> if the redo was successful, and
	 *         &lt;code>ERROR&lt;/code> if it was not. Any other status is assumed
	 *         to represent an incompletion of the undo.
	 * @throws ExecutionException
	 *             if an exception occurred during undo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_fXwGlHOxEd-nKvj-XTCBkg" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_fXwGlXOxEd-nKvj-XTCBkg" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_fXwGlnOxEd-nKvj-XTCBkg" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_fXdLoXOxEd-nKvj-XTCBkg" name="IUndoContext">
                <ownedComment xmi:id="_s_j6wHe8Ed-C3vabgS4Hag">
                  <body>
 * &lt;p>
 * An undo context is used to &quot;tag&quot; operations as being applicable to a certain
 * context. The undo context is used to filter the history of operations
 * available for undo or redo so that only operations appropriate for a given
 * undo context are shown when the application is presenting that context.
 * &lt;/p>
 * &lt;p>
 * The scope of an undo context is defined by the application that is making
 * undo and redo of operations available. Undo contexts may be related to
 * application models, or may be associated with UI objects that are providing
 * undo and redo support.
 * &lt;/p>
 * &lt;p>
 * An undo context may be defined as &quot;matching&quot; another context. This allows
 * applications to provide specialized implementations of an undo context that
 * will appear in the operation history for their matching context.
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_s_trwHe8Ed-C3vabgS4Hag" name="getLabel" visibility="public">
                  <ownedComment xmi:id="_s_trwXe8Ed-C3vabgS4Hag">
                    <body>
	 * Get the label that describes the undo context.
	 * 
	 * @return the label for the context.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s_21sHe8Ed-C3vabgS4Hag" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s_21sXe8Ed-C3vabgS4Hag" name="matches" visibility="public">
                  <ownedComment xmi:id="_s_21sne8Ed-C3vabgS4Hag">
                    <body>
	 * Return whether the specified context is considered a match for the
	 * receiving context. When a context matches another context, operations
	 * that have the context are considered to also have the matching context.
	 * 
	 * @param context 
	 *            the context to be checked against the receiving context.
	 * 
	 * @return &lt;code>true&lt;/code> if the receiving context can be considered a
	 *         match for the specified context, and &lt;code>false&lt;/code> if it
	 *         cannot.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tAAmsHe8Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_tAKXsHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_7-bbAnPQEd-NtftfyF3YZw" name="AbstractOperation" clientDependency="_RqLVwXPREd-NtftfyF3YZw" isAbstract="true">
                <ownedComment xmi:id="_RqLVwHPREd-NtftfyF3YZw">
                  <body>
 * &lt;p>
 * Abstract implementation for an undoable operation. At a minimum, subclasses
 * should implement behavior for
 * {@link IUndoableOperation#execute(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)},
 * {@link IUndoableOperation#redo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)},
 * and
 * {@link IUndoableOperation#undo(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)}.
 * &lt;/p>
 * 
 * @see org.eclipse.core.commands.operations.IUndoableOperation
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_RqVGwHPREd-NtftfyF3YZw" name="contexts" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RqeQsHPREd-NtftfyF3YZw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RqVGwXPREd-NtftfyF3YZw"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_RqeQsXPREd-NtftfyF3YZw" name="label" visibility="private" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedOperation xmi:id="_RqeQsnPREd-NtftfyF3YZw" name="addContext" visibility="public">
                  <ownedParameter xmi:id="_RqeQs3PREd-NtftfyF3YZw" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RqoBsHPREd-NtftfyF3YZw" name="canExecute" visibility="public">
                  <ownedParameter xmi:id="_RqoBsXPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RqoBsnPREd-NtftfyF3YZw" name="canRedo" visibility="public">
                  <ownedParameter xmi:id="_RqoBs3PREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RqoBtHPREd-NtftfyF3YZw" name="canUndo" visibility="public">
                  <ownedParameter xmi:id="_RqoBtXPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RqxLoHPREd-NtftfyF3YZw" name="dispose" visibility="public"/>
                <ownedOperation xmi:id="_RqxLoXPREd-NtftfyF3YZw" name="execute" visibility="public" isAbstract="true">
                  <ownedParameter xmi:id="_Rq68oHPREd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_Rq68oXPREd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_Rq68onPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_Rq68o3PREd-NtftfyF3YZw" name="getContexts" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_Rq68pHPREd-NtftfyF3YZw" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Rq68pnPREd-NtftfyF3YZw" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Rq68pXPREd-NtftfyF3YZw"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_Rq68p3PREd-NtftfyF3YZw" name="getLabel" visibility="public">
                  <ownedParameter xmi:id="_RrEtoHPREd-NtftfyF3YZw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RrEtoXPREd-NtftfyF3YZw" name="setLabel" visibility="public">
                  <ownedComment xmi:id="_RrEtonPREd-NtftfyF3YZw">
                    <body>
	 * Set the label of the operation to the specified name.
	 * 
	 * @param name
	 *            the string to be used for the label. Should never be
	 *            &lt;code>null&lt;/code>.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_RrN3kHPREd-NtftfyF3YZw" name="name" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RrN3kXPREd-NtftfyF3YZw" name="hasContext" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_RrN3knPREd-NtftfyF3YZw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_RrN3k3PREd-NtftfyF3YZw" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RrN3lHPREd-NtftfyF3YZw" name="redo" visibility="public" isAbstract="true">
                  <ownedParameter xmi:id="_RrXokHPREd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_RrXokXPREd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_RrXoknPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RrXok3PREd-NtftfyF3YZw" name="removeContext" visibility="public">
                  <ownedParameter xmi:id="_RrhZkHPREd-NtftfyF3YZw" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RrhZkXPREd-NtftfyF3YZw" name="undo" visibility="public" isAbstract="true">
                  <ownedParameter xmi:id="_RrhZknPREd-NtftfyF3YZw" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_RrhZk3PREd-NtftfyF3YZw" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_RrhZlHPREd-NtftfyF3YZw" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_RrhZlXPREd-NtftfyF3YZw" name="toString" visibility="public">
                  <ownedComment xmi:id="_RrqjgHPREd-NtftfyF3YZw">
                    <body>
	 * The string representation of this operation. Used for debugging purposes
	 * only. This string should not be shown to an end user.
	 * 
	 * @return The string representation.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_RrqjgXPREd-NtftfyF3YZw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_RqLVwXPREd-NtftfyF3YZw" name="AbstractOperation extends IUndoableOperation" supplier="_QJNf2HOxEd-nKvj-XTCBkg" client="_7-bbAnPQEd-NtftfyF3YZw"/>
              <packagedElement xmi:type="uml:Interface" xmi:id="_VGoR0HcvEd-96YWU42lBhw" name="IOperationHistory">
                <ownedComment xmi:id="_s01RcHe8Ed-C3vabgS4Hag">
                  <body>
 * &lt;p>
 * IOperationHistory tracks a history of operations that can be undone or
 * redone. Operations are added to the history once they have been initially
 * executed. Clients may choose whether to have the operations history perform
 * the initial execution or to simply add an already-executed operation to the
 * history.
 * &lt;/p>
 * &lt;p>
 * Once operations are added to the history, the methods
 * {@link #canRedo(IUndoContext)} and {@link #canUndo(IUndoContext)} are used to
 * determine whether there is an operation available for undo and redo in a
 * given undo context. The context-based protocol implies that there is only one
 * operation that can be undone or redone at a given time in a given context.
 * This is typical of a linear undo model, when only the most recently executed
 * operation is available for undo. When this protocol is used, a linear model
 * is enforced by the history.
 * &lt;/p>
 * &lt;p>
 * It is up to clients to determine how to maintain a history that is invalid or
 * stale. For example, when the most recent operation for a context cannot be
 * performed, clients may wish to dispose the history for that context.
 * &lt;/p>
 * &lt;p>
 * Additional protocol allows direct undo and redo of a specified operation,
 * regardless of its position in the history. When a more flexible undo model is
 * supported, these methods can be implemented to undo and redo directly
 * specified operations. If an implementer of IOperationHistory does not allow
 * direct undo and redo, these methods can return a status indicating that it is
 * not allowed.
 * &lt;/p>
 * &lt;p>
 * Listeners ({@link IOperationHistoryListener}) can listen for notifications
 * about changes in the history (operations added or removed), and for
 * notification before and after any operation is executed, undone or redone.
 * Notification of operation execution only occurs when clients direct the
 * history to execute the operation. If the operation is added after it is
 * executed, there can be no notification of its execution.
 * &lt;/p>
 * &lt;p>
 * {@link IOperationApprover} defines an interface for approving an undo or redo
 * before it occurs. This is useful for injecting policy-decisions into the undo
 * model - whether direct undo and redo are supported, or warning the user about
 * certain kinds of operations. It can also be used when clients maintain state
 * related to an operation and need to determine whether an undo or redo will
 * cause any conflicts with their local state.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_s0_CcHe8Ed-C3vabgS4Hag" name="EXECUTE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s1IMYHe8Ed-C3vabgS4Hag">
                    <body>
	 * An operation is to be opened or closed for execution. (value is 1).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_s1R9YHe8Ed-C3vabgS4Hag" name="UNDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s1buYHe8Ed-C3vabgS4Hag">
                    <body>
	 * An operation is to be opened for undo. (value is 2).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_s1k4UHe8Ed-C3vabgS4Hag" name="REDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s1upUHe8Ed-C3vabgS4Hag">
                    <body>
	 * An operation is to be opened for redo. (value is 3).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_s2BkQHe8Ed-C3vabgS4Hag" name="GLOBAL_UNDO_CONTEXT" visibility="public" isLeaf="true" isStatic="true" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s2LVQHe8Ed-C3vabgS4Hag">
                    <body>
	 * An undo context that can be used to refer to the global undo history.
	 * This context is not intended to be assigned to operations. Instead, it is
	 * used for querying the history or performing an undo or redo on the entire
	 * history, regardless of each operation's undo contexts.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_s2UfMHe8Ed-C3vabgS4Hag" name="NOTHING_TO_REDO_STATUS" visibility="public" isLeaf="true" isStatic="true" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s2eQMHe8Ed-C3vabgS4Hag">
                    <body>
	 * An operation info status describing the condition that there is no
	 * available operation for redo.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_s2oBMHe8Ed-C3vabgS4Hag" name="NOTHING_TO_UNDO_STATUS" visibility="public" isLeaf="true" isStatic="true" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s2xLIHe8Ed-C3vabgS4Hag">
                    <body>
	 * An operation info status describing the condition that there is no
	 * available operation for undo.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_s3EtIHe8Ed-C3vabgS4Hag" name="OPERATION_INVALID_STATUS" visibility="public" isLeaf="true" isStatic="true" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_s3N3EHe8Ed-C3vabgS4Hag">
                    <body>
	 * An operation error status describing the condition that the operation
	 * available for execution, undo or redo is not in a valid state for the
	 * action to be performed.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_s3XoEHe8Ed-C3vabgS4Hag" name="add">
                  <ownedComment xmi:id="_s3XoEXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Add the specified operation to the history without executing it. The
	 * operation should have already been executed by the time it is added to
	 * the history. Listeners will be notified that the operation was added to
	 * the history (&lt;code>OPERATION_ADDED&lt;/code>).
	 * &lt;/p>
	 * 
	 * @param operation
	 *            the operation to be added to the history
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s3gyAHe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s3gyAXe8Ed-C3vabgS4Hag" name="addOperationApprover">
                  <ownedComment xmi:id="_s3gyAne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Add the specified approver to the list of operation approvers consulted
	 * by the operation history before an undo or redo is attempted.
	 * &lt;/p>
	 * 
	 * @param approver
	 *            the IOperationApprover to be added as an approver.the instance
	 *            to remove. Must not be &lt;code>null&lt;/code>. If an attempt is
	 *            made to register an instance which is already registered with
	 *            this instance, this method has no effect.
	 * 
	 * @see org.eclipse.core.commands.operations.IOperationApprover
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s3gyA3e8Ed-C3vabgS4Hag" name="approver" type="_akUGQXeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s3qjAHe8Ed-C3vabgS4Hag" name="addOperationHistoryListener">
                  <ownedComment xmi:id="_s3qjAXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Add the specified listener to the list of operation history listeners
	 * that are notified about changes in the history or operations that are
	 * executed, undone, or redone.
	 * &lt;/p>
	 * 
	 * @param listener
	 *            the IOperationHistoryListener to be added as a listener. Must
	 *            not be &lt;code>null&lt;/code>. If an attempt is made to register
	 *            an instance which is already registered with this instance,
	 *            this method has no effect.
	 * 
	 * @see org.eclipse.core.commands.operations.IOperationHistoryListener
	 * @see org.eclipse.core.commands.operations.OperationHistoryEvent
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s3qjAne8Ed-C3vabgS4Hag" name="listener" type="_OmnsAncwEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s30UAHe8Ed-C3vabgS4Hag" name="closeOperation">
                  <ownedComment xmi:id="_s30UAXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Close the current operation. If the operation has successfully completed,
	 * send listeners a &lt;code>DONE&lt;/code>, &lt;code>UNDONE&lt;/code>, or
	 * &lt;code>REDONE&lt;/code> notification, depending on the mode. Otherwise send
	 * an &lt;code>OPERATION_NOT_OK&lt;/code> notification. Add the operation to the
	 * history if specified and send an &lt;code>OPERATION_ADDED&lt;/code>
	 * notification.
	 * &lt;/p>
	 * &lt;p>
	 * Any operations that are executed and added after this operation is closed
	 * will no longer be considered part of this operation.
	 * &lt;/p>
	 * &lt;p>
	 * This method has no effect if the caller has not previously called
	 * {@link #openOperation}.
	 * &lt;/p>
	 * 
	 * @param operationOK
	 *            &lt;code>true&lt;/code> if the operation successfully completed.
	 *            Listeners should be notified with &lt;code>DONE&lt;/code>,
	 *            &lt;code>UNDONE&lt;/code>, or &lt;code>REDONE&lt;/code>.
	 *            &lt;code>false&lt;/code> if the operation did not successfully
	 *            complete. Listeners should be notified with
	 *            &lt;code>OPERATION_NOT_OK&lt;/code>.
	 * @param addToHistory
	 *            &lt;code>true&lt;/code> if the operation should be added to the
	 *            history, &lt;code>false&lt;/code> if it should not. If the
	 *            &lt;code>operationOK&lt;/code> parameter is &lt;code>false&lt;/code>,
	 *            the operation will never be added to the history.
	 * @param mode
	 *            the mode the operation was opened in. Can be one of
	 *            &lt;code>EXECUTE&lt;/code>, &lt;code>UNDO&lt;/code>, or
	 *            &lt;code>REDO&lt;/code>. This determines what notifications are
	 *            sent.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s30UAne8Ed-C3vabgS4Hag" name="operationOK" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s39d8He8Ed-C3vabgS4Hag" name="addToHistory" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s4HO8He8Ed-C3vabgS4Hag" name="mode" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s4HO8Xe8Ed-C3vabgS4Hag" name="canRedo">
                  <ownedComment xmi:id="_s4HO8ne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Return whether there is a valid redoable operation available in the given
	 * context.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context to be checked
	 * @return &lt;code>true&lt;/code> if there is a redoable operation,
	 *         &lt;code>false&lt;/code> otherwise.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s4Q_8He8Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s4Q_8Xe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s4aJ4He8Ed-C3vabgS4Hag" name="canUndo">
                  <ownedComment xmi:id="_s4aJ4Xe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Return whether there is a valid undoable operation available in the given
	 * context
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context to be checked
	 * @return &lt;code>true&lt;/code> if there is an undoable operation,
	 *         &lt;code>false&lt;/code> otherwise.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s4aJ4ne8Ed-C3vabgS4Hag" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s4tE0He8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s4tE0Xe8Ed-C3vabgS4Hag" name="dispose">
                  <ownedComment xmi:id="_s4tE0ne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Dispose of the specified context in the history. All operations that have
	 * only the given context will be disposed. References to the context in
	 * operations that have more than one context will also be removed. A
	 * history notification for the removal of each operation being disposed
	 * will be sent.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context to be disposed
	 * @param flushUndo
	 *            &lt;code>true&lt;/code> if the context should be flushed from the
	 *            undo history, &lt;code>false&lt;/code> if it should not
	 * @param flushRedo
	 *            &lt;code>true&lt;/code> if the context should be flushed from the
	 *            redo history, &lt;code>false&lt;/code> if it should not.
	 * @param flushContext
	 *            &lt;code>true&lt;/code> if the context is no longer in use and
	 *            references to it should be flushed.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s4210He8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s4210Xe8Ed-C3vabgS4Hag" name="flushUndo" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s5Am0He8Ed-C3vabgS4Hag" name="flushRedo" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s5JwwHe8Ed-C3vabgS4Hag" name="flushContext" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s5JwwXe8Ed-C3vabgS4Hag" name="execute">
                  <ownedComment xmi:id="_s5Jwwne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Execute the specified operation and add it to the operations history if
	 * successful. This method is used by clients who wish operation history
	 * listeners to receive notifications before and after the execution of the
	 * operation. Execution of the operation is subject to approval by any
	 * registered {@link IOperationApprover2}. If execution is approved,
	 * listeners will be notified before (&lt;code>ABOUT_TO_EXECUTE&lt;/code>) and
	 * after (&lt;code>DONE&lt;/code> or &lt;code>OPERATION_NOT_OK&lt;/code>).
	 * &lt;/p>
	 * &lt;p>
	 * If the operation successfully executes, an additional notification that
	 * the operation has been added to the history (&lt;code>OPERATION_ADDED&lt;/code>)
	 * will be sent.
	 * &lt;/p>
	 * 
	 * @param operation
	 *            the operation to be executed and then added to the history
	 * 
	 * @param monitor
	 *            the progress monitor to be used (or &lt;code>null&lt;/code>)
	 *            during the operation.
	 * 
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus indicating whether the execution succeeded.
	 * 
	 * &lt;p>
	 * The severity code in the returned status describes whether the operation
	 * succeeded and whether it was added to the history. &lt;code>OK&lt;/code>
	 * severity indicates that the execute operation was successful and that the
	 * operation has been added to the history. Listeners will receive
	 * notifications about the operation's success (&lt;code>DONE&lt;/code>) and
	 * about the operation being added to the history (&lt;code>OPERATION_ADDED&lt;/code>).
	 * &lt;/p>
	 * &lt;p>
	 * &lt;code>CANCEL&lt;/code> severity indicates that the user cancelled the
	 * operation and that the operation was not added to the history.
	 * &lt;code>ERROR&lt;/code> severity indicates that the operation did not
	 * successfully execute and that it was not added to the history. Any other
	 * severity code is not specifically interpreted by the history, and the
	 * operation will not be added to the history. For all severities other than
	 * &lt;code>OK&lt;/code>, listeners will receive the
	 * &lt;code>OPERATION_NOT_OK&lt;/code> notification instead of the
	 * &lt;code>DONE&lt;/code> notification if the execution was approved and
	 * attempted.
	 * &lt;/p>
	 * 
	 * @throws ExecutionException
	 *             if an exception occurred during execution.
	 * 
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s5ThwHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s5ThwXe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s5dSwHe8Ed-C3vabgS4Hag" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s5mcsHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s5mcsXe8Ed-C3vabgS4Hag" name="getLimit">
                  <ownedComment xmi:id="_s5mcsne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Return the limit on the undo and redo history for a particular context.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context whose limit is requested
	 * 
	 * @return the undo and redo history limit for the specified context.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s5wNsHe8Ed-C3vabgS4Hag" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s55XoHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s55XoXe8Ed-C3vabgS4Hag" name="getRedoHistory">
                  <ownedComment xmi:id="_s55Xone8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Get the array of operations in the redo history for a the specified undo
	 * context. The operations are in the order that they were added to the
	 * history, with the most recently undone operation appearing last in the
	 * array. This history is used LIFO (last in, first out) when successive
	 * &quot;Redo&quot; commands are invoked.
	 * 
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context for the redo
	 * @return the array of operations in the history
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s6DIoHe8Ed-C3vabgS4Hag" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s6M5oHe8Ed-C3vabgS4Hag" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s6DIoXe8Ed-C3vabgS4Hag"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_s6WDkHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s6WDkXe8Ed-C3vabgS4Hag" name="getRedoOperation">
                  <ownedComment xmi:id="_s6WDkne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Get the operation that will next be redone in the given undo context.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context for the redo
	 * @return the operation to be redone or &lt;code>null&lt;/code> if there is no
	 *         operation available. There is no guarantee that the returned
	 *         operation is valid for redo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s6f0kHe8Ed-C3vabgS4Hag" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s6f0kXe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s6plkHe8Ed-C3vabgS4Hag" name="getUndoHistory">
                  <ownedComment xmi:id="_s6plkXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Get the array of operations in the undo history for the specified undo
	 * context. The operations are in the order that they were added to the
	 * history, with the most recently added operation appearing last in the
	 * array. This history is used LIFO (last in, first out) when successive
	 * &quot;Undo&quot; commands are invoked.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context for the undo
	 * @return the array of operations in the history
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s6plkne8Ed-C3vabgS4Hag" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s68ggHe8Ed-C3vabgS4Hag" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s6yvgHe8Ed-C3vabgS4Hag"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_s7FqcHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s7PbcHe8Ed-C3vabgS4Hag" name="openOperation">
                  <ownedComment xmi:id="_s7PbcXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Open this composite operation and consider it an operation that contains
	 * other related operations. Consider all operations that are subsequently
	 * executed or added to be part of this operation. When an operation is
	 * opened, listeners will immediately receive a notification for the opened
	 * operation. The specific notification depends on the mode in which the
	 * operation is opened (&lt;code>ABOUT_TO_EXECUTE&lt;/code>,
	 * &lt;code>ABOUT_TO_UNDO&lt;/code>, &lt;code>ABOUT_TO_REDO&lt;/code>).
	 * Notifications for any other execute or add while this operation is open
	 * will not occur. Instead, those operations will be added to the current
	 * operation.
	 * &lt;/p>
	 * &lt;p>
	 * Note: This method is intended to be used by legacy undo frameworks that
	 * do not expect related undo operations to appear in the same undo history
	 * as the triggering undo operation. When an operation is open, any
	 * subsequent requests to execute, add, undo, or redo another operation will
	 * result in that operation being added to the open operation. Once the
	 * operation is closed, the composite will be considered an atomic
	 * operation. Clients should not modify the composite directly (by adding
	 * and removing children) while it is open.
	 * &lt;/p>
	 * &lt;p>
	 * When a composite is open, operations that are added to the history will
	 * be considered part of the open operation instead. Operations that are
	 * executed while a composite is open will first be executed and then added
	 * to the composite.
	 * &lt;/p>
	 * &lt;p>
	 * Open operations cannot be nested. If this method is called when a
	 * different operation is open, it is presumed to be an application coding
	 * error and this method will throw an IllegalStateException.
	 * &lt;/p>
	 * 
	 * @param operation
	 *            the composite operation to be considered as the parent for all
	 *            subsequent operations.
	 * @param mode
	 *            the mode the operation is executing in. Can be one of
	 *            &lt;code>EXECUTE&lt;/code>, &lt;code>UNDO&lt;/code>, or
	 *            &lt;code>REDO&lt;/code>. This determines what notifications are
	 *            sent.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s7Pbcne8Ed-C3vabgS4Hag" name="operation" type="_s7FqcXe8Ed-C3vabgS4Hag"/>
                  <ownedParameter xmi:id="_s7ZMcHe8Ed-C3vabgS4Hag" name="mode" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s7ZMcXe8Ed-C3vabgS4Hag" name="operationChanged">
                  <ownedComment xmi:id="_s7ZMcne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * The specified operation has changed in some way since it was added to the
	 * operation history. Notify listeners with an OPERATION_CHANGED event.
	 * &lt;/p>
	 * 
	 * @param operation
	 *            the operation that has changed.
	 * 
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s7iWYHe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s7iWYXe8Ed-C3vabgS4Hag" name="getUndoOperation">
                  <ownedComment xmi:id="_s7iWYne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Get the operation that will next be undone in the given undo context.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context for the undo
	 * @return the operation to be undone or &lt;code>null&lt;/code> if there is no
	 *         operation available. There is no guarantee that the available
	 *         operation is valid for the undo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s7sHYHe8Ed-C3vabgS4Hag" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s7sHYXe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s714YHe8Ed-C3vabgS4Hag" name="redo">
                  <ownedComment xmi:id="_s714YXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Redo the most recently undone operation in the given context. The redo of
	 * the operation is subject to approval by any registered
	 * {@link IOperationApprover} before it is attempted.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context to be redone
	 * @param monitor
	 *            the progress monitor to be used for the redo, or
	 *            &lt;code>null&lt;/code> if no progress monitor is provided.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * @return the IStatus indicating whether the redo succeeded.
	 * 
	 * &lt;p>
	 * The severity code in the returned status describes whether the operation
	 * succeeded and whether it remains in the history. &lt;code>OK&lt;/code>
	 * severity indicates that the redo operation was successful and (since
	 * release 3.2), that the operation will be placed in the undo history.
	 * (Prior to 3.2, a successfully redone operation would not be placed on the
	 * undo history if it could not be undone. Since 3.2, this is relaxed, and
	 * all successfully redone operations are placed in the undo history.)
	 * Listeners will receive the &lt;code>REDONE&lt;/code> notification.
	 * &lt;/p>
	 * &lt;p>
	 * Other severity codes (&lt;code>CANCEL&lt;/code>, &lt;code>ERROR&lt;/code>,
	 * &lt;code>INFO&lt;/code>, etc.) are not specifically interpreted by the
	 * history. The operation will remain in the history and the returned status
	 * is simply passed back to the caller. For all severities other than
	 * &lt;code>OK&lt;/code>, listeners will receive the
	 * &lt;code>OPERATION_NOT_OK&lt;/code> notification instead of the
	 * &lt;code>REDONE&lt;/code> notification if the redo was approved and
	 * attempted.
	 * &lt;/p>
	 * 
	 * @throws ExecutionException
	 *             if an exception occurred during redo.
	 * 
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s714Yne8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s7_CUHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s8IzUHe8Ed-C3vabgS4Hag" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s8R9QHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s8R9QXe8Ed-C3vabgS4Hag" name="redoOperation">
                  <ownedComment xmi:id="_s8R9Qne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Redo the specified operation. The redo of the operation is subject to
	 * approval by any registered {@link IOperationApprover} before it is
	 * attempted.
	 * &lt;/p>
	 * 
	 * @param operation
	 *            the operation to be redone
	 * @param monitor
	 *            the progress monitor to be used for the redo, or code>null&lt;/code>
	 *            if no progress monitor is provided
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not &lt;code>null&lt;/code>,
	 *            it should minimally contain an adapter for the
	 *            org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus indicating whether the redo succeeded.
	 * 
	 * &lt;p>
	 * The severity code in the returned status describes whether the operation
	 * succeeded and whether it remains in the history. &lt;code>OK&lt;/code>
	 * severity indicates that the redo operation was successful, and (since
	 * release 3.2), that the operation will be placed in the undo history.
	 * (Prior to 3.2, a successfully redone operation would not be placed on the
	 * undo history if it could not be undone. Since 3.2, this is relaxed, and
	 * all successfully redone operations are placed in the undo history.)
	 * Listeners will receive the &lt;code>REDONE&lt;/code> notification.
	 * &lt;/p>
	 * &lt;p>
	 * Other severity codes (&lt;code>CANCEL&lt;/code>, &lt;code>ERROR&lt;/code>,
	 * &lt;code>INFO&lt;/code>, etc.) are not specifically interpreted by the
	 * history. The operation will remain in the history and the returned status
	 * is simply passed back to the caller. For all severities other than &lt;code>OK&lt;/code>,
	 * listeners will receive the &lt;code>OPERATION_NOT_OK&lt;/code> notification
	 * instead of the &lt;code>REDONE&lt;/code> notification if the redo was
	 * approved and attempted.
	 * &lt;/p>
	 * 
	 * @throws ExecutionException
	 *             if an exception occurred during redo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s8buQHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s8buQXe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s8lfQHe8Ed-C3vabgS4Hag" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s8upMHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s8upMXe8Ed-C3vabgS4Hag" name="removeOperationApprover">
                  <ownedComment xmi:id="_s8upMne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Remove the specified operation approver from the list of operation
	 * approvers that are consulted before an operation is undone or redone.
	 * &lt;/p>
	 * 
	 * @param approver
	 *            the IOperationApprover to be removed. Must not be
	 *            &lt;code>null&lt;/code>. If an attempt is made to remove an
	 *            instance which is not already registered with this instance,
	 *            this method has no effect.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s9LVIHe8Ed-C3vabgS4Hag" name="approver" type="_akUGQXeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s9LVIXe8Ed-C3vabgS4Hag" name="removeOperationHistoryListener">
                  <ownedComment xmi:id="_s9LVIne8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Remove the specified listener from the list of operation history
	 * listeners.
	 * &lt;/p>
	 * 
	 * @param listener
	 *            The IOperationHistoryListener to be removed. Must not be
	 *            &lt;code>null&lt;/code>. If an attempt is made to remove an
	 *            instance which is not already registered with this instance,
	 *            this method has no effect.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s9LVI3e8Ed-C3vabgS4Hag" name="listener" type="_OmnsAncwEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s9LVJHe8Ed-C3vabgS4Hag" name="replaceOperation">
                  <ownedComment xmi:id="_s9LVJXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Replace the specified operation in the undo or redo history with the
	 * provided list of replacements. This protocol is typically used when a
	 * composite is broken up into its atomic parts. The replacements will be
	 * inserted so that the first replacement will be the first of the
	 * replacements to be undone or redone. Listeners will be notified about the
	 * removal of the replaced element and the addition of each replacement.
	 * &lt;/p>
	 * 
	 * @param operation
	 *            The IUndoableOperation to be replaced
	 * @param replacements
	 *            the array of IUndoableOperation to replace the first operation
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s9VGIHe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s9eQEHe8Ed-C3vabgS4Hag" name="replacements" type="_QJNf2HOxEd-nKvj-XTCBkg">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9oBEXe8Ed-C3vabgS4Hag" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9oBEHe8Ed-C3vabgS4Hag"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_s9xyEHe8Ed-C3vabgS4Hag" name="setLimit">
                  <ownedComment xmi:id="_s9xyEXe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Set the limit on the undo and redo history for a particular context.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context whose limit is being set.
	 * 
	 * @param limit
	 *            the maximum number of operations that should be kept in the
	 *            undo or redo history for the specified context. Must not be
	 *            negative.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s9xyEne8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s968AHe8Ed-C3vabgS4Hag" name="limit" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s968AXe8Ed-C3vabgS4Hag" name="undo">
                  <ownedComment xmi:id="_s-EtAHe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Undo the most recently executed operation in the given context. The undo
	 * of the operation is subject to approval by any registered
	 * {@link IOperationApprover} before it is attempted.
	 * &lt;/p>
	 * 
	 * @param context
	 *            the context to be undone
	 * @param monitor
	 *            the progress monitor to be used for the undo, or
	 *            &lt;code>null&lt;/code> if no progress monitor is provided.
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus indicating whether the undo succeeded.
	 * 
	 * &lt;p>
	 * The severity code in the returned status describes whether the operation
	 * succeeded and whether it remains in the history. &lt;code>OK&lt;/code>
	 * severity indicates that the undo operation was successful, and (since
	 * release 3.2), that the operation will be placed on the redo history.
	 * (Prior to 3.2, a successfully undone operation would not be placed on the
	 * redo history if it could not be redone. Since 3.2, this is relaxed, and
	 * all successfully undone operations are placed in the redo history.)
	 * Listeners will receive the &lt;code>UNDONE&lt;/code> notification.
	 * &lt;/p>
	 * &lt;p>
	 * Other severity codes (&lt;code>CANCEL&lt;/code>, &lt;code>ERROR&lt;/code>,
	 * &lt;code>INFO&lt;/code>, etc.) are not specifically interpreted by the
	 * history. The operation will remain in the history and the returned status
	 * is simply passed back to the caller. For all severities other than
	 * &lt;code>OK&lt;/code>, listeners will receive the
	 * &lt;code>OPERATION_NOT_OK&lt;/code> notification instead of the
	 * &lt;code>UNDONE&lt;/code> notification if the undo was approved and
	 * attempted.
	 * &lt;/p>
	 * 
	 * @throws ExecutionException
	 *             if an exception occurred during undo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s-EtAXe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s-OeAHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s-OeAXe8Ed-C3vabgS4Hag" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s-Xn8He8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_s-hY8He8Ed-C3vabgS4Hag" name="undoOperation">
                  <ownedComment xmi:id="_s-hY8Xe8Ed-C3vabgS4Hag">
                    <body>
	 * &lt;p>
	 * Undo the specified operation. The undo of the operation is subject to
	 * approval by any registered {@link IOperationApprover} before it is
	 * attempted.
	 * &lt;/p>
	 * 
	 * @param operation
	 *            the operation to be undone
	 * @param monitor
	 *            the progress monitor to be used for the undo, or
	 *            &lt;code>null&lt;/code> if no progress monitor is provided
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus indicating whether the undo succeeded.
	 * 
	 * &lt;p>
	 * The severity code in the returned status describes whether the operation
	 * succeeded and whether it remains in the history. &lt;code>OK&lt;/code>
	 * severity indicates that the undo operation was successful, and (since
	 * release 3.2), that the operation will be placed on the redo history.
	 * (Prior to 3.2, a successfully undone operation would not be placed on the
	 * redo history if it could not be redone. Since 3.2, this is relaxed, and
	 * all successfully undone operations are placed in the redo history.)
	 * Listeners will receive the &lt;code>UNDONE&lt;/code> notification.
	 * &lt;/p>
	 * &lt;p>
	 * Other severity codes (&lt;code>CANCEL&lt;/code>, &lt;code>ERROR&lt;/code>,
	 * &lt;code>INFO&lt;/code>, etc.) are not specifically interpreted by the
	 * history. The operation will remain in the history and the returned status
	 * is simply passed back to the caller. For all severities other than
	 * &lt;code>OK&lt;/code>, listeners will receive the
	 * &lt;code>OPERATION_NOT_OK&lt;/code> notification instead of the
	 * &lt;code>UNDONE&lt;/code> notification if the undo was approved and
	 * attempted.
	 * &lt;/p>
	 * 
	 * @throws ExecutionException
	 *             if an exception occurred during undo.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s-hY8ne8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_s-qi4He8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s-0T4He8Ed-C3vabgS4Hag" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_s-0T4Xe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_OmnsAncwEd-96YWU42lBhw" name="IOperationHistoryListener">
                <ownedComment xmi:id="_s_Q_0He8Ed-C3vabgS4Hag">
                  <body>
 * &lt;p>
 * This interface is used to listen to notifications from an IOperationHistory.
 * The supplied OperationHistoryEvent describes the particular notification.
 * &lt;/p>
 * &lt;p>
 * Operation history listeners must be prepared to receive notifications from a
 * background thread. Any UI access occurring inside the implementation must be
 * properly synchronized using the techniques specified by the client's widget
 * library.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_s_aw0He8Ed-C3vabgS4Hag" name="historyNotification">
                  <ownedComment xmi:id="_s_aw0Xe8Ed-C3vabgS4Hag">
                    <body>
	 * Something of note has happened in the IOperationHistory. Listeners should
	 * check the supplied event for details.
	 * 
	 * @param event 
	 *            the OperationHistoryEvent that describes the particular
	 *            notification.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_s_aw0ne8Ed-C3vabgS4Hag" name="event" type="_Omw18XcwEd-96YWU42lBhw"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_Omw18XcwEd-96YWU42lBhw" name="OperationHistoryEvent" isLeaf="true">
                <ownedComment xmi:id="_tEe3AHe8Ed-C3vabgS4Hag">
                  <body>
 * &lt;p>
 * OperationHistoryEvent is used to communicate changes that occur in a
 * DefaultOperationHistory, including the addition or removal of operations, and
 * the execution, undo, and redo of operations.
 * &lt;/p>
 * &lt;p>
 * Operation history listeners must be prepared to receive notifications from a
 * background thread. Any UI access occurring inside the implementation must be
 * properly synchronized using the techniques specified by the client's widget
 * library.
 * &lt;/p>
 * 
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_tEoA8He8Ed-C3vabgS4Hag" name="ABOUT_TO_EXECUTE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tExx8He8Ed-C3vabgS4Hag">
                    <body>
	 * ABOUT_TO_EXECUTE indicates that an operation is about to execute.
	 * Listeners should prepare for the execution as appropriate. Listeners will
	 * receive a DONE notification if the operation is successful, or an
	 * OPERATION_NOT_OK notification if the execution is cancelled or otherwise
	 * fails. This notification is only received for those operations executed
	 * by the operation history. Operations that are added to the history after
	 * execution do not trigger these notifications.
	 * 
	 * If the operation successfully executes, clients will also receive a
	 * notification that it has been added to the history.
	 * 
	 * (value is 1).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tE7i8He8Ed-C3vabgS4Hag" name="ABOUT_TO_REDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tFOd4He8Ed-C3vabgS4Hag">
                    <body>
	 * ABOUT_TO_REDO indicates that an operation is about to be redone.
	 * Listeners should prepare for the redo as appropriate. Listeners will
	 * receive a REDONE notification if the operation is successful, or an
	 * OPERATION_NOT_OK notification if the redo is cancelled or otherwise
	 * fails.
	 * 
	 * (value is 2).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tFYO4He8Ed-C3vabgS4Hag" name="ABOUT_TO_UNDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tFhY0He8Ed-C3vabgS4Hag">
                    <body>
	 * ABOUT_TO_UNDO indicates that an operation is about to be undone.
	 * Listeners should prepare for the undo as appropriate. Listeners will
	 * receive an UNDONE notification if the operation is successful, or an
	 * OPERATION_NOT_OK notification if the undo is cancelled or otherwise
	 * fails.
	 * 
	 * (value is 3).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tFrJ0He8Ed-C3vabgS4Hag" name="DONE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tF0TwHe8Ed-C3vabgS4Hag">
                    <body>
	 * DONE indicates that an operation has been executed. Listeners can take
	 * appropriate action, such as revealing any relevant state in the UI. This
	 * notification is only received for those operations executed by the
	 * operation history. Operations that are added to the history after
	 * execution do not trigger this notification.
	 * 
	 * Clients will also receive a notification that the operation has been
	 * added to the history.
	 * 
	 * (value is 4).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tGH1wHe8Ed-C3vabgS4Hag" name="OPERATION_ADDED" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tGQ_sHe8Ed-C3vabgS4Hag">
                    <body>
	 * OPERATION_ADDED indicates that an operation was added to the history.
	 * Listeners can use this notification to add their undo context to a new
	 * operation as appropriate or otherwise record the operation.
	 * 
	 * (value is 5).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tGawsHe8Ed-C3vabgS4Hag" name="OPERATION_CHANGED" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tGkhsHe8Ed-C3vabgS4Hag">
                    <body>
	 * OPERATION_CHANGED indicates that an operation has changed in some way
	 * since it was added to the operations history.
	 * 
	 * (value is 6).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tGtroHe8Ed-C3vabgS4Hag" name="OPERATION_NOT_OK" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tG3coHe8Ed-C3vabgS4Hag">
                    <body>
	 * OPERATION_NOT_OK indicates that an operation was attempted and not
	 * successful. Listeners typically use this when they have prepared for an
	 * execute, undo, or redo, and need to know that the operation did not
	 * successfully complete. For example, listeners that turn redraw off before
	 * an operation is undone would turn redraw on when the operation completes,
	 * or when this notification is received, since there will be no
	 * notification of the completion.
	 * 
	 * (value is 7).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tHAmkHe8Ed-C3vabgS4Hag" name="OPERATION_REMOVED" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tHKXkHe8Ed-C3vabgS4Hag">
                    <body>
	 * OPERATION_REMOVED indicates an operation was removed from the history.
	 * Listeners typically remove any record of the operation that they may have
	 * kept in their own state. The operation has been disposed by the time
	 * listeners receive this notification.
	 * 
	 * (value is 8).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tHdSgHe8Ed-C3vabgS4Hag" name="REDONE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tHnDgHe8Ed-C3vabgS4Hag">
                    <body>
	 * REDONE indicates that an operation was redone. Listeners can take
	 * appropriate action, such as revealing any relevant state in the UI.
	 * 
	 * (value is 9).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tHw0gHe8Ed-C3vabgS4Hag" name="UNDONE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_tH5-cHe8Ed-C3vabgS4Hag">
                    <body>
	 * UNDONE indicates that an operation was undone. Listeners can take
	 * appropriate action, such as revealing any relevant state in the UI.
	 * 
	 * (value is 10).
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_tIM5YHe8Ed-C3vabgS4Hag" name="code" visibility="private" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_tIWqYHe8Ed-C3vabgS4Hag" name="history" visibility="private" type="_VGoR0HcvEd-96YWU42lBhw" isUnique="false"/>
                <ownedAttribute xmi:id="_tIplUHe8Ed-C3vabgS4Hag" name="operation" visibility="private" type="_QJNf2HOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_tIzWUHe8Ed-C3vabgS4Hag" name="status" visibility="private" type="_fXmVnnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedOperation xmi:id="_tJGRQHe8Ed-C3vabgS4Hag" name="getEventType" visibility="public">
                  <ownedComment xmi:id="_tJGRQXe8Ed-C3vabgS4Hag">
                    <body>
	 * Return the type of event that is occurring.
	 * 
	 * @return the type code indicating the type of event.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tJGRQne8Ed-C3vabgS4Hag" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_tJQCQHe8Ed-C3vabgS4Hag" name="getHistory" visibility="public">
                  <ownedComment xmi:id="_tJQCQXe8Ed-C3vabgS4Hag">
                    <body>
	 * Return the operation history that triggered this event.
	 * 
	 * @return the operation history
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tJQCQne8Ed-C3vabgS4Hag" type="_VGoR0HcvEd-96YWU42lBhw" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_tJZMMHe8Ed-C3vabgS4Hag" name="getOperation" visibility="public">
                  <ownedComment xmi:id="_tJZMMXe8Ed-C3vabgS4Hag">
                    <body>
	 * Return the operation associated with this event.
	 * 
	 * @return the operation
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tJi9MHe8Ed-C3vabgS4Hag" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
                <ownedOperation xmi:id="_tJsuMHe8Ed-C3vabgS4Hag" name="getStatus" visibility="public">
                  <ownedComment xmi:id="_tJsuMXe8Ed-C3vabgS4Hag">
                    <body>
	 * Return the status associated with this event.
	 * 
	 * @return the status associated with this event. The status may be null.
	 * 
	 * @since 3.2
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tJsuMne8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Class" xmi:id="_abhWoHeiEd-udeJ8hQXrBA" name="LinearUndoViolationDetector" clientDependency="_tBM5gXe8Ed-C3vabgS4Hag" isAbstract="true">
                <ownedComment xmi:id="_tBM5gHe8Ed-C3vabgS4Hag">
                  <body>
 * &lt;p>
 * An abstract class for detecting violations in a strict linear undo/redo
 * model. Once a violation is detected, subclasses implement the specific
 * behavior for indicating whether or not the undo/redo should proceed.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_tBWqgHe8Ed-C3vabgS4Hag" name="allowLinearRedoViolation" visibility="protected" isAbstract="true">
                  <ownedComment xmi:id="_tBWqgXe8Ed-C3vabgS4Hag">
                    <body>
	 * Return a status indicating whether a linear redo violation is allowable.
	 * A linear redo violation is defined as a request to redo a particular
	 * operation even if it is not the most recently added operation to the redo
	 * history.
	 * 
	 * @param operation
	 *            the operation for which a linear redo violation has been
	 *            detected.
	 * @param context
	 *            the undo context in which the linear redo violation exists
	 * @param history
	 *            the operation history containing the operation
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus describing whether the redo violation is allowed. The
	 *         redo will not proceed if the status severity is not
	 *         &lt;code>OK&lt;/code>, and the caller requesting the redo will be
	 *         returned the status that caused the rejection. Specific status
	 *         severities will not be interpreted by the history.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tBf0cHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_tBplcHe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_tBplcXe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_tBzWcHe8Ed-C3vabgS4Hag" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_tB8gYHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_tB8gYXe8Ed-C3vabgS4Hag" name="allowLinearUndoViolation" visibility="protected" isAbstract="true">
                  <ownedComment xmi:id="_tB8gYne8Ed-C3vabgS4Hag">
                    <body>
	 * Return a status indicating whether a linear undo violation is allowable.
	 * A linear undo violation is defined as a request to undo a particular
	 * operation even if it is not the most recently added operation to the undo
	 * history.
	 * 
	 * @param operation
	 *            the operation for which a linear undo violation has been
	 *            detected.
	 * @param context
	 *            the undo context in which the linear undo violation exists
	 * @param history
	 *            the operation history containing the operation
	 * @param info
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class.
	 * 
	 * @return the IStatus describing whether the undo violation is allowed. The
	 *         undo will not proceed if the status severity is not
	 *         &lt;code>OK&lt;/code>, and the caller requesting the undo will be
	 *         returned the status that caused the rejection. Specific status
	 *         severities will not be interpreted by the history.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_tCPbUHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_tCPbUXe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_tCZMUHe8Ed-C3vabgS4Hag" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_tCi9UHe8Ed-C3vabgS4Hag" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_tCi9UXe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_tCsHQHe8Ed-C3vabgS4Hag" name="proceedRedoing" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_tC14QHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_tC14QXe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_tC_pQHe8Ed-C3vabgS4Hag" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_tDIzMHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_tDIzMXe8Ed-C3vabgS4Hag" name="proceedUndoing" visibility="public" isLeaf="true">
                  <ownedParameter xmi:id="_tDSkMHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_tDbuIHe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_tDlfIHe8Ed-C3vabgS4Hag" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_tDvQIHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_akUGQXeiEd-udeJ8hQXrBA" name="IOperationApprover">
                <ownedComment xmi:id="_szDIwHe8Ed-C3vabgS4Hag">
                  <body>
 * &lt;p>
 * IOperationApprover defines an interface for approving the undo or redo of a
 * particular operation within an operation history. Operations that are
 * candidates for undo or redo have already been validated against their current
 * state and according to the rules of the history.
 * &lt;/p>
 * &lt;p>
 * By the time an IOperationApprover is consulted, the undo has already been
 * requested. Approvers should return an &lt;code>IStatus&lt;/code> object with
 * severity &lt;code>OK&lt;/code> if the operation should proceed, and any other
 * severity if it should not. When an operation is not approved, it is expected
 * that the object not allowing the operation has already consulted the user if
 * necessary or otherwise provided any necessary information to the user about
 * the fact that the operation is not approved.
 * &lt;/p>
 * &lt;p>
 * Operation approvers must be prepared to receive the approval messages from a
 * background thread. Any UI access occurring inside the implementation must be
 * properly synchronized using the techniques specified by the client's widget
 * library.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedOperation xmi:id="_szDIwXe8Ed-C3vabgS4Hag" name="proceedRedoing">
                  <ownedComment xmi:id="_szDIwne8Ed-C3vabgS4Hag">
                    <body>
	 * Return a status indicating whether the specified operation should be
	 * redone. Any status that does not have severity &lt;code>IStatus.OK&lt;/code>
	 * will not be approved. Implementers should not assume that the redo will
	 * be performed when the status is &lt;code>OK&lt;/code>, since other operation
	 * approvers may veto the redo.
	 * 
	 * @param operation 
	 *            the operation to be redone
	 * @param history 
	 *            the history redoing the operation
	 * @param info 
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class. Even if UI
	 *            information is provided, the implementation of this method
	 *            must be prepared for being called from a background thread.
	 *            Any UI access must be properly synchronized using the
	 *            techniques specified by the client's widget library.
	 * @return the IStatus describing whether the operation is approved. The
	 *         redo will not proceed if the status severity is not
	 *         &lt;code>OK&lt;/code>, and the caller requesting the redo will be
	 *         returned the status that caused the rejection. Any other status
	 *         severities will not be interpreted by the history.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_szDIw3e8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_szMSsHe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_szWDsHe8Ed-C3vabgS4Hag" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_szf0sHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_szf0sXe8Ed-C3vabgS4Hag" name="proceedUndoing">
                  <ownedComment xmi:id="_szf0sne8Ed-C3vabgS4Hag">
                    <body>
	 * Return a status indicating whether the specified operation should be
	 * undone. Any status that does not have severity &lt;code>IStatus.OK&lt;/code>
	 * will not be approved. Implementers should not assume that the undo will
	 * be performed when the status is &lt;code>OK&lt;/code>, since other operation
	 * approvers can veto the undo.
	 * 
	 * @param operation 
	 *            the operation to be undone
	 * @param history 
	 *            the history undoing the operation
	 * @param info 
	 *            the IAdaptable (or &lt;code>null&lt;/code>) provided by the
	 *            caller in order to supply UI information for prompting the
	 *            user if necessary. When this parameter is not
	 *            &lt;code>null&lt;/code>, it should minimally contain an adapter
	 *            for the org.eclipse.swt.widgets.Shell.class. Even if UI
	 *            information is provided, the implementation of this method
	 *            must be prepared for being called from a background thread.
	 *            Any UI access must be properly synchronized using the
	 *            techniques specified by the client's widget library.
	 * @return the IStatus describing whether the operation is approved. The
	 *         undo will not proceed if the status severity is not
	 *         &lt;code>OK&lt;/code>, and the caller requesting the undo will be
	 *         returned the status that caused the rejection. Any other status
	 *         severities will not be interpreted by the history.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_szo-oHe8Ed-C3vabgS4Hag" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_szo-oXe8Ed-C3vabgS4Hag" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_szyvoHe8Ed-C3vabgS4Hag" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                  <ownedParameter xmi:id="_sz75kHe8Ed-C3vabgS4Hag" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Interface" xmi:id="_s7FqcXe8Ed-C3vabgS4Hag" name="ICompositeOperation"/>
              <packagedElement xmi:type="uml:Realization" xmi:id="_tBM5gXe8Ed-C3vabgS4Hag" name="LinearUndoViolationDetector extends IOperationApprover" supplier="_akUGQXeiEd-udeJ8hQXrBA" client="_abhWoHeiEd-udeJ8hQXrBA"/>
              <packagedElement xmi:type="uml:Class" xmi:id="_NxFSIHlUEd-G1sP92iSIng" name="DefaultOperationHistory" clientDependency="_NxYNEHlUEd-G1sP92iSIng" isLeaf="true">
                <ownedComment xmi:id="_NxOcEHlUEd-G1sP92iSIng">
                  <body>
 * &lt;p>
 * A base implementation of IOperationHistory that implements a linear undo and
 * redo model . The most recently added operation is available for undo, and the
 * most recently undone operation is available for redo.
 * &lt;/p>
 * &lt;p>
 * If the operation eligible for undo is not in a state where it can be undone,
 * then no undo is available. No other operations are considered. Likewise, if
 * the operation available for redo cannot be redone, then no redo is available.
 * &lt;/p>
 * &lt;p>
 * Implementations for the direct undo and redo of a specified operation are
 * available. If a strict linear undo is to be enforced, than an
 * IOperationApprover should be installed that prevents undo and redo of any
 * operation that is not the most recently undone or redone operation in all of
 * its undo contexts.
 * &lt;/p>
 * &lt;p>
 * The data structures used by the DefaultOperationHistory are synchronized, and
 * entry points that modify the undo and redo history concurrently are also
 * synchronized. This means that the DefaultOperationHistory is relatively
 * &quot;thread-friendly&quot; in its implementation. Outbound notifications or operation
 * approval requests will occur on the thread that initiated the request.
 * Clients may use DefaultOperationHistory API from any thread; however,
 * listeners or operation approvers that receive notifications from the
 * DefaultOperationHistory must be prepared to receive these notifications from
 * a background thread. Any UI access occurring inside these notifications must
 * be properly synchronized using the techniques specified by the client's
 * widget library.
 * &lt;/p>
 * 
 * &lt;p>
 * This implementation is not intended to be subclassed.
 * &lt;/p>
 * 
 * @see org.eclipse.core.commands.operations.IOperationHistory
 * @see org.eclipse.core.commands.operations.IOperationApprover
 * 
 * @since 3.1
 </body>
                </ownedComment>
                <ownedAttribute xmi:id="_Nyau4HlUEd-G1sP92iSIng" name="DEBUG_OPERATION_HISTORY_NOTIFICATION" visibility="public" isStatic="true" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_Nykf4HlUEd-G1sP92iSIng">
                    <body>
	 * This flag can be set to &lt;code>true&lt;/code> if the history should print
	 * information to &lt;code>System.out&lt;/code> whenever notifications about
	 * changes to the history occur. This flag should be used for debug purposes
	 * only.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_Nytp0HlUEd-G1sP92iSIng" name="DEBUG_OPERATION_HISTORY_UNEXPECTED" visibility="public" isStatic="true" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_NzBL0HlUEd-G1sP92iSIng">
                    <body>
	 * This flag can be set to &lt;code>true&lt;/code> if the history should print
	 * information to &lt;code>System.out&lt;/code> whenever an unexpected condition
	 * arises. This flag should be used for debug purposes only.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_NzKVwHlUEd-G1sP92iSIng" name="DEBUG_OPERATION_HISTORY_DISPOSE" visibility="public" isStatic="true" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_NzUGwHlUEd-G1sP92iSIng">
                    <body>
	 * This flag can be set to &lt;code>true&lt;/code> if the history should print
	 * information to &lt;code>System.out&lt;/code> whenever an undo context is
	 * disposed. This flag should be used for debug purposes only.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_NznBsHlUEd-G1sP92iSIng" name="DEBUG_OPERATION_HISTORY_OPENOPERATION" visibility="public" isStatic="true" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_Nz58oHlUEd-G1sP92iSIng">
                    <body>
	 * This flag can be set to &lt;code>true&lt;/code> if the history should print
	 * information to &lt;code>System.out&lt;/code> during the open/close sequence.
	 * This flag should be used for debug purposes only.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N0DtoHlUEd-G1sP92iSIng" name="DEBUG_OPERATION_HISTORY_APPROVAL" visibility="public" isStatic="true" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_N0NeoHlUEd-G1sP92iSIng">
                    <body>
	 * This flag can be set to &lt;code>true&lt;/code> if the history should print
	 * information to &lt;code>System.out&lt;/code> whenever an operation is not
	 * approved. This flag should be used for debug purposes only.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N0gZkHlUEd-G1sP92iSIng" name="DEFAULT_LIMIT" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
                <ownedAttribute xmi:id="_N09FgHlUEd-G1sP92iSIng" name="approvers" type="_N0zUgHlUEd-G1sP92iSIng" isUnique="false">
                  <ownedComment xmi:id="_N1GPcHlUEd-G1sP92iSIng">
                    <body>
	 * the list of {@link IOperationApprover}s
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N1QAcHlUEd-G1sP92iSIng" name="limits" visibility="private" type="_5gGFc3PSEd-NtftfyF3YZw" isUnique="false">
                  <ownedComment xmi:id="_N1i7YHlUEd-G1sP92iSIng">
                    <body>
	 * a map of undo limits per context
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N1ssYHlUEd-G1sP92iSIng" name="listeners" type="_N0zUgHlUEd-G1sP92iSIng" isUnique="false">
                  <ownedComment xmi:id="_N12dYHlUEd-G1sP92iSIng">
                    <body>
	 * the list of {@link IOperationHistoryListener}s
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N1_nUHlUEd-G1sP92iSIng" name="redoList" visibility="private" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_N2SiQHlUEd-G1sP92iSIng">
                    <body>
	 * the list of operations available for redo, LIFO
	 </body>
                  </ownedComment>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N2mEQHlUEd-G1sP92iSIng" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N2cTQHlUEd-G1sP92iSIng"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N2vOMHlUEd-G1sP92iSIng" name="undoList" visibility="private" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_N24_MHlUEd-G1sP92iSIng">
                    <body>
	 * the list of operations available for undo, LIFO
	 </body>
                  </ownedComment>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N3L6IHlUEd-G1sP92iSIng" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N3CwMHlUEd-G1sP92iSIng"/>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N3VrIHlUEd-G1sP92iSIng" name="undoRedoHistoryLock" isLeaf="true" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_N3e1EHlUEd-G1sP92iSIng">
                    <body>
	 * a lock that is used to synchronize access between the undo and redo
	 * history
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N3omEHlUEd-G1sP92iSIng" name="openComposite" visibility="private" type="_s7FqcXe8Ed-C3vabgS4Hag" isUnique="false">
                  <ownedComment xmi:id="_N37hAHlUEd-G1sP92iSIng">
                    <body>
	 * An operation that is &quot;absorbing&quot; all other operations while it is open.
	 * When this is not null, other operations added or executed are added to
	 * this composite.
	 * 
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedAttribute xmi:id="_N4FSAHlUEd-G1sP92iSIng" name="openCompositeLock" isLeaf="true" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false">
                  <ownedComment xmi:id="_N4PDAHlUEd-G1sP92iSIng">
                    <body>
	 * a lock that is used to synchronize access to the open composite.
	 </body>
                  </ownedComment>
                </ownedAttribute>
                <ownedOperation xmi:id="_N4-p4HlUEd-G1sP92iSIng" name="add" visibility="public">
                  <ownedParameter xmi:id="_N5Hz0HlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N5Rk0HlUEd-G1sP92iSIng" name="addOperationApprover" visibility="public">
                  <ownedComment xmi:id="_N5Rk0XlUEd-G1sP92iSIng">
                    <body>
	 * &lt;p>
	 * Add the specified approver to the list of operation approvers consulted
	 * by the operation history before an undo or redo is allowed to proceed.
	 * This method has no effect if the instance being added is already in the
	 * list.
	 * &lt;/p>
	 * &lt;p>
	 * Operation approvers must be prepared to receive these the operation
	 * approval messages from a background thread. Any UI access occurring
	 * inside the implementation must be properly synchronized using the
	 * techniques specified by the client's widget library.
	 * &lt;/p>
	 * 
	 * @param approver
	 *            the IOperationApprover to be added as an approver.
	 * 
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_N5bV0HlUEd-G1sP92iSIng" name="approver" type="_akUGQXeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N5kfwHlUEd-G1sP92iSIng" name="addOperationHistoryListener" visibility="public">
                  <ownedComment xmi:id="_N5kfwXlUEd-G1sP92iSIng">
                    <body>
	 * &lt;p>
	 * Add the specified listener to the list of operation history listeners
	 * that are notified about changes in the history or operations that are
	 * executed, undone, or redone. This method has no effect if the instance
	 * being added is already in the list.
	 * &lt;/p>
	 * &lt;p>
	 * Operation history listeners must be prepared to receive notifications
	 * from a background thread. Any UI access occurring inside the
	 * implementation must be properly synchronized using the techniques
	 * specified by the client's widget library.
	 * &lt;/p>
	 * 
	 * @param listener
	 *            the IOperationHistoryListener to be added as a listener.
	 * 
	 * @see org.eclipse.core.commands.operations.IOperationHistoryListener
	 * @see org.eclipse.core.commands.operations.OperationHistoryEvent
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_N5kfwnlUEd-G1sP92iSIng" name="listener" type="_OmnsAncwEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N5uQwHlUEd-G1sP92iSIng" name="canRedo" visibility="public">
                  <ownedParameter xmi:id="_N53asHlUEd-G1sP92iSIng" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N6BLsHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N6K8sHlUEd-G1sP92iSIng" name="canUndo" visibility="public">
                  <ownedParameter xmi:id="_N6K8sXlUEd-G1sP92iSIng" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N6UGoHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N6d3oHlUEd-G1sP92iSIng" name="checkRedoLimit" visibility="private">
                  <ownedComment xmi:id="_N6d3oXlUEd-G1sP92iSIng">
                    <body>
	 * Check the redo limit before adding an operation. In theory the redo limit
	 * should never be reached, because the redo items are transferred from the
	 * undo history, which has the same limit. The redo history is cleared
	 * whenever a new operation is added. We check for completeness since
	 * implementations may change over time.
	 * 
	 * Return a boolean indicating whether the redo should proceed.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_N6nooHlUEd-G1sP92iSIng" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N6wykHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N66jkHlUEd-G1sP92iSIng" name="checkUndoLimit" visibility="private">
                  <ownedComment xmi:id="_N66jkXlUEd-G1sP92iSIng">
                    <body>
	 * Check the undo limit before adding an operation. Return a boolean
	 * indicating whether the undo should proceed.
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_N7DtgHlUEd-G1sP92iSIng" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N7NegHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N7XPgHlUEd-G1sP92iSIng" name="dispose" visibility="public">
                  <ownedParameter xmi:id="_N7XPgXlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N7gZcHlUEd-G1sP92iSIng" name="flushUndo" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N7qKcHlUEd-G1sP92iSIng" name="flushRedo" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N7z7cHlUEd-G1sP92iSIng" name="flushContext" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N79FYHlUEd-G1sP92iSIng" name="doRedo" visibility="private">
                  <ownedComment xmi:id="_N79FYXlUEd-G1sP92iSIng">
                    <body>
	 * Perform the redo. All validity checks have already occurred.
	 * 
	 * @param monitor
	 * @param operation
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_N8G2YHlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N8QAUHlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N8ZxUHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N8ZxUXlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N8jiUHlUEd-G1sP92iSIng" name="doUndo" visibility="private">
                  <ownedComment xmi:id="_N8jiUXlUEd-G1sP92iSIng">
                    <body>
	 * Perform the undo. All validity checks have already occurred.
	 * 
	 * @param monitor
	 * @param operation
	 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_N8ssQHlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N82dQHlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N9AOQHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N9JYMHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N9TJMHlUEd-G1sP92iSIng" name="execute" visibility="public">
                  <ownedParameter xmi:id="_N9TJMXlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_N9cTIHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N9mEIHlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N9v1IHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N94_EHlUEd-G1sP92iSIng" name="filter" visibility="private">
                  <ownedParameter xmi:id="_N94_EXlUEd-G1sP92iSIng" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N-MhEHlUEd-G1sP92iSIng" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N-CwEHlUEd-G1sP92iSIng"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_N-VrAHlUEd-G1sP92iSIng" name="list" type="_QJNf43OxEd-nKvj-XTCBkg">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_N-ol8HlUEd-G1sP92iSIng" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_N-fcAHlUEd-G1sP92iSIng"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_N-yW8HlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N-8H8HlUEd-G1sP92iSIng" name="flushRedo" visibility="private">
                  <ownedParameter xmi:id="_N_FR4HlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N_FR4XlUEd-G1sP92iSIng" name="flushUndo" visibility="private">
                  <ownedParameter xmi:id="_N_PC4HlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N_Yz4HlUEd-G1sP92iSIng" name="forceRedoLimit" visibility="private">
                  <ownedParameter xmi:id="_N_Yz4XlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N_h90HlUEd-G1sP92iSIng" name="max" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_N_ru0HlUEd-G1sP92iSIng" name="forceUndoLimit" visibility="private">
                  <ownedParameter xmi:id="_N_04wHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_N_-pwHlUEd-G1sP92iSIng" name="max" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OAIawHlUEd-G1sP92iSIng" name="getLimit" visibility="public">
                  <ownedParameter xmi:id="_OARksHlUEd-G1sP92iSIng" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OAbVsHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OAlGsHlUEd-G1sP92iSIng" name="getRedoApproval" visibility="private">
                  <ownedParameter xmi:id="_OAlGsXlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OAuQoHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OA4BoHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OBBLkHlUEd-G1sP92iSIng" name="getRedoHistory" visibility="public">
                  <ownedParameter xmi:id="_OBBLkXlUEd-G1sP92iSIng" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OBUtkHlUEd-G1sP92iSIng" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OBK8kHlUEd-G1sP92iSIng"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_OBd3gHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OBnogHlUEd-G1sP92iSIng" name="getRedoOperation" visibility="public">
                  <ownedParameter xmi:id="_OBnogXlUEd-G1sP92iSIng" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OBxZgHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OB6jcHlUEd-G1sP92iSIng" name="getUndoApproval" visibility="private">
                  <ownedParameter xmi:id="_OCEUcHlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OCNeYHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OCXPYHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OChAYHlUEd-G1sP92iSIng" name="getUndoHistory" visibility="public">
                  <ownedParameter xmi:id="_OChAYXlUEd-G1sP92iSIng" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OCz7UHlUEd-G1sP92iSIng" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OCqKUHlUEd-G1sP92iSIng"/>
                  </ownedParameter>
                  <ownedParameter xmi:id="_OC9sUHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_ODG2QHlUEd-G1sP92iSIng" name="getUndoOperation" visibility="public">
                  <ownedParameter xmi:id="_ODQnQHlUEd-G1sP92iSIng" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_ODZxMHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_ODjiMHlUEd-G1sP92iSIng" name="getExecuteApproval" visibility="private">
                  <ownedParameter xmi:id="_ODtTMHlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_ODtTMXlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OD2dIHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OEAOIHlUEd-G1sP92iSIng" name="internalRemove" visibility="private">
                  <ownedParameter xmi:id="_OEJ_IHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OETJEHlUEd-G1sP92iSIng" name="notifyListeners" visibility="private">
                  <ownedParameter xmi:id="_OETJEXlUEd-G1sP92iSIng" name="event" type="_Omw18XcwEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OEmEAHlUEd-G1sP92iSIng" name="notifyAboutToExecute" visibility="private">
                  <ownedParameter xmi:id="_OEmEAXlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OEv1AHlUEd-G1sP92iSIng" name="notifyAboutToRedo" visibility="private">
                  <ownedParameter xmi:id="_OE5mAHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OFCv8HlUEd-G1sP92iSIng" name="notifyAboutToUndo" visibility="private">
                  <ownedParameter xmi:id="_OFCv8XlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OFMg8HlUEd-G1sP92iSIng" name="notifyAdd" visibility="private">
                  <ownedParameter xmi:id="_OFMg8XlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OFWR8HlUEd-G1sP92iSIng" name="notifyDone" visibility="private">
                  <ownedParameter xmi:id="_OFfb4HlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OFpM4HlUEd-G1sP92iSIng" name="notifyNotOK" visibility="private">
                  <ownedParameter xmi:id="_OFyW0HlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OGPCwHlUEd-G1sP92iSIng" name="notifyNotOK" visibility="private">
                  <ownedParameter xmi:id="_OGYzwHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OGrusHlUEd-G1sP92iSIng" name="status" type="_fXmVnnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OG1fsHlUEd-G1sP92iSIng" name="notifyRedone" visibility="private">
                  <ownedParameter xmi:id="_OG1fsXlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OG-poHlUEd-G1sP92iSIng" name="notifyRemoved" visibility="private">
                  <ownedParameter xmi:id="_OHIaoHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OHSLoHlUEd-G1sP92iSIng" name="notifyUndone" visibility="private">
                  <ownedParameter xmi:id="_OHSLoXlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OHbVkHlUEd-G1sP92iSIng" name="notifyChanged" visibility="private">
                  <ownedParameter xmi:id="_OHlGkHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OHu3kHlUEd-G1sP92iSIng" name="redo" visibility="public">
                  <ownedParameter xmi:id="_OHu3kXlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OH4BgHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OIK8cHlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OIUtcHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OIeecHlUEd-G1sP92iSIng" name="redoOperation" visibility="public">
                  <ownedParameter xmi:id="_OIeecXlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OInoYHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OJXPQHlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OJhAQHlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OJqxQHlUEd-G1sP92iSIng" name="removeOperationApprover" visibility="public">
                  <ownedParameter xmi:id="_OJqxQXlUEd-G1sP92iSIng" name="approver" type="_akUGQXeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OJz7MHlUEd-G1sP92iSIng" name="removeOperationHistoryListener" visibility="public">
                  <ownedParameter xmi:id="_OJz7MXlUEd-G1sP92iSIng" name="listener" type="_OmnsAncwEd-96YWU42lBhw"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OJ9sMHlUEd-G1sP92iSIng" name="replaceOperation" visibility="public">
                  <ownedParameter xmi:id="_OKHdMHlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OKQnIHlUEd-G1sP92iSIng" name="replacements" type="_QJNf2HOxEd-nKvj-XTCBkg">
                    <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OKjiEHlUEd-G1sP92iSIng" value="*"/>
                    <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OKaYIHlUEd-G1sP92iSIng"/>
                  </ownedParameter>
                </ownedOperation>
                <ownedOperation xmi:id="_OKtTEHlUEd-G1sP92iSIng" name="setLimit" visibility="public">
                  <ownedParameter xmi:id="_OKtTEXlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OK3EEHlUEd-G1sP92iSIng" name="limit" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OLAOAHlUEd-G1sP92iSIng" name="undo" visibility="public">
                  <ownedParameter xmi:id="_OLJ_AHlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OLTwAHlUEd-G1sP92iSIng" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OLc58HlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OLmq8HlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OLv04HlUEd-G1sP92iSIng" name="undoOperation" visibility="public">
                  <ownedParameter xmi:id="_OLv04XlUEd-G1sP92iSIng" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                  <ownedParameter xmi:id="_OL5l4HlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OMMg0HlUEd-G1sP92iSIng" name="monitor" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_OMWR0HlUEd-G1sP92iSIng" name="info" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OMgC0HlUEd-G1sP92iSIng" name="openOperation" visibility="public">
                  <ownedParameter xmi:id="_OMgC0XlUEd-G1sP92iSIng" name="operation" type="_s7FqcXe8Ed-C3vabgS4Hag"/>
                  <ownedParameter xmi:id="_OMpMwHlUEd-G1sP92iSIng" name="mode" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_OMy9wHlUEd-G1sP92iSIng" name="closeOperation" visibility="public">
                  <ownedParameter xmi:id="_OM8HsHlUEd-G1sP92iSIng" name="operationOK" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_ONF4sHlUEd-G1sP92iSIng" name="addToHistory" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
                  <ownedParameter xmi:id="_ONPpsHlUEd-G1sP92iSIng" name="mode" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
                <ownedOperation xmi:id="_ONYzoHlUEd-G1sP92iSIng" name="operationChanged" visibility="public">
                  <ownedParameter xmi:id="_ONYzoXlUEd-G1sP92iSIng" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                </ownedOperation>
              </packagedElement>
              <packagedElement xmi:type="uml:Realization" xmi:id="_NxYNEHlUEd-G1sP92iSIng" name="DefaultOperationHistory extends IOperationHistory" supplier="_VGoR0HcvEd-96YWU42lBhw" client="_NxFSIHlUEd-G1sP92iSIng"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_0bEQAnctEd-96YWU42lBhw" name="runtime">
            <packagedElement xmi:type="uml:Interface" xmi:id="_fXmVnnOxEd-nKvj-XTCBkg" name="IStatus"/>
            <packagedElement xmi:type="uml:Interface" xmi:id="_fXmVmnOxEd-nKvj-XTCBkg" name="IProgressMonitor"/>
            <packagedElement xmi:type="uml:Interface" xmi:id="_fXmVm3OxEd-nKvj-XTCBkg" name="IAdaptable"/>
            <packagedElement xmi:type="uml:Package" xmi:id="_0bEQA3ctEd-96YWU42lBhw" name="content">
              <packagedElement xmi:type="uml:Interface" xmi:id="_0bEQBHctEd-96YWU42lBhw" name="IContentType"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_8mu0cHcuEd-96YWU42lBhw" name="IConfigurationElement"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_N0zUgHlUEd-G1sP92iSIng" name="ListenerList"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_dZxvkXc2Ed-96YWU42lBhw" name="gef">
    <packagedElement xmi:type="uml:Package" xmi:id="_dZxvknc2Ed-96YWU42lBhw" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_dZ65gHc2Ed-96YWU42lBhw" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_dZ65gXc2Ed-96YWU42lBhw" name="gef">
          <packagedElement xmi:type="uml:Package" xmi:id="_dZ65gnc2Ed-96YWU42lBhw" name="commands">
            <packagedElement xmi:type="uml:Class" xmi:id="_daEqgHc2Ed-96YWU42lBhw" name="CommandStack">
              <ownedComment xmi:id="_wQUXwHc2Ed-96YWU42lBhw">
                <body>
 * An implementation of a command stack. A stack manages the executing, undoing,
 * and redoing of {@link Command Commands}. Executed commands are pushed onto a
 * a stack for undoing later. Commands which are undone are pushed onto a redo
 * stack. Whenever a new command is executed, the Redo stack is flushed.
 * &lt;P>
 * A CommandStack contains a dirty property. This property can be used to
 * determine when persisting changes is required. The stack is dirty whenever
 * the last executed or redone command is different than the command that was at
 * the top of the undo stack when {@link #markSaveLocation()} was last called.
 * Initially, the undo stack is empty, and not dirty.
 * 
 * @author hudsonr
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_wQeIwHc2Ed-96YWU42lBhw" name="POST_EXECUTE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wQn5wHc2Ed-96YWU42lBhw">
                  <body>
	 * Constant indicating notification after a command has been executed (value
	 * is 8).
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wQxDsHc2Ed-96YWU42lBhw" name="POST_REDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wQ60sHc2Ed-96YWU42lBhw">
                  <body>
	 * Constant indicating notification after a command has been redone (value
	 * is 16).
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wRD-oHc2Ed-96YWU42lBhw" name="POST_UNDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wRNvoHc2Ed-96YWU42lBhw">
                  <body>
	 * Constant indicating notification after a command has been undone (value
	 * is 32).
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wRXgoHc2Ed-96YWU42lBhw" name="POST_MASK" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wRgqkHc2Ed-96YWU42lBhw">
                  <body>
	 * A bit-mask indicating notification after a command has done something.
	 * Currently this includes after a command has been undone, redone, or
	 * executed. This will include new events should they be introduced in the
	 * future.
	 * &lt;P>
	 * Usage&lt;BR/>
	 * 
	 * &lt;PRE>
	 * if ((commandStackEvent.getDetail() &amp;amp; CommandStack.POST_MASK) != 0) {
	 * 	// Do something, like:
	 * 	stopBatchingChanges();
	 * }
	 * &lt;/PRE>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wRqbkHc2Ed-96YWU42lBhw" name="PRE_EXECUTE" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wR0MkHc2Ed-96YWU42lBhw">
                  <body>
	 * Constant indicating notification prior to executing a command (value is
	 * 1).
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wSHHgHc2Ed-96YWU42lBhw" name="PRE_REDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wSQRcHc2Ed-96YWU42lBhw">
                  <body>
	 * Constant indicating notification prior to redoing a command (value is 2).
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wSaCcHc2Ed-96YWU42lBhw" name="PRE_UNDO" visibility="public" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wSjzcHc2Ed-96YWU42lBhw">
                  <body>
	 * Constant indicating notification prior to undoing a command (value is 4).
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wSs9YHc2Ed-96YWU42lBhw" name="PRE_MASK" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wS2uYHc2Ed-96YWU42lBhw">
                  <body>
	 * A bit-mask indicating notification before a command makes a change.
	 * Currently this includes before a command has been undone, redone, or
	 * executed. This will include new events should they be introduced in the
	 * future.
	 * &lt;P>
	 * Usage&lt;BR/>
	 * 
	 * &lt;PRE>
	 * if ((commandStackEvent.getDetail() &amp;amp; CommandStack.PRE_MASK) != 0) {
	 * 	// Do something, like:
	 * 	startBatchingChanges();
	 * }
	 * &lt;/PRE>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wTAfYHc2Ed-96YWU42lBhw" name="eventListeners" visibility="private" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wTTaUHc2Ed-96YWU42lBhw" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wTJpUHc2Ed-96YWU42lBhw"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wTTaUXc2Ed-96YWU42lBhw" name="listeners" visibility="protected" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_wTckQHc2Ed-96YWU42lBhw">
                  <body>
	 * The list of {@link CommandStackListener}s.
	 * 
	 * @deprecated This field should not be referenced, use
	 *             {@link #notifyListeners()}
	 </body>
                </ownedComment>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wTwGQHc2Ed-96YWU42lBhw" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wTmVQHc2Ed-96YWU42lBhw"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_wTwGQnc2Ed-96YWU42lBhw" name="redoable" visibility="private" type="_wTwGQXc2Ed-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_wUDBMHc2Ed-96YWU42lBhw" name="saveLocation" visibility="private" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_wUMyMHc2Ed-96YWU42lBhw" name="undoable" visibility="private" type="_wTwGQXc2Ed-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_wUV8IHc2Ed-96YWU42lBhw" name="undoLimit" visibility="private" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_wUo3EXc2Ed-96YWU42lBhw" name="addCommandStackEventListener" visibility="public">
                <ownedComment xmi:id="_wUo3Enc2Ed-96YWU42lBhw">
                  <body>
	 * Appends the listener to the list of command stack listeners. Multiple
	 * adds result in multiple notifications.
	 * 
	 * @since 3.1
	 * @param listener
	 *            the event listener
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wUyoEHc2Ed-96YWU42lBhw" name="listener" type="_wb8Y8Hc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wUyoEXc2Ed-96YWU42lBhw" name="addCommandStackListener" visibility="public">
                <ownedComment xmi:id="_wUyoEnc2Ed-96YWU42lBhw">
                  <body>
	 * Appends the listener to the list of command stack listeners. Multiple
	 * adds will result in multiple notifications.
	 * 
	 * @param listener
	 *            the listener
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wU8ZEHc2Ed-96YWU42lBhw" name="listener" type="_weCDoHc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wU8ZEXc2Ed-96YWU42lBhw" name="canRedo" visibility="public">
                <ownedComment xmi:id="_wU8ZEnc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>true&lt;/code> if it is appropriate to call {@link #redo()}.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wVFjAHc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wVPUAHc2Ed-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_wVPUAXc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>true&lt;/code> if {@link #undo()} can be called
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wVPUAnc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wVZFAHc2Ed-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_wVZFAXc2Ed-96YWU42lBhw">
                  <body>
	 * This will &lt;code>dispose()&lt;/code> all the commands in both the undo and
	 * redo stack. Both stacks will be empty afterwards.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wViO8Hc2Ed-96YWU42lBhw" name="execute" visibility="public">
                <ownedComment xmi:id="_wViO8Xc2Ed-96YWU42lBhw">
                  <body>
	 * Executes the specified Command if possible. Prior to executing the
	 * command, a CommandStackEvent for {@link #PRE_EXECUTE} will be fired to
	 * event listeners. Similarly, after attempting to execute the command, an
	 * event for {@link #POST_EXECUTE} will be fired. If the execution of the
	 * command completely normally, stack listeners will receive
	 * {@link CommandStackListener#commandStackChanged(EventObject)
	 * stackChanged} notification.
	 * &lt;P>
	 * If the command is &lt;code>null&lt;/code> or cannot be executed, nothing
	 * happens.
	 * 
	 * @param command
	 *            the Command to execute
	 * @see CommandStackEventListener
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wVr_8Hc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wVr_8Xc2Ed-96YWU42lBhw" name="flush" visibility="public">
                <ownedComment xmi:id="_wVr_8nc2Ed-96YWU42lBhw">
                  <body>
	 * Flushes the entire stack and resets the save location to zero. This
	 * method might be called when performing &quot;revert to saved&quot;.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wV1J4Hc2Ed-96YWU42lBhw" name="flushRedo" visibility="private"/>
              <ownedOperation xmi:id="_wV1J4Xc2Ed-96YWU42lBhw" name="flushUndo" visibility="private"/>
              <ownedOperation xmi:id="_wV1J4nc2Ed-96YWU42lBhw" name="getCommands" visibility="public">
                <ownedComment xmi:id="_wV1J43c2Ed-96YWU42lBhw">
                  <body>
	 * @return an array containing all commands in the order they were executed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wV-64Hc2Ed-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wWIr4Xc2Ed-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wWIr4Hc2Ed-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_wWR10Hc2Ed-96YWU42lBhw" name="getRedoCommand" visibility="public">
                <ownedComment xmi:id="_wWR10Xc2Ed-96YWU42lBhw">
                  <body>
	 * Peeks at the top of the &lt;i>redo&lt;/i> stack. This is useful for describing
	 * to the User what will be redone. The returned &lt;code>Command&lt;/code> has a
	 * label describing it.
	 * 
	 * @return the top of the &lt;i>redo&lt;/i> stack, which may be &lt;code>null&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wWR10nc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wWbm0Hc2Ed-96YWU42lBhw" name="getUndoCommand" visibility="public">
                <ownedComment xmi:id="_wWbm0Xc2Ed-96YWU42lBhw">
                  <body>
	 * Peeks at the top of the &lt;i>undo&lt;/i> stack. This is useful for describing
	 * to the User what will be undone. The returned &lt;code>Command&lt;/code> has a
	 * label describing it.
	 * 
	 * @return the top of the &lt;i>undo&lt;/i> stack, which may be &lt;code>null&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wWlX0Hc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wWuhwHc2Ed-96YWU42lBhw" name="getUndoLimit" visibility="public">
                <ownedComment xmi:id="_wWuhwXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns the undo limit. The undo limit is the maximum number of atomic
	 * operations that the User can undo. &lt;code>-1&lt;/code> is used to indicate no
	 * limit.
	 * 
	 * @return the undo limit
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wWuhwnc2Ed-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wW4SwHc2Ed-96YWU42lBhw" name="isDirty" visibility="public">
                <ownedComment xmi:id="_wW4SwXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns true if the stack is dirty. The stack is dirty whenever the last
	 * executed or redone command is different than the command that was at the
	 * top of the undo stack when {@link #markSaveLocation()} was last called.
	 * 
	 * @return &lt;code>true&lt;/code> if the stack is dirty
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wW4Swnc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wXBcsHc2Ed-96YWU42lBhw" name="markSaveLocation" visibility="public">
                <ownedComment xmi:id="_wXBcsXc2Ed-96YWU42lBhw">
                  <body>
	 * Marks the last executed or redone Command as the point at which the
	 * changes were saved. Calculation of {@link #isDirty()} will be based on
	 * this checkpoint.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wXLNsHc2Ed-96YWU42lBhw" name="notifyListeners" visibility="protected">
                <ownedComment xmi:id="_wXLNsXc2Ed-96YWU42lBhw">
                  <body>
	 * Sends notification to all {@link CommandStackListener}s.
	 * 
	 * @deprecated
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wXeIoHc2Ed-96YWU42lBhw" name="notifyListeners" visibility="protected">
                <ownedComment xmi:id="_wXeIoXc2Ed-96YWU42lBhw">
                  <body>
	 * Notifies command stack event listeners that the command stack has changed
	 * to the specified state.
	 * 
	 * @param command
	 *            the command
	 * @param state
	 *            the current stack state
	 * @since 3.2
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wXn5oHc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
                <ownedParameter xmi:id="_wXxqoHc2Ed-96YWU42lBhw" name="state" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wXxqoXc2Ed-96YWU42lBhw" name="redo" visibility="public">
                <ownedComment xmi:id="_wXxqonc2Ed-96YWU42lBhw">
                  <body>
	 * Calls redo on the Command at the top of the &lt;i>redo&lt;/i> stack, and pushes
	 * that Command onto the &lt;i>undo&lt;/i> stack. This method should only be
	 * called when {@link #canUndo()} returns &lt;code>true&lt;/code>.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wX60kHc2Ed-96YWU42lBhw" name="removeCommandStackEventListener" visibility="public">
                <ownedComment xmi:id="_wX60kXc2Ed-96YWU42lBhw">
                  <body>
	 * Removes the first occurrence of the specified listener.
	 * 
	 * @param listener
	 *            the listener
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wYElkHc2Ed-96YWU42lBhw" name="listener" type="_wb8Y8Hc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wYNvgHc2Ed-96YWU42lBhw" name="removeCommandStackListener" visibility="public">
                <ownedComment xmi:id="_wYNvgXc2Ed-96YWU42lBhw">
                  <body>
	 * Removes the first occurrence of the specified listener.
	 * 
	 * @param listener
	 *            the listener
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wYNvgnc2Ed-96YWU42lBhw" name="listener" type="_weCDoHc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wYXggHc2Ed-96YWU42lBhw" name="setUndoLimit" visibility="public">
                <ownedComment xmi:id="_wYXggXc2Ed-96YWU42lBhw">
                  <body>
	 * Sets the undo limit. The undo limit is the maximum number of atomic
	 * operations that the User can undo. &lt;code>-1&lt;/code> is used to indicate no
	 * limit.
	 * 
	 * @param undoLimit
	 *            the undo limit
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wYhRgHc2Ed-96YWU42lBhw" name="undoLimit" type="_QJqLxnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wYhRgXc2Ed-96YWU42lBhw" name="undo" visibility="public">
                <ownedComment xmi:id="_wYhRgnc2Ed-96YWU42lBhw">
                  <body>
	 * Undoes the most recently executed (or redone) Command. The Command is
	 * popped from the undo stack to and pushed onto the redo stack. This method
	 * should only be called when {@link #canUndo()} returns &lt;code>true&lt;/code>.
	 </body>
                </ownedComment>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_dahWcHc2Ed-96YWU42lBhw" name="Command" isAbstract="true">
              <ownedComment xmi:id="_wKNvwHc2Ed-96YWU42lBhw">
                <body>
 * An Abstract implementation of {@link Command}.
 * 
 * @author hudsonr
 * @since 2.0
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_wKW5sHc2Ed-96YWU42lBhw" name="label" visibility="private" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_wKqbsHc2Ed-96YWU42lBhw" name="debugLabel" visibility="private" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_wKzloHc2Ed-96YWU42lBhw" name="canExecute" visibility="public">
                <ownedComment xmi:id="_wKzloXc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>true&lt;/code> if the command can be executed
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wKzlonc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wK9WoHc2Ed-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_wK9WoXc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>true&lt;/code> if the command can be undone. This method
	 *         should only be called after &lt;code>execute()&lt;/code> or
	 *         &lt;code>redo()&lt;/code> has been called.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wK9Wonc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wLGgkHc2Ed-96YWU42lBhw" name="chain" visibility="public">
                <ownedComment xmi:id="_wLGgkXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns a Command that represents the chaining of a specified Command to
	 * this Command. The Command being chained will &lt;code>execute()&lt;/code> after
	 * this command has executed, and it will &lt;code>undo()&lt;/code> before this
	 * Command is undone.
	 * 
	 * @param command
	 *            &lt;code>null&lt;/code> or the Command being chained
	 * @return a Command representing the union
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wLQRkHc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
                <ownedParameter xmi:id="_wLaCkHc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wLaCkXc2Ed-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_wLaCknc2Ed-96YWU42lBhw">
                  <body>
	 * This is called to indicate that the &lt;code>Command&lt;/code> will not be used
	 * again. The Command may be in any state (executed, undone or redone) when
	 * dispose is called. The Command should not be referenced in any way after
	 * it has been disposed.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wLjMgHc2Ed-96YWU42lBhw" name="execute" visibility="public">
                <ownedComment xmi:id="_wLjMgXc2Ed-96YWU42lBhw">
                  <body>
	 * executes the Command. This method should not be called if the Command is
	 * not executable.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wLjMgnc2Ed-96YWU42lBhw" name="getDebugLabel" visibility="public">
                <ownedComment xmi:id="_wLs9gHc2Ed-96YWU42lBhw">
                  <body>
	 * @return an untranslated String used for debug purposes only
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wLs9gXc2Ed-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wL2ugHc2Ed-96YWU42lBhw" name="getLabel" visibility="public">
                <ownedComment xmi:id="_wL2ugXc2Ed-96YWU42lBhw">
                  <body>
	 * @return a String used to describe this command to the User
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wL2ugnc2Ed-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wL_4cHc2Ed-96YWU42lBhw" name="redo" visibility="public">
                <ownedComment xmi:id="_wL_4cXc2Ed-96YWU42lBhw">
                  <body>
	 * Re-executes the Command. This method should only be called after
	 * &lt;code>undo()&lt;/code> has been called.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wMJpcHc2Ed-96YWU42lBhw" name="setDebugLabel" visibility="public">
                <ownedComment xmi:id="_wMJpcXc2Ed-96YWU42lBhw">
                  <body>
	 * Sets the debug label for this command
	 * 
	 * @param label
	 *            a description used for debugging only
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wMJpcnc2Ed-96YWU42lBhw" name="label" type="_QJNf73OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wMSzYHc2Ed-96YWU42lBhw" name="setLabel" visibility="public">
                <ownedComment xmi:id="_wMSzYXc2Ed-96YWU42lBhw">
                  <body>
	 * Sets the label used to describe this command to the User.
	 * 
	 * @param label
	 *            the label
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wMSzYnc2Ed-96YWU42lBhw" name="label" type="_QJNf73OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wMckYHc2Ed-96YWU42lBhw" name="undo" visibility="public">
                <ownedComment xmi:id="_wMckYXc2Ed-96YWU42lBhw">
                  <body>
	 * Undoes the changes performed during &lt;code>execute()&lt;/code>. This method
	 * should only be called after &lt;code>execute&lt;/code> has been called, and
	 * only when &lt;code>canUndo()&lt;/code> returns &lt;code>true&lt;/code>.
	 * 
	 * @see #canUndo()
	 </body>
                </ownedComment>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_weCDoHc2Ed-96YWU42lBhw" name="CommandStackListener">
              <ownedComment xmi:id="_weLNkHc2Ed-96YWU42lBhw">
                <body>
 * A CommandStackListener is notified whenever the {@link CommandStack}'s state
 * has changed.
 </body>
              </ownedComment>
              <ownedOperation xmi:id="_weevkHc2Ed-96YWU42lBhw" name="commandStackChanged">
                <ownedComment xmi:id="_weevkXc2Ed-96YWU42lBhw">
                  <body>
	 * Called when the {@link CommandStack}'s state has changed.
	 * 
	 * @param event
	 *            the event
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_weevknc2Ed-96YWU42lBhw" name="event" type="_vsyDUncqEd-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Interface" xmi:id="_wb8Y8Hc2Ed-96YWU42lBhw" name="CommandStackEventListener">
              <ownedComment xmi:id="_wcPT4Hc2Ed-96YWU42lBhw">
                <body>
 * A listener interface for receiving notification before and after commands are
 * executed, undone, or redone.
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <ownedOperation xmi:id="_wcPT4Xc2Ed-96YWU42lBhw" name="stackChanged">
                <ownedComment xmi:id="_wcPT4nc2Ed-96YWU42lBhw">
                  <body>
	 * Sent when an event occurs on the command stack.
	 * {@link CommandStackEvent#getDetail()} can be used to identify the type of
	 * event which has occurred.
	 * 
	 * @since 3.1
	 * @param event
	 *            the event
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wcPT43c2Ed-96YWU42lBhw" name="event" type="_wZHHYHc2Ed-96YWU42lBhw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_wZHHYHc2Ed-96YWU42lBhw" name="CommandStackEvent">
              <ownedComment xmi:id="_wZHHYXc2Ed-96YWU42lBhw">
                <body>
 * Instances of this class are sent whenever stack events occur. The type of
 * event can be determined by calling {@link #getDetail()}, and comparing the
 * return value to constants defined by {@link CommandStack}.
 * &lt;P>
 * Warning: this class is not intended to be subclassed.
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <generalization xmi:id="_wZQ4YHc2Ed-96YWU42lBhw" general="_vsyDUncqEd-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_wZQ4YXc2Ed-96YWU42lBhw" name="command" visibility="private" isLeaf="true" type="_dahWcHc2Ed-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_wZjzUHc2Ed-96YWU42lBhw" name="detail" visibility="private" isLeaf="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_wZ2uQHc2Ed-96YWU42lBhw" name="getCommand" visibility="public">
                <ownedComment xmi:id="_wZ2uQXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns &lt;code>null&lt;/code> or a Command if a command is relevant to the
	 * current event.
	 * 
	 * @since 3.1
	 * @return &lt;code>null&lt;/code> or a command
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_waAfQHc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_waKQQHc2Ed-96YWU42lBhw" name="isPreChangeEvent" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_waKQQXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns &lt;code>true&lt;/code> if this event is fired prior to the stack
	 * changing.
	 * 
	 * @return &lt;code>true&lt;/code> if pre-change event
	 * @since 3.2
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_waKQQnc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_waTaMHc2Ed-96YWU42lBhw" name="isPostChangeEvent" visibility="public" isLeaf="true">
                <ownedComment xmi:id="_waTaMXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns &lt;code>true&lt;/code> if this event is fired after the stack having
	 * changed.
	 * 
	 * @return &lt;code>true&lt;/code> if post-change event
	 * @since 3.2
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wadLMHc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wamVIHc2Ed-96YWU42lBhw" name="getDetail" visibility="public">
                <ownedComment xmi:id="_wamVIXc2Ed-96YWU42lBhw">
                  <body>
	 * Returns an integer identifying the type of event which has occurred.
	 * 
	 * @since 3.1
	 * @return the detail of the event
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wamVInc2Ed-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_wfhRYHc2Ed-96YWU42lBhw" name="CompoundCommand">
              <ownedComment xmi:id="_wfrCYHc2Ed-96YWU42lBhw">
                <body>
 * An aggregation of multiple &lt;code>Commands&lt;/code>. A
 * &lt;code>CompoundCommand&lt;/code> is executable if all of its contained Commands
 * are executable, and it has at least one contained Command. The same is true
 * for undo. When undo is called, the contained Commands are undone in the
 * reverse order in which they were executed.
 * &lt;P>
 * An empty CompoundCommand is &lt;em>not&lt;/em> executable.
 * &lt;P>
 * A CompoundCommand can be {@link #unwrap() unwrapped}. Unwrapping returns the
 * simplest equivalent form of the CompoundCommand. So, if a CompoundCommand
 * contains just one Command, that Command is returned.
 </body>
              </ownedComment>
              <generalization xmi:id="_wfrCYXc2Ed-96YWU42lBhw" general="_dahWcHc2Ed-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_wf0MUHc2Ed-96YWU42lBhw" name="commandList" visibility="private" type="_QJNf43OxEd-nKvj-XTCBkg" isUnique="false">
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wgHuUHc2Ed-96YWU42lBhw" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wf99UHc2Ed-96YWU42lBhw"/>
              </ownedAttribute>
              <ownedOperation xmi:id="_wgQ4QHc2Ed-96YWU42lBhw" name="add" visibility="public">
                <ownedComment xmi:id="_wgQ4QXc2Ed-96YWU42lBhw">
                  <body>
	 * Adds the specified command if it is not &lt;code>null&lt;/code>.
	 * 
	 * @param command
	 *            &lt;code>null&lt;/code> or a Command
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wgQ4Qnc2Ed-96YWU42lBhw" name="command" type="_dahWcHc2Ed-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wgapQHc2Ed-96YWU42lBhw" name="canExecute" visibility="public">
                <ownedComment xmi:id="_wgapQXc2Ed-96YWU42lBhw">
                  <body>
	 * @see org.eclipse.gef.commands.Command#canExecute()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wgapQnc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wgjzMHc2Ed-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_wgjzMXc2Ed-96YWU42lBhw">
                  <body>
	 * @see org.eclipse.gef.commands.Command#canUndo()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wgtkMHc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wgtkMXc2Ed-96YWU42lBhw" name="dispose" visibility="public">
                <ownedComment xmi:id="_wgtkMnc2Ed-96YWU42lBhw">
                  <body>
	 * Disposes all contained Commands.
	 * 
	 * @see org.eclipse.gef.commands.Command#dispose()
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wg3VMHc2Ed-96YWU42lBhw" name="execute" visibility="public">
                <ownedComment xmi:id="_wg3VMXc2Ed-96YWU42lBhw">
                  <body>
	 * Execute the command.For a compound command this means executing all of
	 * the commands that it contains.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_whAfIHc2Ed-96YWU42lBhw" name="getChildren" visibility="public">
                <ownedComment xmi:id="_whAfIXc2Ed-96YWU42lBhw">
                  <body>
	 * This is useful when implementing
	 * {@link org.eclipse.jface.viewers.ITreeContentProvider#getChildren(Object)}
	 * to display the Command's nested structure.
	 * 
	 * @return returns the Commands as an array of Objects.
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_whKQIHc2Ed-96YWU42lBhw" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_whUBIXc2Ed-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_whUBIHc2Ed-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_whdLEHc2Ed-96YWU42lBhw" name="getCommands" visibility="public">
                <ownedComment xmi:id="_whdLEXc2Ed-96YWU42lBhw">
                  <body>
	 * @return the List of contained Commands
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_whdLEnc2Ed-96YWU42lBhw" type="_QJNf43OxEd-nKvj-XTCBkg" direction="return">
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_whwGAHc2Ed-96YWU42lBhw" value="*"/>
                  <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_whm8EHc2Ed-96YWU42lBhw"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_whwGAXc2Ed-96YWU42lBhw" name="getLabel" visibility="public">
                <ownedComment xmi:id="_whwGAnc2Ed-96YWU42lBhw">
                  <body>
	 * @see org.eclipse.gef.commands.Command#getLabel()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wh53AHc2Ed-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wiDoAHc2Ed-96YWU42lBhw" name="isEmpty" visibility="public">
                <ownedComment xmi:id="_wiDoAXc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>true&lt;/code> if the CompoundCommand is empty
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wiDoAnc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wiMx8Hc2Ed-96YWU42lBhw" name="redo" visibility="public">
                <ownedComment xmi:id="_wiMx8Xc2Ed-96YWU42lBhw">
                  <body>
	 * @see org.eclipse.gef.commands.Command#redo()
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wiMx8nc2Ed-96YWU42lBhw" name="size" visibility="public">
                <ownedComment xmi:id="_wiMx83c2Ed-96YWU42lBhw">
                  <body>
	 * @return the number of contained Commands
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wiWi8Hc2Ed-96YWU42lBhw" type="_QJqLxnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wigT8Hc2Ed-96YWU42lBhw" name="undo" visibility="public">
                <ownedComment xmi:id="_wigT8Xc2Ed-96YWU42lBhw">
                  <body>
	 * @see org.eclipse.gef.commands.Command#undo()
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_wipd4Hc2Ed-96YWU42lBhw" name="unwrap" visibility="public">
                <ownedComment xmi:id="_wipd4Xc2Ed-96YWU42lBhw">
                  <body>
	 * Returns the simplest form of this Command that is equivalent. This is
	 * useful for removing unnecessary nesting of Commands.
	 * 
	 * @return the simplest form of this Command that is equivalent
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wipd4nc2Ed-96YWU42lBhw" type="_dahWcHc2Ed-96YWU42lBhw" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_wji1wHc2Ed-96YWU42lBhw" name="ForwardUndoCompoundCommand">
              <ownedComment xmi:id="_wji1wXc2Ed-96YWU42lBhw">
                <body>
 * A CompoundCommand that performs undo on its contained Commands in the same
 * order in which they were executed.
 </body>
              </ownedComment>
              <generalization xmi:id="_wji1wnc2Ed-96YWU42lBhw" general="_wfhRYHc2Ed-96YWU42lBhw"/>
              <ownedOperation xmi:id="_wjsmwHc2Ed-96YWU42lBhw" name="getDebugLabel" visibility="public">
                <ownedComment xmi:id="_wjsmwXc2Ed-96YWU42lBhw">
                  <body>
	 * @see org.eclipse.gef.commands.Command#getDebugLabel()
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wj1wsHc2Ed-96YWU42lBhw" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wj1wsXc2Ed-96YWU42lBhw" name="undo" visibility="public">
                <ownedComment xmi:id="_wj1wsnc2Ed-96YWU42lBhw">
                  <body>
	 * Undo the command. For a Preorder compound command this means undoing all
	 * of the commands that it contains. Do it in the same order as applied.
	 </body>
                </ownedComment>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_wj_hsHc2Ed-96YWU42lBhw" name="UnexecutableCommand" isLeaf="true">
              <ownedComment xmi:id="_wkIroHc2Ed-96YWU42lBhw">
                <body>
 * A Command which can never be executed
 </body>
              </ownedComment>
              <generalization xmi:id="_wkIroXc2Ed-96YWU42lBhw" general="_dahWcHc2Ed-96YWU42lBhw"/>
              <ownedAttribute xmi:id="_wkScoHc2Ed-96YWU42lBhw" name="INSTANCE" visibility="public" isLeaf="true" isStatic="true" type="_wj_hsHc2Ed-96YWU42lBhw" isUnique="false">
                <ownedComment xmi:id="_wkcNoHc2Ed-96YWU42lBhw">
                  <body>
	 * The singleton instance
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedOperation xmi:id="_wklXkHc2Ed-96YWU42lBhw" name="canExecute" visibility="public">
                <ownedComment xmi:id="_wklXkXc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>false&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wkvIkHc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_wk45kHc2Ed-96YWU42lBhw" name="canUndo" visibility="public">
                <ownedComment xmi:id="_wk45kXc2Ed-96YWU42lBhw">
                  <body>
	 * @return &lt;code>false&lt;/code>
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_wk45knc2Ed-96YWU42lBhw" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_pL3DwHh5Ed-ECKyh8Dg6Wg" name="EditPart"/>
          <packagedElement xmi:type="uml:Package" xmi:id="_pTUWoHh5Ed-ECKyh8Dg6Wg" name="requests">
            <packagedElement xmi:type="uml:Class" xmi:id="_pTUWoXh5Ed-ECKyh8Dg6Wg" name="CreateRequest"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_qG36gHh5Ed-ECKyh8Dg6Wg" name="CreateConnectionRequest"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_pUW4cHh5Ed-ECKyh8Dg6Wg" name="EditPartViewer"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_aU-CsHeiEd-udeJ8hQXrBA" name="ui">
    <packagedElement xmi:type="uml:Package" xmi:id="_aVQ9oHeiEd-udeJ8hQXrBA" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_aVauoHeiEd-udeJ8hQXrBA" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_aVauoXeiEd-udeJ8hQXrBA" name="ui">
          <packagedElement xmi:type="uml:Package" xmi:id="_aVauoneiEd-udeJ8hQXrBA" name="operations">
            <packagedElement xmi:type="uml:Interface" xmi:id="_aWAkgHeiEd-udeJ8hQXrBA" name="IWorkbenchOperationSupport">
              <ownedComment xmi:id="_aWAkgXeiEd-udeJ8hQXrBA">
                <body>
 * An instance of this interface provides support for managing a
 * a shared operations history and an shared undo context at the &lt;code>IWorkbench&lt;/code>
 * level.
 * &lt;p>
 * This interface is not intended to be extended or implemented by clients.
 * &lt;/p>
 * 
 * @since 3.1
 * 
 * @see org.eclipse.ui.IWorkbench#getOperationSupport()
 * @noimplement This interface is not intended to be implemented by clients.
 </body>
              </ownedComment>
              <ownedOperation xmi:id="_aWTfcHeiEd-udeJ8hQXrBA" name="getUndoContext" visibility="public">
                <ownedComment xmi:id="_aWTfcXeiEd-udeJ8hQXrBA">
                  <body>
	 * Returns the undo context for workbench-wide operations.
	 * 
	 * @return the workbench operation context
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_aWnBcHeiEd-udeJ8hQXrBA" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_aW58YHeiEd-udeJ8hQXrBA" name="getOperationHistory" visibility="public">
                <ownedComment xmi:id="_aW58YXeiEd-udeJ8hQXrBA">
                  <body>
	 * Returns the operation history for the workbench.
	 * 
	 * @return the workbench operation history
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_aXDtYHeiEd-udeJ8hQXrBA" type="_VGoR0HcvEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_abYMsHeiEd-udeJ8hQXrBA" name="LinearUndoViolationUserApprover" isLeaf="true">
              <ownedComment xmi:id="_abYMsXeiEd-udeJ8hQXrBA">
                <body>
 * &lt;p>
 * An operation approver that prompts the user to see if linear undo violations
 * are permitted. A linear undo violation is detected when an operation being
 * undone or redone shares an undo context with another operation appearing more
 * recently in the history.
 * &lt;/p>
 * &lt;p>
 * This class may be instantiated by clients.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <generalization xmi:id="_abhWoXeiEd-udeJ8hQXrBA" general="_abhWoHeiEd-udeJ8hQXrBA"/>
              <ownedAttribute xmi:id="_ab04oHeiEd-udeJ8hQXrBA" name="part" visibility="private" type="_abrHoHeiEd-udeJ8hQXrBA" isUnique="false"/>
              <ownedAttribute xmi:id="_ab-CkHeiEd-udeJ8hQXrBA" name="context" visibility="private" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedOperation xmi:id="_acaugHeiEd-udeJ8hQXrBA" name="allowLinearRedoViolation" visibility="protected">
                <ownedParameter xmi:id="_acaugXeiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_ackfgHeiEd-udeJ8hQXrBA" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_ackfgXeiEd-udeJ8hQXrBA" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_actpcHeiEd-udeJ8hQXrBA" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_actpcXeiEd-udeJ8hQXrBA" name="uiInfo" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ac3acHeiEd-udeJ8hQXrBA" name="allowLinearUndoViolation" visibility="protected">
                <ownedParameter xmi:id="_ac3acXeiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_adBLcHeiEd-udeJ8hQXrBA" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_adKVYHeiEd-udeJ8hQXrBA" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_adKVYXeiEd-udeJ8hQXrBA" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_adUGYHeiEd-udeJ8hQXrBA" name="uiInfo" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_adUGYXeiEd-udeJ8hQXrBA" name="getTitle" visibility="private">
                <ownedParameter xmi:id="_add3YHeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_add3YXeiEd-udeJ8hQXrBA" name="part" type="_abrHoHeiEd-udeJ8hQXrBA"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_akK8UHeiEd-udeJ8hQXrBA" name="NonLocalUndoUserApprover" clientDependency="_akUGQneiEd-udeJ8hQXrBA" isLeaf="true">
              <ownedComment xmi:id="_akUGQHeiEd-udeJ8hQXrBA">
                <body>
 * &lt;p>
 * An operation approver that prompts the user to see if a non-local undo should
 * proceed inside an editor. A non-local undo is detected when an operation
 * being undone or redone affects elements other than those described by the
 * editor itself. Clients can optionally specify a class, the preferred
 * comparison class, that should be used when comparing objects affected by the
 * editor with objects affected by an undo or redo operation. Comparisons
 * between the affected objects inside the editor and those described by the
 * operation will first be done by simply performing an equality check, using
 * {@link java.lang.Object#equals(java.lang.Object)}. If an object described by
 * an operation is not equal to one of the objects affected by the editor, and
 * if it is not an instance of the preferred comparison class, but is an
 * instance of {@link org.eclipse.core.runtime.IAdaptable}, then the operation
 * approver will also attempt to retrieve an adapter on that object for the
 * preferred comparison class and perform a second equality check using the
 * adapter.
 * &lt;/p>
 * &lt;p>
 * This class may be instantiated by clients.
 * &lt;/p>
 * 
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_akd3QHeiEd-udeJ8hQXrBA" name="context" visibility="private" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_aknoQXeiEd-udeJ8hQXrBA" name="part" visibility="private" type="_aknoQHeiEd-udeJ8hQXrBA" isUnique="false"/>
              <ownedAttribute xmi:id="_akwyMHeiEd-udeJ8hQXrBA" name="elements" visibility="private" type="_msnXL3O4Ed-nKvj-XTCBkg" isUnique="false">
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_alNeIHeiEd-udeJ8hQXrBA" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ak6jMHeiEd-udeJ8hQXrBA"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_alXPIHeiEd-udeJ8hQXrBA" name="affectedObjectsClass" visibility="private" type="_zsR3ZXctEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_algZEXeiEd-udeJ8hQXrBA" name="elementsAndAdapters" visibility="private" type="_algZEHeiEd-udeJ8hQXrBA" isUnique="false">
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_alz7EHeiEd-udeJ8hQXrBA" value="*"/>
                <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_alqKEHeiEd-udeJ8hQXrBA"/>
              </ownedAttribute>
              <ownedOperation xmi:id="_alz7EXeiEd-udeJ8hQXrBA" name="proceedRedoing" visibility="public">
                <ownedParameter xmi:id="_alz7EneiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_al9FAHeiEd-udeJ8hQXrBA" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_amG2AHeiEd-udeJ8hQXrBA" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_amG2AXeiEd-udeJ8hQXrBA" name="uiInfo" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_amP_8HeiEd-udeJ8hQXrBA" name="proceedUndoing" visibility="public">
                <ownedParameter xmi:id="_amP_8XeiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_amZw8HeiEd-udeJ8hQXrBA" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_amZw8XeiEd-udeJ8hQXrBA" name="history" type="_VGoR0HcvEd-96YWU42lBhw"/>
                <ownedParameter xmi:id="_amjh8HeiEd-udeJ8hQXrBA" name="uiInfo" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_amjh8XeiEd-udeJ8hQXrBA" name="proceedWithOperation" visibility="private">
                <ownedParameter xmi:id="_amsr4HeiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_am2c4HeiEd-udeJ8hQXrBA" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_am2c4XeiEd-udeJ8hQXrBA" name="message" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_anAN4HeiEd-udeJ8hQXrBA" name="discardButton" type="_QJNf73OxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_anJX0HeiEd-udeJ8hQXrBA" name="title" type="_QJNf73OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_anTI0HeiEd-udeJ8hQXrBA" name="requiresApproval" visibility="private">
                <ownedParameter xmi:id="_anTI0XeiEd-udeJ8hQXrBA" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_ancSwHeiEd-udeJ8hQXrBA" name="operation" type="_QJNf2HOxEd-nKvj-XTCBkg"/>
                <ownedParameter xmi:id="_ancSwXeiEd-udeJ8hQXrBA" name="uiInfo" type="_fXmVm3OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_anmDwHeiEd-udeJ8hQXrBA" name="elementsContains" visibility="private">
                <ownedParameter xmi:id="_anmDwXeiEd-udeJ8hQXrBA" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_anv0wHeiEd-udeJ8hQXrBA" name="someObject" type="_msnXL3O4Ed-nKvj-XTCBkg"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_akUGQneiEd-udeJ8hQXrBA" name="NonLocalUndoUserApprover extends IOperationApprover" supplier="_akUGQXeiEd-udeJ8hQXrBA" client="_akK8UHeiEd-udeJ8hQXrBA"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_auJ-wHeiEd-udeJ8hQXrBA" name="OperationHistoryActionHandler" clientDependency="_auv0oXeiEd-udeJ8hQXrBA _11efcHekEd-udeJ8hQXrBA" isAbstract="true">
              <ownedComment xmi:id="_auTIsHeiEd-udeJ8hQXrBA">
                <body>
 * &lt;p>
 * OperationHistoryActionHandler implements common behavior for the undo and
 * redo actions. It supports filtering of undo or redo on a particular undo
 * context. If an undo context is not specified, or there has been no history
 * available for the specified undo context, then the workbench undo context
 * will be used.
 * &lt;/p>
 * &lt;p>
 * OperationHistoryActionHandler provides an adapter in the info parameter of
 * the IOperationHistory undo and redo methods that is used to get UI info for
 * prompting the user during operations or operation approval. Adapters are
 * provided for org.eclipse.ui.IWorkbenchWindow, org.eclipse.swt.widgets.Shell,
 * org.eclipse.ui.IWorkbenchPart, org.eclipse.core.commands.IUndoContext, and
 * org.eclipse.runtime.IProgressMonitor.
 * &lt;/p>
 * &lt;p>
 * OperationHistoryActionHandler assumes a linear undo/redo model. When the
 * handler is run, the operation history is asked to perform the most recent
 * undo/redo for the handler's undo context. The handler can be configured
 * (using #setPruneHistory(true)) to flush the operation undo or redo history
 * for the handler's undo context when there is no valid operation on top of the
 * history. This avoids keeping a stale history of invalid operations. By
 * default, pruning does not occur and it is assumed that clients of the
 * particular undo context are pruning the history when necessary.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <generalization xmi:id="_aumqsXeiEd-udeJ8hQXrBA" general="_aumqsHeiEd-udeJ8hQXrBA"/>
              <ownedAttribute xmi:id="_auv0oneiEd-udeJ8hQXrBA" name="MAX_LABEL_LENGTH" visibility="private" isLeaf="true" isStatic="true" type="_QJqLxnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_awYzYHeiEd-udeJ8hQXrBA" name="pruning" visibility="private" type="_QJqLwnOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_awikYHeiEd-udeJ8hQXrBA" name="partListener" visibility="private" type="_avCvkXeiEd-udeJ8hQXrBA" isUnique="false"/>
              <ownedAttribute xmi:id="_awruUHeiEd-udeJ8hQXrBA" name="historyListener" visibility="private" type="_OmnsAncwEd-96YWU42lBhw" isUnique="false"/>
              <ownedAttribute xmi:id="_axIaQHeiEd-udeJ8hQXrBA" name="progressDialog" visibility="private" type="_aw_QUneiEd-udeJ8hQXrBA" isUnique="false"/>
              <ownedAttribute xmi:id="_axSLQHeiEd-udeJ8hQXrBA" name="undoContext" visibility="private" type="_fXdLoXOxEd-nKvj-XTCBkg" isUnique="false"/>
              <ownedAttribute xmi:id="_axbVMXeiEd-udeJ8hQXrBA" name="site" type="_axbVMHeiEd-udeJ8hQXrBA" isUnique="false"/>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_avCvkHeiEd-udeJ8hQXrBA" name="PartListener" visibility="private" clientDependency="_avMgkHeiEd-udeJ8hQXrBA">
                <ownedOperation xmi:id="_avMgkXeiEd-udeJ8hQXrBA" name="partActivated" visibility="public">
                  <ownedComment xmi:id="_avMgkneiEd-udeJ8hQXrBA">
                    <body>
		 * @see IPartListener#partActivated(IWorkbenchPart)
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_avWRkHeiEd-udeJ8hQXrBA" name="part" type="_abrHoHeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_avfbgHeiEd-udeJ8hQXrBA" name="partBroughtToTop" visibility="public">
                  <ownedComment xmi:id="_avfbgXeiEd-udeJ8hQXrBA">
                    <body>
		 * @see IPartListener#partBroughtToTop(IWorkbenchPart)
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_avfbgneiEd-udeJ8hQXrBA" name="part" type="_abrHoHeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_avpMgHeiEd-udeJ8hQXrBA" name="partClosed" visibility="public">
                  <ownedComment xmi:id="_avpMgXeiEd-udeJ8hQXrBA">
                    <body>
		 * @see IPartListener#partClosed(IWorkbenchPart)
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_avpMgneiEd-udeJ8hQXrBA" name="part" type="_abrHoHeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_avy9gHeiEd-udeJ8hQXrBA" name="partDeactivated" visibility="public">
                  <ownedComment xmi:id="_avy9gXeiEd-udeJ8hQXrBA">
                    <body>
		 * @see IPartListener#partDeactivated(IWorkbenchPart)
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_avy9gneiEd-udeJ8hQXrBA" name="part" type="_abrHoHeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
                <ownedOperation xmi:id="_av8HcHeiEd-udeJ8hQXrBA" name="partOpened" visibility="public">
                  <ownedComment xmi:id="_av8HcXeiEd-udeJ8hQXrBA">
                    <body>
		 * @see IPartListener#partOpened(IWorkbenchPart)
		 </body>
                  </ownedComment>
                  <ownedParameter xmi:id="_awF4cHeiEd-udeJ8hQXrBA" name="part" type="_abrHoHeiEd-udeJ8hQXrBA"/>
                </ownedOperation>
              </nestedClassifier>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_awF4cXeiEd-udeJ8hQXrBA" name="HistoryListener" visibility="private" clientDependency="_awPCYHeiEd-udeJ8hQXrBA">
                <ownedOperation xmi:id="_awPCYXeiEd-udeJ8hQXrBA" name="historyNotification" visibility="public">
                  <ownedParameter xmi:id="_awPCYneiEd-udeJ8hQXrBA" name="event" type="_Omw18XcwEd-96YWU42lBhw"/>
                </ownedOperation>
              </nestedClassifier>
              <ownedOperation xmi:id="_axlGMHeiEd-udeJ8hQXrBA" name="dispose" visibility="public"/>
              <ownedOperation xmi:id="_axu3MHeiEd-udeJ8hQXrBA" name="flush" isAbstract="true"/>
              <ownedOperation xmi:id="_axu3MXeiEd-udeJ8hQXrBA" name="getCommandString" isAbstract="true">
                <ownedParameter xmi:id="_axu3MneiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ax4BIHeiEd-udeJ8hQXrBA" name="getTooltipString" isAbstract="true">
                <ownedParameter xmi:id="_ax4BIXeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ayByIHeiEd-udeJ8hQXrBA" name="getSimpleCommandString" isAbstract="true">
                <ownedParameter xmi:id="_ayByIXeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ayLjIHeiEd-udeJ8hQXrBA" name="getSimpleTooltipString" isAbstract="true">
                <ownedParameter xmi:id="_ayLjIXeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ayLjIneiEd-udeJ8hQXrBA" name="getHistory">
                <ownedParameter xmi:id="_ayLjI3eiEd-udeJ8hQXrBA" type="_VGoR0HcvEd-96YWU42lBhw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ayUtEHeiEd-udeJ8hQXrBA" name="getOperation" isAbstract="true">
                <ownedParameter xmi:id="_ayeeEHeiEd-udeJ8hQXrBA" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ayeeEXeiEd-udeJ8hQXrBA" name="run" visibility="public" isLeaf="true"/>
              <ownedOperation xmi:id="_aynoAHeiEd-udeJ8hQXrBA" name="runCommand" isAbstract="true">
                <ownedParameter xmi:id="_aynoAXeiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_ayxZAHeiEd-udeJ8hQXrBA" name="pm" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ayxZAXeiEd-udeJ8hQXrBA" name="getAdapter" visibility="public">
                <ownedParameter xmi:id="_ay7KAHeiEd-udeJ8hQXrBA" type="_msnXL3O4Ed-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_ay7KAXeiEd-udeJ8hQXrBA" name="adapter" type="_zsR3ZXctEd-96YWU42lBhw"/>
              </ownedOperation>
              <ownedOperation xmi:id="_azET8HeiEd-udeJ8hQXrBA" name="getWorkbenchWindow" visibility="private">
                <ownedParameter xmi:id="_azOE8HeiEd-udeJ8hQXrBA" type="_azET8XeiEd-udeJ8hQXrBA" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_azOE8XeiEd-udeJ8hQXrBA" name="shouldBeEnabled" isAbstract="true">
                <ownedComment xmi:id="_azOE8neiEd-udeJ8hQXrBA">
                  <body>
	 * The undo and redo subclasses should implement this.
	 * 
	 * @return - a boolean indicating enablement state
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_azX18HeiEd-udeJ8hQXrBA" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_azX18XeiEd-udeJ8hQXrBA" name="setContext" visibility="public">
                <ownedComment xmi:id="_azX18neiEd-udeJ8hQXrBA">
                  <body>
	 * Set the context shown by the handler. Normally the context is set up when
	 * the action handler is created, but the context can also be changed
	 * dynamically.
	 * 
	 * @param context
	 *            the context to be used for the undo history
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_azg_4HeiEd-udeJ8hQXrBA" name="context" type="_fXdLoXOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_azqw4HeiEd-udeJ8hQXrBA" name="setPruneHistory" visibility="public">
                <ownedComment xmi:id="_azqw4XeiEd-udeJ8hQXrBA">
                  <body>
	 * Specify whether the action handler should actively prune the operation
	 * history when invalid operations are encountered. The default value is
	 * &lt;code>false&lt;/code>.
	 * 
	 * @param prune
	 *            &lt;code>true&lt;/code> if the history should be pruned by the
	 *            handler, and &lt;code>false&lt;/code> if it should not.
	 * 
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_azqw4neiEd-udeJ8hQXrBA" name="prune" type="_QJqLwnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_azz60HeiEd-udeJ8hQXrBA" name="update" visibility="public">
                <ownedComment xmi:id="_azz60XeiEd-udeJ8hQXrBA">
                  <body>
	 * Update enabling and labels according to the current status of the
	 * operation history.
	 </body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_az9r0HeiEd-udeJ8hQXrBA" name="shortenText" visibility="private">
                <ownedParameter xmi:id="_az9r0XeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_az9r0neiEd-udeJ8hQXrBA" name="message" type="_QJNf73OxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_a0Hc0XeiEd-udeJ8hQXrBA" name="reportException" isLeaf="true">
                <ownedParameter xmi:id="_a0QmwHeiEd-udeJ8hQXrBA" name="t" type="_a0Hc0HeiEd-udeJ8hQXrBA"/>
                <ownedParameter xmi:id="_14wc8XekEd-udeJ8hQXrBA" name="t" type="_14wc8HekEd-udeJ8hQXrBA"/>
              </ownedOperation>
              <ownedOperation xmi:id="_a0QmwXeiEd-udeJ8hQXrBA" name="isInvalid" isLeaf="true">
                <ownedParameter xmi:id="_a0QmwneiEd-udeJ8hQXrBA" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_a0aXwHeiEd-udeJ8hQXrBA" name="getUndoContext" isLeaf="true">
                <ownedParameter xmi:id="_a0aXwXeiEd-udeJ8hQXrBA" type="_fXdLoXOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_auv0oXeiEd-udeJ8hQXrBA" name="OperationHistoryActionHandler extends IAdaptable" supplier="_fXmVm3OxEd-nKvj-XTCBkg" client="_auJ-wHeiEd-udeJ8hQXrBA"/>
            <packagedElement xmi:type="uml:Realization" xmi:id="_avMgkHeiEd-udeJ8hQXrBA" name="PartListener extends IPartListener" supplier="_avCvkXeiEd-udeJ8hQXrBA" client="_avCvkHeiEd-udeJ8hQXrBA"/>
            <packagedElement xmi:type="uml:Realization" xmi:id="_awPCYHeiEd-udeJ8hQXrBA" name="HistoryListener extends IOperationHistoryListener" supplier="_OmnsAncwEd-96YWU42lBhw" client="_awF4cXeiEd-udeJ8hQXrBA"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_a0Hc0HeiEd-udeJ8hQXrBA" name="Throwable"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_bXlWQHeiEd-udeJ8hQXrBA" name="RedoActionHandler" isLeaf="true">
              <ownedComment xmi:id="_bXlWQXeiEd-udeJ8hQXrBA">
                <body>
 * &lt;p>
 * RedoActionHandler provides common behavior for redoing an operation, as well
 * as labelling and enabling the menu item.  This class may be instantiated by 
 * clients.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <generalization xmi:id="_bXlWQneiEd-udeJ8hQXrBA" general="_auJ-wHeiEd-udeJ8hQXrBA"/>
              <ownedOperation xmi:id="_bXugMHeiEd-udeJ8hQXrBA" name="flush"/>
              <ownedOperation xmi:id="_bXugMXeiEd-udeJ8hQXrBA" name="getCommandString">
                <ownedParameter xmi:id="_bXugMneiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bX4RMHeiEd-udeJ8hQXrBA" name="getTooltipString">
                <ownedParameter xmi:id="_bX4RMXeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bYCCMHeiEd-udeJ8hQXrBA" name="getSimpleCommandString">
                <ownedParameter xmi:id="_bYCCMXeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bYCCMneiEd-udeJ8hQXrBA" name="getSimpleTooltipString">
                <ownedParameter xmi:id="_bYCCM3eiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bYLMIHeiEd-udeJ8hQXrBA" name="getOperation">
                <ownedParameter xmi:id="_bYLMIXeiEd-udeJ8hQXrBA" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bYLMIneiEd-udeJ8hQXrBA" name="runCommand">
                <ownedParameter xmi:id="_bYLMI3eiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_bYxpEHeiEd-udeJ8hQXrBA" name="pm" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bYxpEXeiEd-udeJ8hQXrBA" name="shouldBeEnabled">
                <ownedParameter xmi:id="_bYxpEneiEd-udeJ8hQXrBA" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_bZhP8HeiEd-udeJ8hQXrBA" name="UndoActionHandler" isLeaf="true">
              <ownedComment xmi:id="_bZrA8HeiEd-udeJ8hQXrBA">
                <body>
 * &lt;p>
 * UndoActionHandler provides common behavior for performing an undo, as
 * well as labelling and enabling the undo menu item.  This class may be
 * instantiated by clients.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <generalization xmi:id="_bZrA8XeiEd-udeJ8hQXrBA" general="_auJ-wHeiEd-udeJ8hQXrBA"/>
              <ownedOperation xmi:id="_bZ0K4HeiEd-udeJ8hQXrBA" name="flush"/>
              <ownedOperation xmi:id="_bZ0K4XeiEd-udeJ8hQXrBA" name="getCommandString">
                <ownedParameter xmi:id="_bZ0K4neiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bZ0K43eiEd-udeJ8hQXrBA" name="getTooltipString">
                <ownedParameter xmi:id="_bZ0K5HeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_bZ974HeiEd-udeJ8hQXrBA" name="getSimpleCommandString">
                <ownedParameter xmi:id="_bZ974XeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_baHF0HeiEd-udeJ8hQXrBA" name="getSimpleTooltipString">
                <ownedParameter xmi:id="_baHF0XeiEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_baHF0neiEd-udeJ8hQXrBA" name="getOperation">
                <ownedParameter xmi:id="_baHF03eiEd-udeJ8hQXrBA" type="_QJNf2HOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_baQ20HeiEd-udeJ8hQXrBA" name="runCommand">
                <ownedParameter xmi:id="_baQ20XeiEd-udeJ8hQXrBA" type="_fXmVnnOxEd-nKvj-XTCBkg" direction="return"/>
                <ownedParameter xmi:id="_baQ20neiEd-udeJ8hQXrBA" name="pm" type="_fXmVmnOxEd-nKvj-XTCBkg"/>
              </ownedOperation>
              <ownedOperation xmi:id="_baan0HeiEd-udeJ8hQXrBA" name="shouldBeEnabled">
                <ownedParameter xmi:id="_baan0XeiEd-udeJ8hQXrBA" type="_QJqLwnOxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_bbAdsHeiEd-udeJ8hQXrBA" name="UndoRedoActionGroup" isLeaf="true">
              <ownedComment xmi:id="_bbAdsXeiEd-udeJ8hQXrBA">
                <body>
 * &lt;p>
 * UndoRedoActionGroup provides standard undo and redo action handlers for a
 * workbench part site. It supports filtering of undo or redo on a particular
 * undo context. The undo context can be optionally pruned, which means the
 * context will be flushed actively whenever an invalid operation is found on
 * top of its history. This class may be instantiated by clients.
 * &lt;/p>
 * 
 * @since 3.1
 </body>
              </ownedComment>
              <generalization xmi:id="_bbKOsneiEd-udeJ8hQXrBA" general="_bbKOsXeiEd-udeJ8hQXrBA"/>
              <ownedAttribute xmi:id="_bbTYoHeiEd-udeJ8hQXrBA" name="undoActionHandler" visibility="private" type="_bZhP8HeiEd-udeJ8hQXrBA" isUnique="false"/>
              <ownedAttribute xmi:id="_bbdJoHeiEd-udeJ8hQXrBA" name="redoActionHandler" visibility="private" type="_bXlWQHeiEd-udeJ8hQXrBA" isUnique="false"/>
              <ownedOperation xmi:id="_bbwEkXeiEd-udeJ8hQXrBA" name="fillActionBars" visibility="public">
                <ownedParameter xmi:id="_bbwEkneiEd-udeJ8hQXrBA" name="actionBars" type="_bbwEkHeiEd-udeJ8hQXrBA"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_11efcHekEd-udeJ8hQXrBA" name="OperationHistoryActionHandler extends IWorkbenchAction" supplier="_11UucXekEd-udeJ8hQXrBA" client="_auJ-wHeiEd-udeJ8hQXrBA"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Interface" xmi:id="_abrHoHeiEd-udeJ8hQXrBA" name="IWorkbenchPart"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_aknoQHeiEd-udeJ8hQXrBA" name="IEditorPart"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_avCvkXeiEd-udeJ8hQXrBA" name="IPartListener"/>
          <packagedElement xmi:type="uml:Package" xmi:id="_aw_QUHeiEd-udeJ8hQXrBA" name="internal">
            <packagedElement xmi:type="uml:Package" xmi:id="_aw_QUXeiEd-udeJ8hQXrBA" name="operations">
              <packagedElement xmi:type="uml:Class" xmi:id="_aw_QUneiEd-udeJ8hQXrBA" name="TimeTriggeredProgressMonitorDialog"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Package" xmi:id="_iOUIEHejEd-udeJ8hQXrBA" name="actions">
              <packagedElement xmi:type="uml:Class" xmi:id="_iOUIEXejEd-udeJ8hQXrBA" name="CommandAction"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Interface" xmi:id="_axbVMHeiEd-udeJ8hQXrBA" name="IWorkbenchPartSite"/>
          <packagedElement xmi:type="uml:Interface" xmi:id="_azET8XeiEd-udeJ8hQXrBA" name="IWorkbenchWindow"/>
          <packagedElement xmi:type="uml:Package" xmi:id="_bbKOsHeiEd-udeJ8hQXrBA" name="actions">
            <packagedElement xmi:type="uml:Class" xmi:id="_bbKOsXeiEd-udeJ8hQXrBA" name="ActionGroup"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_iNkhMHejEd-udeJ8hQXrBA" name="ActionFactory" isAbstract="true">
              <ownedComment xmi:id="_iNtrIHejEd-udeJ8hQXrBA">
                <body>
 * Access to standard actions provided by the workbench.
 * &lt;p>
 * Most of the functionality of this class is provided by static methods and
 * fields. Example usage:
 * 
 * &lt;pre>
 * MenuManager menu = ...;
 * ActionFactory.IWorkbenchAction closeEditorAction
 *    = ActionFactory.CLOSE.create(window);
 * menu.add(closeEditorAction);
 * &lt;/pre>
 * &lt;/p>
 * &lt;p>
 * Clients may declare other classes that provide additional application-specific
 * action factories.
 * &lt;/p>
 * 
 * @since 3.0
 </body>
              </ownedComment>
              <ownedAttribute xmi:id="_iOdSAXejEd-udeJ8hQXrBA" name="ABOUT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iOnDAHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;about&quot;, commandId: &quot;org.eclipse.ui.help.aboutAction&quot;): Displays the
	 * About dialog. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iO598HejEd-udeJ8hQXrBA" name="ACTIVATE_EDITOR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iPDu8HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;activateEditor&quot;, commandId: &quot;org.eclipse.ui.window.activateEditor&quot;):
	 * Activate the most recently used editor. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iPM44HejEd-udeJ8hQXrBA" name="BACK" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iPWp4HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;back&quot;, commandId: &quot;org.eclipse.ui.navigate.back&quot;): Back. This action
	 * is a {@link RetargetAction} with id &quot;back&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iPzV0HejEd-udeJ8hQXrBA" name="BACKWARD_HISTORY" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iP9G0HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;backardHistory&quot;, commandId: &quot;org.eclipse.ui.navigate.backwardHistory&quot;):
	 * Backward in the navigation history. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iQGQwHejEd-udeJ8hQXrBA" name="CLOSE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iQQBwHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;close&quot;, commandId: &quot;org.eclipse.ui.file.close&quot;): Close the active
	 * editor. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iQZLsHejEd-udeJ8hQXrBA" name="CLOSE_ALL" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iQi8sHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;closeAll&quot;, commandId: &quot;org.eclipse.ui.file.closeAll&quot;): Close all open
	 * editors. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iQstsHejEd-udeJ8hQXrBA" name="CLOSE_OTHERS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iQ13oHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;closeOthers&quot;, commandId: &quot;org.eclipse.ui.file.closeOthers&quot;): Close all
	 * editors except the one that is active. This action maintains its enablement state.
	 * 
	 * @since 3.2
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iQ_ooHejEd-udeJ8hQXrBA" name="CLOSE_ALL_PERSPECTIVES" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iRJZoHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;closeAllPerspectives&quot;, commandId: &quot;org.eclipse.ui.window.closeAllPerspectives&quot;):
	 * Closes all perspectives. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iRcUkHejEd-udeJ8hQXrBA" name="CLOSE_ALL_SAVED" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iRlegHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;closeAllSaved&quot;): Close all open editors except those with unsaved
	 * changes. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iRvPgHejEd-udeJ8hQXrBA" name="CLOSE_PERSPECTIVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iR5AgHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;closePerspective&quot;, commandId: &quot;org.eclipse.ui.window.closePerspective&quot;):
	 * Closes the current perspective. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iSCKcHejEd-udeJ8hQXrBA" name="INTRO" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iSL7cHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;intro&quot;, commandId: &quot;org.eclipse.ui.help.quickStartAction&quot;): Activate
	 * the introduction extension. This action should not be instantiated if no intro is provided.
	 * Use code like:
	 * 
	 * &lt;pre>
	 * if (window.getWorkbench().getIntroManager().hasIntro()) {
	 * 	introAction= ActionFactory.INTRO.create(window);
	 * 	register(introAction);
	 * }
	 * &lt;/pre>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iSVscHejEd-udeJ8hQXrBA" name="COPY" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iSe2YHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;copy&quot;, commandId: &quot;org.eclipse.ui.edit.copy&quot;): Copy. This action is a
	 * {@link RetargetAction} with id &quot;copy&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iSxxUHejEd-udeJ8hQXrBA" name="CUT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iSxxUXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;cut&quot;, commandId: &quot;org.eclipse.ui.edit.cut&quot;): Cut. This action is a
	 * {@link RetargetAction} with id &quot;cut&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iTFTUHejEd-udeJ8hQXrBA" name="DELETE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iTOdQHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;delete&quot;, commandId: &quot;org.eclipse.ui.edit.delete&quot;): Delete. This action
	 * is a {@link RetargetAction} with id &quot;delete&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iTYOQHejEd-udeJ8hQXrBA" name="EDIT_ACTION_SETS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iTh_QHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;editActionSets&quot;, commandId: &quot;org.eclipse.ui.window.customizePerspective&quot;):
	 * Edit the action sets. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iTrJMHejEd-udeJ8hQXrBA" name="EXPORT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iT06MHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;export&quot;, commandId: &quot;org.eclipse.ui.file.export&quot;): Opens the export
	 * wizard. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iT-EIHejEd-udeJ8hQXrBA" name="FIND" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iUH1IHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;find&quot;, commandId: &quot;org.eclipse.ui.edit.findReplace&quot;): Find. This
	 * action is a {@link RetargetAction} with id &quot;find&quot;. This action maintains its enablement
	 * state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iURmIHejEd-udeJ8hQXrBA" name="FORWARD" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iUawEHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;forward&quot;, commandId: &quot;org.eclipse.ui.navigate.forward&quot;): Forward. This
	 * action is a {@link RetargetAction} with id &quot;forward&quot;. This action maintains its enablement
	 * state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iUuSEHejEd-udeJ8hQXrBA" name="FORWARD_HISTORY" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iUuSEXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;forwardHistory&quot;, commandId: &quot;org.eclipse.ui.navigate.forwardHistory&quot;):
	 * Forward in the navigation history. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iVBNAHejEd-udeJ8hQXrBA" name="GO_INTO" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iVBNAXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;goInto&quot;, commandId: &quot;org.eclipse.ui.navigate.goInto&quot;): Go Into. This
	 * action is a {@link RetargetAction} with id &quot;goInto&quot;. This action maintains its enablement
	 * state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iVUH8HejEd-udeJ8hQXrBA" name="IMPORT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iVd48HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;import&quot;, commandId: &quot;org.eclipse.ui.file.import&quot;): Opens the import
	 * wizard. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iVnC4HejEd-udeJ8hQXrBA" name="LOCK_TOOL_BAR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iVwz4HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;lockToolBar&quot;): Lock/unlock the workbench window tool bar. This action
	 * maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iV6k4HejEd-udeJ8hQXrBA" name="MAXIMIZE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iWDu0HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;maximize&quot;, commandId: &quot;org.eclipse.ui.window.maximizePart&quot;):
	 * Maximize/restore the active part. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iWNf0HejEd-udeJ8hQXrBA" name="MINIMIZE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iWWpwHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;minimize&quot;, commandId: &quot;org.eclipse.ui.window.minimizePart&quot;): Minimizes
	 * the active part. This action maintains its enablement state.
	 * 
	 * @since 3.1
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iWgawHejEd-udeJ8hQXrBA" name="MOVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iWqLwHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;move&quot;, commandId: &quot;org.eclipse.ui.edit.move&quot;): Move. This action is a
	 * {@link RetargetAction} with id &quot;move&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iWzVsHejEd-udeJ8hQXrBA" name="NEW" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iW9GsHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;new&quot;, commandId: &quot;org.eclipse.ui.newWizard&quot;): Opens the new wizard
	 * dialog. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iXG3sHejEd-udeJ8hQXrBA" name="NEW_WIZARD_DROP_DOWN" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iXQBoHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;newWizardDropDown&quot;): Drop-down action which shows shows the new wizard
	 * drop down, or opens the new wizard dialog when pressed. For use in the toolbar. This action
	 * maintains its enablement state.
	 * 
	 * @since 3.1
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iXZyoHejEd-udeJ8hQXrBA" name="NEXT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iXi8kHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;next&quot;, commandId: &quot;org.eclipse.ui.navigate.next&quot;): Next. This action
	 * is a {@link RetargetAction} with id &quot;next&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iX2ekHejEd-udeJ8hQXrBA" name="NEXT_EDITOR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iX_ogHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;nextEditor&quot;, commandId: &quot;org.eclipse.ui.window.nextEditor&quot;): Next
	 * editor. This action maintains its enablement state.
	 * &lt;p>
	 * &lt;code>NEXT_EDITOR&lt;/code> and &lt;code>PREVIOUS_EDITOR&lt;/code> form a cycle action pair. For a
	 * given window, use {@link ActionFactory#linkCycleActionPair
	 * ActionFactory.linkCycleActionPair&lt;/code>} to connect the two.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iYJZgHejEd-udeJ8hQXrBA" name="NEXT_PART" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iYTKgHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;nextPart&quot;, commandId: &quot;org.eclipse.ui.window.nextView&quot;): Next part.
	 * This action maintains its enablement state.
	 * &lt;p>
	 * &lt;code>NEXT_PART&lt;/code> and &lt;code>PREVIOUS_PART&lt;/code> form a cycle action pair. For a given
	 * window, use {@link ActionFactory#linkCycleActionPair
	 * ActionFactory.linkCycleActionPair&lt;/code>} to connect the two.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iYmFcHejEd-udeJ8hQXrBA" name="NEXT_PERSPECTIVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iYmFcXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;nextPerspective&quot;, commandId: &quot;org.eclipse.ui.window.nextPerspective&quot;):
	 * Next perspective. This action maintains its enablement state.
	 * &lt;p>
	 * &lt;code>NEXT_PERSPECTIVE&lt;/code> and &lt;code>PREVIOUS_PERSPECTIVE&lt;/code> form a cycle action pair.
	 * For a given window, use {@link ActionFactory#linkCycleActionPair
	 * ActionFactory.linkCycleActionPair&lt;/code>} to connect the two.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iY5AYHejEd-udeJ8hQXrBA" name="OPEN_NEW_WINDOW" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iY5AYXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;openNewWindow&quot;, commandId: &quot;org.eclipse.ui.window.newWindow&quot;): Open a
	 * new workbench window. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iZL7UHejEd-udeJ8hQXrBA" name="PASTE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iZVsUHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;paste&quot;, commandId: &quot;org.eclipse.ui.edit.paste&quot;): Paste. This action is
	 * a {@link RetargetAction} with id &quot;paste&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iZfdUHejEd-udeJ8hQXrBA" name="PREFERENCES" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iZonQHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;preferences&quot;, commandId: &quot;org.eclipse.ui.window.preferences&quot;):
	 * Displays the Preferences dialog. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iZyYQHejEd-udeJ8hQXrBA" name="PREVIOUS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iZ7iMHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;previous&quot;, commandId: &quot;org.eclipse.ui.navigate.previous&quot;): Previous.
	 * This action is a {@link RetargetAction} with id &quot;previous&quot;. This action maintains its
	 * enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iaFTMHejEd-udeJ8hQXrBA" name="PREVIOUS_EDITOR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iaPEMHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;previousEditor&quot;, commandId: &quot;org.eclipse.ui.window.previousEditor&quot;):
	 * Previous editor. This action maintains its enablement state.
	 * &lt;p>
	 * &lt;code>NEXT_EDITOR&lt;/code> and &lt;code>PREVIOUS_EDITOR&lt;/code> form a cycle action pair. For a
	 * given window, use {@link ActionFactory#linkCycleActionPair
	 * ActionFactory.linkCycleActionPair&lt;/code>} to connect the two.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iaYOIHejEd-udeJ8hQXrBA" name="PREVIOUS_PART" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iah_IHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;previousPart&quot;, commandId: &quot;org.eclipse.ui.window.previousView&quot;):
	 * Previous part. This action maintains its enablement state.
	 * &lt;p>
	 * &lt;code>NEXT_PART&lt;/code> and &lt;code>PREVIOUS_PART&lt;/code> form a cycle action pair. For a given
	 * window, use {@link ActionFactory#linkCycleActionPair
	 * ActionFactory.linkCycleActionPair&lt;/code>} to connect the two.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iarwIHejEd-udeJ8hQXrBA" name="PREVIOUS_PERSPECTIVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ia06EHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;previousPerspective&quot;, commandId: &quot;org.eclipse.ui.window.previousPerspective&quot;):
	 * Previous perspective. This action maintains its enablement state.
	 * &lt;p>
	 * &lt;code>NEXT_PERSPECTIVE&lt;/code> and &lt;code>PREVIOUS_PERSPECTIVE&lt;/code> form a cycle action pair.
	 * For a given window, use {@link ActionFactory#linkCycleActionPair
	 * ActionFactory.linkCycleActionPair&lt;/code>} to connect the two.
	 * &lt;/p>
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ia-rEHejEd-udeJ8hQXrBA" name="PRINT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ibH1AHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;print&quot;, commandId: &quot;org.eclipse.ui.file.print&quot;): Print. This action is
	 * a {@link RetargetAction} with id &quot;print&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ibuR8HejEd-udeJ8hQXrBA" name="PROPERTIES" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ib4C8HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;properties&quot;, commandId: &quot;org.eclipse.ui.file.properties&quot;): Properties.
	 * This action is a {@link RetargetAction} with id &quot;properties&quot;. This action maintains its
	 * enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_icBM4HejEd-udeJ8hQXrBA" name="QUIT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_icK94HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;quit&quot;, commandId: &quot;org.eclipse.ui.file.exit&quot;): Quit (close the
	 * workbench). This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_icUu4HejEd-udeJ8hQXrBA" name="REDO" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_icd40HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;redo&quot;, commandId: &quot;org.eclipse.ui.edit.redo&quot;): Redo. This action is a
	 * {@link RetargetAction} with id &quot;redo&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_icwzwHejEd-udeJ8hQXrBA" name="REFRESH" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_icwzwXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;refresh&quot;, commandId: &quot;org.eclipse.ui.file.refresh&quot;): Refresh. This
	 * action is a {@link RetargetAction} with id &quot;refresh&quot;. This action maintains its enablement
	 * state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ic6kwHejEd-udeJ8hQXrBA" name="RENAME" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_idEVwHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;rename&quot;, commandId: &quot;org.eclipse.ui.edit.rename&quot;): Rename. This action
	 * is a {@link RetargetAction} with id &quot;rename&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_idXQsHejEd-udeJ8hQXrBA" name="RESET_PERSPECTIVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_idhBsHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;resetPerspective&quot;, commandId: &quot;org.eclipse.ui.window.resetPerspective&quot;):
	 * Resets the current perspective. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_idqLoHejEd-udeJ8hQXrBA" name="REVERT" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_idz8oHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;revert&quot;, commandId: &quot;org.eclipse.ui.file.revert&quot;): Revert. This action
	 * is a {@link RetargetAction} with id &quot;revert&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_id9GkHejEd-udeJ8hQXrBA" name="SAVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ieG3kHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;save&quot;, commandId: &quot;org.eclipse.ui.file.save&quot;): Save the active editor.
	 * This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ieQokHejEd-udeJ8hQXrBA" name="SAVE_ALL" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ieZygHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;saveAll&quot;, commandId: &quot;org.eclipse.ui.file.saveAll&quot;): Save all open
	 * editors with unsaved changes. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iejjgHejEd-udeJ8hQXrBA" name="SAVE_AS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ietUgHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;saveAs&quot;, commandId: &quot;org.eclipse.ui.file.saveAs&quot;): Save As for the
	 * active editor. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ifAPcHejEd-udeJ8hQXrBA" name="SAVE_PERSPECTIVE" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ifJZYHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;savePerspective&quot;, commandId: &quot;org.eclipse.ui.window.savePerspective&quot;):
	 * Save the current perspective. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ifTKYHejEd-udeJ8hQXrBA" name="SELECT_ALL" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ifc7YHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;selectAll&quot;, commandId: &quot;org.eclipse.ui.edit.selectAll&quot;): Select All.
	 * This action is a {@link RetargetAction} with id &quot;selectAll&quot;. This action maintains its
	 * enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ifmFUHejEd-udeJ8hQXrBA" name="SHOW_EDITOR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ifv2UHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;showEditor&quot;): Show/hide the editor area. This action maintains its
	 * enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_if5nUHejEd-udeJ8hQXrBA" name="SHOW_OPEN_EDITORS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_igCxQHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;showOpenEditors&quot;): Show a list of open (and recently closed) editors.
	 * This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_igMiQHejEd-udeJ8hQXrBA" name="SHOW_WORKBOOK_EDITORS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_igVsMHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;showWorkbookEditors&quot;): Shows a list of open editors in the current or
	 * last active workbook.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_igpOMHejEd-udeJ8hQXrBA" name="SHOW_QUICK_ACCESS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_igpOMXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;showQuickAccess&quot;): Shows a list of UI elements like editors, views,
	 * perspectives etc.
	 * 
	 * @since 3.3
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ig8JIHejEd-udeJ8hQXrBA" name="SHOW_PART_PANE_MENU" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ig8JIXejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;showPartPaneMenu&quot;): Show the part pane menu. This action maintains its
	 * enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ihPEEHejEd-udeJ8hQXrBA" name="SHOW_VIEW_MENU" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ihY1EHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;showViewMenu&quot;, commandId: &quot;org.eclipse.ui.window.showViewMenu&quot;): Show
	 * the view menu. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ihh_AHejEd-udeJ8hQXrBA" name="UNDO" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ihrwAHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;undo&quot;, commandId: &quot;org.eclipse.ui.edit.undo&quot;): Undo. This action is a
	 * {@link RetargetAction} with id &quot;undo&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ih1hAHejEd-udeJ8hQXrBA" name="UP" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ih-q8HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;up&quot;, commandId: &quot;org.eclipse.ui.navigate.up&quot;): Up. This action is a
	 * {@link RetargetAction} with id &quot;up&quot;. This action maintains its enablement state.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iiSM8HejEd-udeJ8hQXrBA" name="HELP_CONTENTS" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iiSM8XejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;helpContents&quot;, commandId: &quot;org.eclipse.ui.help.helpContents&quot;): Open
	 * the help contents. This action is always enabled.
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_iilH4HejEd-udeJ8hQXrBA" name="HELP_SEARCH" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_iilH4XejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;helpSearch&quot;, commandId: &quot;org.eclipse.ui.help.helpSearch&quot;): Open the
	 * help search. This action is always enabled.
	 * 
	 * @since 3.1
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ii4C0HejEd-udeJ8hQXrBA" name="DYNAMIC_HELP" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ijBz0HejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;dynamicHelp&quot;, commandId: &quot;org.eclipse.ui.help.dynamicHelp&quot;): Open the
	 * dynamic help. This action is always enabled.
	 * 
	 * @since 3.1
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ijK9wHejEd-udeJ8hQXrBA" name="OPEN_PERSPECTIVE_DIALOG" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ijUuwHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;openPerspectiveDialog&quot;, commandId: &quot;org.eclipse.ui.perspectives.showPerspective&quot;):
	 * Open the Open Perspective dialog. This action is always enabled.
	 * 
	 * @since 3.1
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ijefwHejEd-udeJ8hQXrBA" name="NEW_EDITOR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ijnpsHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;newEditor&quot;, commandId: &quot;org.eclipse.ui.window.newEditor&quot;): Open a new
	 * editor on the active editor's input. This action maintains its enablement state.
	 * 
	 * @since 3.1
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ijxasHejEd-udeJ8hQXrBA" name="TOGGLE_COOLBAR" visibility="public" isLeaf="true" isStatic="true" type="_iNkhMHejEd-udeJ8hQXrBA" isUnique="false">
                <ownedComment xmi:id="_ij6koHejEd-udeJ8hQXrBA">
                  <body>
	 * Workbench action (id: &quot;toggleCoolbar&quot;): Toggle the visibility of the coolbar and perspective
	 * switcher. This will only enable visibility of the coolbar and perspective bar if the window
	 * advisor creating the window allowed for their visibility initially.
	 * 
	 * @since 3.3
	 </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ikhBkXejEd-udeJ8hQXrBA" name="actionId" visibility="private" isLeaf="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_ikqykHejEd-udeJ8hQXrBA">
                  <body>
     * Id of actions created by this action factory.
     </body>
                </ownedComment>
              </ownedAttribute>
              <ownedAttribute xmi:id="_ikz8gHejEd-udeJ8hQXrBA" name="commandId" visibility="private" isLeaf="true" type="_QJNf73OxEd-nKvj-XTCBkg" isUnique="false">
                <ownedComment xmi:id="_ik9tgHejEd-udeJ8hQXrBA">
                  <body>
     * Optional ID for this action.
     </body>
                </ownedComment>
              </ownedAttribute>
              <nestedClassifier xmi:type="uml:Interface" xmi:id="_11UucXekEd-udeJ8hQXrBA" name="IWorkbenchAction">
                <ownedComment xmi:id="_J0X20HelEd-udeJ8hQXrBA">
                  <body>
     * Interface for a workbench action.
     </body>
                </ownedComment>
                <generalization xmi:id="_J0X20XelEd-udeJ8hQXrBA" general="_iN3cInejEd-udeJ8hQXrBA"/>
                <ownedOperation xmi:id="_J0X20nelEd-udeJ8hQXrBA" name="dispose" visibility="public">
                  <ownedComment xmi:id="_J0X203elEd-udeJ8hQXrBA">
                    <body>
         * Disposes of this action. Once disposed, this action cannot be used.
         * This operation has no effect if the action has already been
         * disposed.
         </body>
                  </ownedComment>
                </ownedOperation>
              </nestedClassifier>
              <nestedClassifier xmi:type="uml:Class" xmi:id="_iOKXEnejEd-udeJ8hQXrBA" name="WorkbenchCommandAction" visibility="private" clientDependency="_iOdSAHejEd-udeJ8hQXrBA _J0hAwHelEd-udeJ8hQXrBA">
                <generalization xmi:id="_iOUIEnejEd-udeJ8hQXrBA" general="_iOUIEXejEd-udeJ8hQXrBA"/>
              </nestedClassifier>
              <ownedOperation xmi:id="_ikOGoHejEd-udeJ8hQXrBA" name="linkCycleActionPair" visibility="public" isStatic="true">
                <ownedComment xmi:id="_ikOGoXejEd-udeJ8hQXrBA">
                  <body>
	 * Establishes bi-direction connections between the forward and backward
	 * actions of a cycle pair.
	 * &lt;p>
	 * Example usage:
	 * 
	 * &lt;pre>
	 * ActionFactory.IWorkbenchAction nextEditorAction = ActionFactory.NEXT_EDITOR
	 * 		.create(window);
	 * ActionFactory.IWorkbenchAction previousEditorAction = ActionFactory.PREVIOUS_EDITOR
	 * 		.create(window);
	 * ActionFactory.linkCycleActionPair(nextEditorAction, previousEditorAction);
	 * &lt;/pre>
	 * 
	 * &lt;/p>
	 * 
	 * @param next
	 *            the action that moves forward
	 * @param previous
	 *            the action that moves backward
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_ikXQkHejEd-udeJ8hQXrBA" name="next"/>
                <ownedParameter xmi:id="_ikhBkHejEd-udeJ8hQXrBA" name="previous"/>
                <ownedParameter xmi:id="_KIVUoHelEd-udeJ8hQXrBA" name="next" type="_KHvewHelEd-udeJ8hQXrBA"/>
                <ownedParameter xmi:id="_KIVUoXelEd-udeJ8hQXrBA" name="previous" type="_KHvewHelEd-udeJ8hQXrBA"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ilG3cHejEd-udeJ8hQXrBA" name="create" visibility="public" isAbstract="true">
                <ownedComment xmi:id="_ilG3cXejEd-udeJ8hQXrBA">
                  <body>
     * Creates a new standard action for the given workbench window. The action
     * has an id as specified by the particular factory.
     * &lt;p>
     * Actions automatically register listeners against the workbench window so
     * that they can keep their enablement state up to date. Ordinarily, the
     * window's references to these listeners will be dropped automatically
     * when the window closes. However, if the client needs to get rid of an
     * action while the window is still open, the client must call
     * {@link IWorkbenchAction#dispose dispose}to give the action an
     * opportunity to deregister its listeners and to perform any other
     * cleanup.
     * &lt;/p>
     * 
     * @param window
     *            the workbench window
     * @return the workbench action
     </body>
                </ownedComment>
                <ownedParameter xmi:id="_ilQocHejEd-udeJ8hQXrBA" type="_KHvewHelEd-udeJ8hQXrBA" direction="return"/>
                <ownedParameter xmi:id="_ilQocXejEd-udeJ8hQXrBA" name="window" type="_azET8XeiEd-udeJ8hQXrBA"/>
              </ownedOperation>
              <ownedOperation xmi:id="_ilaZcHejEd-udeJ8hQXrBA" name="getId" visibility="public">
                <ownedComment xmi:id="_ilaZcXejEd-udeJ8hQXrBA">
                  <body>
     * Returns the id of this action factory.
     * 
     * @return the id of actions created by this action factory
     </body>
                </ownedComment>
                <ownedParameter xmi:id="_iljjYHejEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_iljjYXejEd-udeJ8hQXrBA" name="getCommandId" visibility="public">
                <ownedComment xmi:id="_iljjYnejEd-udeJ8hQXrBA">
                  <body>
	 * Return the command id of this action factory.
	 * 
	 * @return the command id of the action created by this action factory. May
	 *         be &lt;code>null&lt;/code>.
	 * @since 3.5
	 </body>
                </ownedComment>
                <ownedParameter xmi:id="_iltUYHejEd-udeJ8hQXrBA" type="_QJNf73OxEd-nKvj-XTCBkg" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Realization" xmi:id="_iOdSAHejEd-udeJ8hQXrBA" name="WorkbenchCommandAction extends IWorkbenchAction" client="_iOKXEnejEd-udeJ8hQXrBA"/>
            <packagedElement xmi:type="uml:Realization" xmi:id="_J0hAwHelEd-udeJ8hQXrBA" name="WorkbenchCommandAction extends IWorkbenchAction" supplier="_11UucXekEd-udeJ8hQXrBA" client="_iOKXEnejEd-udeJ8hQXrBA"/>
            <packagedElement xmi:type="uml:Interface" xmi:id="_KHvewHelEd-udeJ8hQXrBA" name="IWorkbenchAction"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Interface" xmi:id="_bbwEkHeiEd-udeJ8hQXrBA" name="IActionBars"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_auTIsXeiEd-udeJ8hQXrBA" name="jface">
    <packagedElement xmi:type="uml:Package" xmi:id="_auTIsneiEd-udeJ8hQXrBA" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_auTIs3eiEd-udeJ8hQXrBA" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_auc5sHeiEd-udeJ8hQXrBA" name="jface">
          <packagedElement xmi:type="uml:Package" xmi:id="_auc5sXeiEd-udeJ8hQXrBA" name="action">
            <packagedElement xmi:type="uml:Class" xmi:id="_aumqsHeiEd-udeJ8hQXrBA" name="Action"/>
            <packagedElement xmi:type="uml:Interface" xmi:id="_iN3cInejEd-udeJ8hQXrBA" name="IAction"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Package" xmi:id="_pB4BUHh5Ed-ECKyh8Dg6Wg" name="viewers">
            <packagedElement xmi:type="uml:Interface" xmi:id="_pB4BUXh5Ed-ECKyh8Dg6Wg" name="ILabelProvider"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_pI4oQHh5Ed-ECKyh8Dg6Wg" name="draw2d">
    <packagedElement xmi:type="uml:Package" xmi:id="_pI4oQXh5Ed-ECKyh8Dg6Wg" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_pI4oQnh5Ed-ECKyh8Dg6Wg" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_pJByMHh5Ed-ECKyh8Dg6Wg" name="draw2d">
          <packagedElement xmi:type="uml:Package" xmi:id="_pJLjMHh5Ed-ECKyh8Dg6Wg" name="geometry">
            <packagedElement xmi:type="uml:Class" xmi:id="_pJLjMXh5Ed-ECKyh8Dg6Wg" name="Point"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_p3YF8Hh5Ed-ECKyh8Dg6Wg" name="Rectangle"/>
            <packagedElement xmi:type="uml:Class" xmi:id="_q5-ycHh5Ed-ECKyh8Dg6Wg" name="Dimension"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Interface" xmi:id="_phxCUHh5Ed-ECKyh8Dg6Wg" name="IFigure"/>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_p6zNYHh5Ed-ECKyh8Dg6Wg" name="swt">
    <packagedElement xmi:type="uml:Package" xmi:id="_p6zNYXh5Ed-ECKyh8Dg6Wg" name="org">
      <packagedElement xmi:type="uml:Package" xmi:id="_p68-YHh5Ed-ECKyh8Dg6Wg" name="eclipse">
        <packagedElement xmi:type="uml:Package" xmi:id="_p68-YXh5Ed-ECKyh8Dg6Wg" name="swt">
          <packagedElement xmi:type="uml:Package" xmi:id="_p68-Ynh5Ed-ECKyh8Dg6Wg" name="widgets">
            <packagedElement xmi:type="uml:Class" xmi:id="_p7GIUHh5Ed-ECKyh8Dg6Wg" name="Shell"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
  </packagedElement>
  <packagedElement xmi:type="uml:Model" xmi:id="_8WZAIH11Ed-F4bwY8huSjw" name="Papyrus undo">
    <ownedComment xmi:id="_WFqTUH15Ed-JUNbX4CeVmg" annotatedElement="_Doy2wH12Ed-F4bwY8huSjw">
      <body>In GMF&#xD;
defaultContext = EditingDomainUndoContext(editingDomain)&#xD;
Automatically added to operation</body>
    </ownedComment>
    <ownedComment xmi:id="_xBuRIH15Ed-JUNbX4CeVmg" annotatedElement="_pOcCYH12Ed-F4bwY8huSjw">
      <body>undoContext = EditingDomainUndoContext(editingDomain)</body>
    </ownedComment>
    <ownedComment xmi:id="_L_fa8H2BEd-JUNbX4CeVmg" annotatedElement="_C1HhoH13Ed-F4bwY8huSjw">
      <body> contexts:&#xD;
- EditingDomainUndoContext(editingDomain) added by notifier (who ??)</body>
    </ownedComment>
    <ownedComment xmi:id="_HqPnEH2DEd-JUNbX4CeVmg" annotatedElement="_Hh0hUH13Ed-F4bwY8huSjw">
      <body>contexts:&#xD;
- ResourceUndoContext(affected uml file) added by the operation&#xD;
- EditingDomainUndoContext(editingDomain) added by notifier (who ??)</body>
    </ownedComment>
    <ownedComment xmi:id="_A6gRQH2GEd-JUNbX4CeVmg" annotatedElement="_FZ5A8H12Ed-F4bwY8huSjw">
      <body> added contexts:&#xD;
- WorkspaceCommandStackImpl.local – set by the WorkspaceCommandStack&#xD;
- ResourceUndoContext – set when the transaction is commited&#xD;
- EditingDomainUndoContext – set by one notifier (who ?)</body>
    </ownedComment>
    <packagedElement xmi:type="uml:Class" xmi:id="_Bvfy0H12Ed-F4bwY8huSjw" name="IOperationHistory">
      <ownedOperation xmi:id="_KfVQwH12Ed-F4bwY8huSjw" name="execute"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_Doy2wH12Ed-F4bwY8huSjw" name="DiagramCommandStack" clientDependency="_VKjdUH12Ed-F4bwY8huSjw">
      <ownedAttribute xmi:id="_Ql_loH15Ed-JUNbX4CeVmg" name="defaultContext" visibility="public">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ejKrIH15Ed-JUNbX4CeVmg" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ejA6IH15Ed-JUNbX4CeVmg" value="1"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_ejT1EH15Ed-JUNbX4CeVmg">
          <value xsi:nil="true"/>
        </defaultValue>
      </ownedAttribute>
      <ownedOperation xmi:id="_JWLQUH12Ed-F4bwY8huSjw" name="execute"/>
      <ownedOperation xmi:id="_ZyWH0H12Ed-F4bwY8huSjw" name="undo"/>
      <ownedOperation xmi:id="_a24uAH12Ed-F4bwY8huSjw" name="redo"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_FZ5A8H12Ed-F4bwY8huSjw" name="WorkspaceTransactionalCommandStack" clientDependency="_M-CH0H12Ed-F4bwY8huSjw">
      <ownedOperation xmi:id="_LWKyIH12Ed-F4bwY8huSjw" name="execute"/>
      <ownedOperation xmi:id="_d5DegH12Ed-F4bwY8huSjw" name="undo"/>
      <ownedOperation xmi:id="_fR3EgH12Ed-F4bwY8huSjw" name="redo"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_M-CH0H12Ed-F4bwY8huSjw" name="[local IUndoContext + ResourceUndoContext(domain, Resource)]" supplier="_Bvfy0H12Ed-F4bwY8huSjw" client="_FZ5A8H12Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_VKjdUH12Ed-F4bwY8huSjw" name="[local IUndoContext]" supplier="_Bvfy0H12Ed-F4bwY8huSjw" client="_Doy2wH12Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_pOcCYH12Ed-F4bwY8huSjw" name="Papyrus Editor">
      <ownedAttribute xmi:id="_75hBcH12Ed-F4bwY8huSjw" name="undoRedo" visibility="public">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8ylXcH12Ed-F4bwY8huSjw" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8ybmcH12Ed-F4bwY8huSjw" value="1"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_8yvIcH12Ed-F4bwY8huSjw">
          <value xsi:nil="true"/>
        </defaultValue>
      </ownedAttribute>
      <nestedClassifier xmi:type="uml:Class" xmi:id="_v6Qx0H3REd-dytqMVVexsQ" name="Nested GMF Classifier">
        <nestedClassifier xmi:type="uml:Class" xmi:id="_c5JrQH13Ed-F4bwY8huSjw" name="Contextual Menu"/>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_Z-45kH13Ed-F4bwY8huSjw" name="Node Move" clientDependency="_qhFOoH15Ed-JUNbX4CeVmg"/>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_YKzs0H13Ed-F4bwY8huSjw" name="Tools (Palette)" clientDependency="_elhRAH14Ed-JUNbX4CeVmg"/>
        <nestedClassifier xmi:type="uml:Class" xmi:id="_yLyoMH3UEd-dytqMVVexsQ" name="Notifier"/>
      </nestedClassifier>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_rKkX4H12Ed-F4bwY8huSjw" name="Model Explorer">
      <ownedAttribute xmi:id="_9VAIAH12Ed-F4bwY8huSjw" name="undoRedo" visibility="public">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_-DzHsH12Ed-F4bwY8huSjw" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_-DpWsH12Ed-F4bwY8huSjw" value="1"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="_-DzHsX12Ed-F4bwY8huSjw">
          <value xsi:nil="true"/>
        </defaultValue>
      </ownedAttribute>
      <nestedClassifier xmi:type="uml:Class" xmi:id="_edJNkH13Ed-F4bwY8huSjw" name="Create Child" clientDependency="_iqorQH2DEd-JUNbX4CeVmg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_tz_RMH12Ed-F4bwY8huSjw" name="Property View">
      <ownedAttribute xmi:id="_-vmdwH12Ed-F4bwY8huSjw" name="undoRedo" visibility="public">
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__bkL4H12Ed-F4bwY8huSjw" value="1"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__baa4H12Ed-F4bwY8huSjw" value="1"/>
        <defaultValue xmi:type="uml:LiteralString" xmi:id="__btV0H12Ed-F4bwY8huSjw">
          <value xsi:nil="true"/>
        </defaultValue>
      </ownedAttribute>
      <nestedClassifier xmi:type="uml:Class" xmi:id="_C1HhoH13Ed-F4bwY8huSjw" name="GMF Generated Properties" clientDependency="_aDEqcH2BEd-JUNbX4CeVmg"/>
      <nestedClassifier xmi:type="uml:Class" xmi:id="_Hh0hUH13Ed-F4bwY8huSjw" name="UML Generated Properties" clientDependency="_teez4H15Ed-JUNbX4CeVmg"/>
      <nestedClassifier xmi:type="uml:Class" xmi:id="_E0q-kH13Ed-F4bwY8huSjw" name="Appearance Properties" clientDependency="_MviCEH3UEd-dytqMVVexsQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_elhRAH14Ed-JUNbX4CeVmg" name="execute on" supplier="_Doy2wH12Ed-F4bwY8huSjw" client="_YKzs0H13Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_qhFOoH15Ed-JUNbX4CeVmg" name="execute on" supplier="_Doy2wH12Ed-F4bwY8huSjw" client="_Z-45kH13Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_teez4H15Ed-JUNbX4CeVmg" name="execute on" supplier="_Bvfy0H12Ed-F4bwY8huSjw" client="_Hh0hUH13Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_aDEqcH2BEd-JUNbX4CeVmg" name="execute on" supplier="_Bvfy0H12Ed-F4bwY8huSjw" client="_C1HhoH13Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_iqorQH2DEd-JUNbX4CeVmg" name="execute on" supplier="_FZ5A8H12Ed-F4bwY8huSjw" client="_edJNkH13Ed-F4bwY8huSjw"/>
    <packagedElement xmi:type="uml:Dependency" xmi:id="_MviCEH3UEd-dytqMVVexsQ" name="executes on" supplier="_FZ5A8H12Ed-F4bwY8huSjw" client="_E0q-kH13Ed-F4bwY8huSjw"/>
  </packagedElement>
</uml:Model>
